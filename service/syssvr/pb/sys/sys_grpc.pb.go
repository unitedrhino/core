// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: proto/sys.proto

package sys

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserManage_UserInfoCreate_FullMethodName         = "/sys.UserManage/userInfoCreate"
	UserManage_UserInfoIndex_FullMethodName          = "/sys.UserManage/userInfoIndex"
	UserManage_UserInfoUpdate_FullMethodName         = "/sys.UserManage/userInfoUpdate"
	UserManage_UserInfoRead_FullMethodName           = "/sys.UserManage/userInfoRead"
	UserManage_UserInfoDelete_FullMethodName         = "/sys.UserManage/userInfoDelete"
	UserManage_UserLogin_FullMethodName              = "/sys.UserManage/userLogin"
	UserManage_UserForgetPwd_FullMethodName          = "/sys.UserManage/userForgetPwd"
	UserManage_UserCaptcha_FullMethodName            = "/sys.UserManage/userCaptcha"
	UserManage_UserCheckToken_FullMethodName         = "/sys.UserManage/userCheckToken"
	UserManage_UserRegister_FullMethodName           = "/sys.UserManage/userRegister"
	UserManage_UserChangePwd_FullMethodName          = "/sys.UserManage/userChangePwd"
	UserManage_UserCodeToUserID_FullMethodName       = "/sys.UserManage/userCodeToUserID"
	UserManage_UserBindAccount_FullMethodName        = "/sys.UserManage/userBindAccount"
	UserManage_UserRoleIndex_FullMethodName          = "/sys.UserManage/userRoleIndex"
	UserManage_UserRoleMultiUpdate_FullMethodName    = "/sys.UserManage/userRoleMultiUpdate"
	UserManage_UserRoleMultiCreate_FullMethodName    = "/sys.UserManage/userRoleMultiCreate"
	UserManage_UserDeptIndex_FullMethodName          = "/sys.UserManage/userDeptIndex"
	UserManage_UserDeptMultiDelete_FullMethodName    = "/sys.UserManage/userDeptMultiDelete"
	UserManage_UserDeptMultiCreate_FullMethodName    = "/sys.UserManage/userDeptMultiCreate"
	UserManage_UserAreaApplyCreate_FullMethodName    = "/sys.UserManage/userAreaApplyCreate"
	UserManage_UserMessageMultiIsRead_FullMethodName = "/sys.UserManage/userMessageMultiIsRead"
	UserManage_UserMessageIndex_FullMethodName       = "/sys.UserManage/userMessageIndex"
	UserManage_UserMessageStatistics_FullMethodName  = "/sys.UserManage/userMessageStatistics"
	UserManage_UserProfileRead_FullMethodName        = "/sys.UserManage/userProfileRead"
	UserManage_UserProfileUpdate_FullMethodName      = "/sys.UserManage/userProfileUpdate"
	UserManage_UserProfileIndex_FullMethodName       = "/sys.UserManage/userProfileIndex"
)

// UserManageClient is the client API for UserManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManageClient interface {
	UserInfoCreate(ctx context.Context, in *UserInfoCreateReq, opts ...grpc.CallOption) (*UserCreateResp, error)
	UserInfoIndex(ctx context.Context, in *UserInfoIndexReq, opts ...grpc.CallOption) (*UserInfoIndexResp, error)
	UserInfoUpdate(ctx context.Context, in *UserInfoUpdateReq, opts ...grpc.CallOption) (*Empty, error)
	UserInfoRead(ctx context.Context, in *UserInfoReadReq, opts ...grpc.CallOption) (*UserInfo, error)
	UserInfoDelete(ctx context.Context, in *UserInfoDeleteReq, opts ...grpc.CallOption) (*Empty, error)
	UserLogin(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginResp, error)
	UserForgetPwd(ctx context.Context, in *UserForgetPwdReq, opts ...grpc.CallOption) (*Empty, error)
	UserCaptcha(ctx context.Context, in *UserCaptchaReq, opts ...grpc.CallOption) (*UserCaptchaResp, error)
	UserCheckToken(ctx context.Context, in *UserCheckTokenReq, opts ...grpc.CallOption) (*UserCheckTokenResp, error)
	UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error)
	UserChangePwd(ctx context.Context, in *UserChangePwdReq, opts ...grpc.CallOption) (*Empty, error)
	UserCodeToUserID(ctx context.Context, in *UserCodeToUserIDReq, opts ...grpc.CallOption) (*UserCodeToUserIDResp, error)
	UserBindAccount(ctx context.Context, in *UserBindAccountReq, opts ...grpc.CallOption) (*Empty, error)
	UserRoleIndex(ctx context.Context, in *UserRoleIndexReq, opts ...grpc.CallOption) (*UserRoleIndexResp, error)
	UserRoleMultiUpdate(ctx context.Context, in *UserRoleMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error)
	UserRoleMultiCreate(ctx context.Context, in *UserRoleMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error)
	UserDeptIndex(ctx context.Context, in *UserDeptIndexReq, opts ...grpc.CallOption) (*UserDeptIndexResp, error)
	UserDeptMultiDelete(ctx context.Context, in *UserDeptMultiSaveReq, opts ...grpc.CallOption) (*Empty, error)
	UserDeptMultiCreate(ctx context.Context, in *UserDeptMultiSaveReq, opts ...grpc.CallOption) (*Empty, error)
	UserAreaApplyCreate(ctx context.Context, in *UserAreaApplyCreateReq, opts ...grpc.CallOption) (*Empty, error)
	UserMessageMultiIsRead(ctx context.Context, in *IDList, opts ...grpc.CallOption) (*Empty, error)
	UserMessageIndex(ctx context.Context, in *UserMessageIndexReq, opts ...grpc.CallOption) (*UserMessageIndexResp, error)
	UserMessageStatistics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserMessageStatisticsResp, error)
	UserProfileRead(ctx context.Context, in *WithCode, opts ...grpc.CallOption) (*UserProfile, error)
	UserProfileUpdate(ctx context.Context, in *UserProfile, opts ...grpc.CallOption) (*Empty, error)
	UserProfileIndex(ctx context.Context, in *UserProfileIndexReq, opts ...grpc.CallOption) (*UserProfileIndexResp, error)
}

type userManageClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManageClient(cc grpc.ClientConnInterface) UserManageClient {
	return &userManageClient{cc}
}

func (c *userManageClient) UserInfoCreate(ctx context.Context, in *UserInfoCreateReq, opts ...grpc.CallOption) (*UserCreateResp, error) {
	out := new(UserCreateResp)
	err := c.cc.Invoke(ctx, UserManage_UserInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserInfoIndex(ctx context.Context, in *UserInfoIndexReq, opts ...grpc.CallOption) (*UserInfoIndexResp, error) {
	out := new(UserInfoIndexResp)
	err := c.cc.Invoke(ctx, UserManage_UserInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserInfoUpdate(ctx context.Context, in *UserInfoUpdateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserManage_UserInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserInfoRead(ctx context.Context, in *UserInfoReadReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, UserManage_UserInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserInfoDelete(ctx context.Context, in *UserInfoDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserManage_UserInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserLogin(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginResp, error) {
	out := new(UserLoginResp)
	err := c.cc.Invoke(ctx, UserManage_UserLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserForgetPwd(ctx context.Context, in *UserForgetPwdReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserManage_UserForgetPwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserCaptcha(ctx context.Context, in *UserCaptchaReq, opts ...grpc.CallOption) (*UserCaptchaResp, error) {
	out := new(UserCaptchaResp)
	err := c.cc.Invoke(ctx, UserManage_UserCaptcha_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserCheckToken(ctx context.Context, in *UserCheckTokenReq, opts ...grpc.CallOption) (*UserCheckTokenResp, error) {
	out := new(UserCheckTokenResp)
	err := c.cc.Invoke(ctx, UserManage_UserCheckToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error) {
	out := new(UserRegisterResp)
	err := c.cc.Invoke(ctx, UserManage_UserRegister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserChangePwd(ctx context.Context, in *UserChangePwdReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserManage_UserChangePwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserCodeToUserID(ctx context.Context, in *UserCodeToUserIDReq, opts ...grpc.CallOption) (*UserCodeToUserIDResp, error) {
	out := new(UserCodeToUserIDResp)
	err := c.cc.Invoke(ctx, UserManage_UserCodeToUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserBindAccount(ctx context.Context, in *UserBindAccountReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserManage_UserBindAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserRoleIndex(ctx context.Context, in *UserRoleIndexReq, opts ...grpc.CallOption) (*UserRoleIndexResp, error) {
	out := new(UserRoleIndexResp)
	err := c.cc.Invoke(ctx, UserManage_UserRoleIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserRoleMultiUpdate(ctx context.Context, in *UserRoleMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserManage_UserRoleMultiUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserRoleMultiCreate(ctx context.Context, in *UserRoleMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserManage_UserRoleMultiCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserDeptIndex(ctx context.Context, in *UserDeptIndexReq, opts ...grpc.CallOption) (*UserDeptIndexResp, error) {
	out := new(UserDeptIndexResp)
	err := c.cc.Invoke(ctx, UserManage_UserDeptIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserDeptMultiDelete(ctx context.Context, in *UserDeptMultiSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserManage_UserDeptMultiDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserDeptMultiCreate(ctx context.Context, in *UserDeptMultiSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserManage_UserDeptMultiCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserAreaApplyCreate(ctx context.Context, in *UserAreaApplyCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserManage_UserAreaApplyCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserMessageMultiIsRead(ctx context.Context, in *IDList, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserManage_UserMessageMultiIsRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserMessageIndex(ctx context.Context, in *UserMessageIndexReq, opts ...grpc.CallOption) (*UserMessageIndexResp, error) {
	out := new(UserMessageIndexResp)
	err := c.cc.Invoke(ctx, UserManage_UserMessageIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserMessageStatistics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserMessageStatisticsResp, error) {
	out := new(UserMessageStatisticsResp)
	err := c.cc.Invoke(ctx, UserManage_UserMessageStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserProfileRead(ctx context.Context, in *WithCode, opts ...grpc.CallOption) (*UserProfile, error) {
	out := new(UserProfile)
	err := c.cc.Invoke(ctx, UserManage_UserProfileRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserProfileUpdate(ctx context.Context, in *UserProfile, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserManage_UserProfileUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManageClient) UserProfileIndex(ctx context.Context, in *UserProfileIndexReq, opts ...grpc.CallOption) (*UserProfileIndexResp, error) {
	out := new(UserProfileIndexResp)
	err := c.cc.Invoke(ctx, UserManage_UserProfileIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManageServer is the server API for UserManage service.
// All implementations must embed UnimplementedUserManageServer
// for forward compatibility
type UserManageServer interface {
	UserInfoCreate(context.Context, *UserInfoCreateReq) (*UserCreateResp, error)
	UserInfoIndex(context.Context, *UserInfoIndexReq) (*UserInfoIndexResp, error)
	UserInfoUpdate(context.Context, *UserInfoUpdateReq) (*Empty, error)
	UserInfoRead(context.Context, *UserInfoReadReq) (*UserInfo, error)
	UserInfoDelete(context.Context, *UserInfoDeleteReq) (*Empty, error)
	UserLogin(context.Context, *UserLoginReq) (*UserLoginResp, error)
	UserForgetPwd(context.Context, *UserForgetPwdReq) (*Empty, error)
	UserCaptcha(context.Context, *UserCaptchaReq) (*UserCaptchaResp, error)
	UserCheckToken(context.Context, *UserCheckTokenReq) (*UserCheckTokenResp, error)
	UserRegister(context.Context, *UserRegisterReq) (*UserRegisterResp, error)
	UserChangePwd(context.Context, *UserChangePwdReq) (*Empty, error)
	UserCodeToUserID(context.Context, *UserCodeToUserIDReq) (*UserCodeToUserIDResp, error)
	UserBindAccount(context.Context, *UserBindAccountReq) (*Empty, error)
	UserRoleIndex(context.Context, *UserRoleIndexReq) (*UserRoleIndexResp, error)
	UserRoleMultiUpdate(context.Context, *UserRoleMultiUpdateReq) (*Empty, error)
	UserRoleMultiCreate(context.Context, *UserRoleMultiUpdateReq) (*Empty, error)
	UserDeptIndex(context.Context, *UserDeptIndexReq) (*UserDeptIndexResp, error)
	UserDeptMultiDelete(context.Context, *UserDeptMultiSaveReq) (*Empty, error)
	UserDeptMultiCreate(context.Context, *UserDeptMultiSaveReq) (*Empty, error)
	UserAreaApplyCreate(context.Context, *UserAreaApplyCreateReq) (*Empty, error)
	UserMessageMultiIsRead(context.Context, *IDList) (*Empty, error)
	UserMessageIndex(context.Context, *UserMessageIndexReq) (*UserMessageIndexResp, error)
	UserMessageStatistics(context.Context, *Empty) (*UserMessageStatisticsResp, error)
	UserProfileRead(context.Context, *WithCode) (*UserProfile, error)
	UserProfileUpdate(context.Context, *UserProfile) (*Empty, error)
	UserProfileIndex(context.Context, *UserProfileIndexReq) (*UserProfileIndexResp, error)
	mustEmbedUnimplementedUserManageServer()
}

// UnimplementedUserManageServer must be embedded to have forward compatible implementations.
type UnimplementedUserManageServer struct {
}

func (UnimplementedUserManageServer) UserInfoCreate(context.Context, *UserInfoCreateReq) (*UserCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfoCreate not implemented")
}
func (UnimplementedUserManageServer) UserInfoIndex(context.Context, *UserInfoIndexReq) (*UserInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfoIndex not implemented")
}
func (UnimplementedUserManageServer) UserInfoUpdate(context.Context, *UserInfoUpdateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfoUpdate not implemented")
}
func (UnimplementedUserManageServer) UserInfoRead(context.Context, *UserInfoReadReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfoRead not implemented")
}
func (UnimplementedUserManageServer) UserInfoDelete(context.Context, *UserInfoDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfoDelete not implemented")
}
func (UnimplementedUserManageServer) UserLogin(context.Context, *UserLoginReq) (*UserLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserManageServer) UserForgetPwd(context.Context, *UserForgetPwdReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserForgetPwd not implemented")
}
func (UnimplementedUserManageServer) UserCaptcha(context.Context, *UserCaptchaReq) (*UserCaptchaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCaptcha not implemented")
}
func (UnimplementedUserManageServer) UserCheckToken(context.Context, *UserCheckTokenReq) (*UserCheckTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCheckToken not implemented")
}
func (UnimplementedUserManageServer) UserRegister(context.Context, *UserRegisterReq) (*UserRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedUserManageServer) UserChangePwd(context.Context, *UserChangePwdReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChangePwd not implemented")
}
func (UnimplementedUserManageServer) UserCodeToUserID(context.Context, *UserCodeToUserIDReq) (*UserCodeToUserIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCodeToUserID not implemented")
}
func (UnimplementedUserManageServer) UserBindAccount(context.Context, *UserBindAccountReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBindAccount not implemented")
}
func (UnimplementedUserManageServer) UserRoleIndex(context.Context, *UserRoleIndexReq) (*UserRoleIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRoleIndex not implemented")
}
func (UnimplementedUserManageServer) UserRoleMultiUpdate(context.Context, *UserRoleMultiUpdateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRoleMultiUpdate not implemented")
}
func (UnimplementedUserManageServer) UserRoleMultiCreate(context.Context, *UserRoleMultiUpdateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRoleMultiCreate not implemented")
}
func (UnimplementedUserManageServer) UserDeptIndex(context.Context, *UserDeptIndexReq) (*UserDeptIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeptIndex not implemented")
}
func (UnimplementedUserManageServer) UserDeptMultiDelete(context.Context, *UserDeptMultiSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeptMultiDelete not implemented")
}
func (UnimplementedUserManageServer) UserDeptMultiCreate(context.Context, *UserDeptMultiSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeptMultiCreate not implemented")
}
func (UnimplementedUserManageServer) UserAreaApplyCreate(context.Context, *UserAreaApplyCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAreaApplyCreate not implemented")
}
func (UnimplementedUserManageServer) UserMessageMultiIsRead(context.Context, *IDList) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMessageMultiIsRead not implemented")
}
func (UnimplementedUserManageServer) UserMessageIndex(context.Context, *UserMessageIndexReq) (*UserMessageIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMessageIndex not implemented")
}
func (UnimplementedUserManageServer) UserMessageStatistics(context.Context, *Empty) (*UserMessageStatisticsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMessageStatistics not implemented")
}
func (UnimplementedUserManageServer) UserProfileRead(context.Context, *WithCode) (*UserProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserProfileRead not implemented")
}
func (UnimplementedUserManageServer) UserProfileUpdate(context.Context, *UserProfile) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserProfileUpdate not implemented")
}
func (UnimplementedUserManageServer) UserProfileIndex(context.Context, *UserProfileIndexReq) (*UserProfileIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserProfileIndex not implemented")
}
func (UnimplementedUserManageServer) mustEmbedUnimplementedUserManageServer() {}

// UnsafeUserManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManageServer will
// result in compilation errors.
type UnsafeUserManageServer interface {
	mustEmbedUnimplementedUserManageServer()
}

func RegisterUserManageServer(s grpc.ServiceRegistrar, srv UserManageServer) {
	s.RegisterService(&UserManage_ServiceDesc, srv)
}

func _UserManage_UserInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserInfoCreate(ctx, req.(*UserInfoCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserInfoIndex(ctx, req.(*UserInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserInfoUpdate(ctx, req.(*UserInfoUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserInfoRead(ctx, req.(*UserInfoReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserInfoDelete(ctx, req.(*UserInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserLogin(ctx, req.(*UserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserForgetPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserForgetPwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserForgetPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserForgetPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserForgetPwd(ctx, req.(*UserForgetPwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserCaptcha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserCaptcha(ctx, req.(*UserCaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserCheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCheckTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserCheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserCheckToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserCheckToken(ctx, req.(*UserCheckTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserRegister(ctx, req.(*UserRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserChangePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChangePwdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserChangePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserChangePwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserChangePwd(ctx, req.(*UserChangePwdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserCodeToUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCodeToUserIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserCodeToUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserCodeToUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserCodeToUserID(ctx, req.(*UserCodeToUserIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserBindAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBindAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserBindAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserBindAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserBindAccount(ctx, req.(*UserBindAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserRoleIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserRoleIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserRoleIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserRoleIndex(ctx, req.(*UserRoleIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserRoleMultiUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleMultiUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserRoleMultiUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserRoleMultiUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserRoleMultiUpdate(ctx, req.(*UserRoleMultiUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserRoleMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRoleMultiUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserRoleMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserRoleMultiCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserRoleMultiCreate(ctx, req.(*UserRoleMultiUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserDeptIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeptIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserDeptIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserDeptIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserDeptIndex(ctx, req.(*UserDeptIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserDeptMultiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeptMultiSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserDeptMultiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserDeptMultiDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserDeptMultiDelete(ctx, req.(*UserDeptMultiSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserDeptMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeptMultiSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserDeptMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserDeptMultiCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserDeptMultiCreate(ctx, req.(*UserDeptMultiSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserAreaApplyCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAreaApplyCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserAreaApplyCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserAreaApplyCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserAreaApplyCreate(ctx, req.(*UserAreaApplyCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserMessageMultiIsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserMessageMultiIsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserMessageMultiIsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserMessageMultiIsRead(ctx, req.(*IDList))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserMessageIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMessageIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserMessageIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserMessageIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserMessageIndex(ctx, req.(*UserMessageIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserMessageStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserMessageStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserMessageStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserMessageStatistics(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserProfileRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserProfileRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserProfileRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserProfileRead(ctx, req.(*WithCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserProfileUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserProfileUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserProfileUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserProfileUpdate(ctx, req.(*UserProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManage_UserProfileIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProfileIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManageServer).UserProfileIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManage_UserProfileIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManageServer).UserProfileIndex(ctx, req.(*UserProfileIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManage_ServiceDesc is the grpc.ServiceDesc for UserManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.UserManage",
	HandlerType: (*UserManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "userInfoCreate",
			Handler:    _UserManage_UserInfoCreate_Handler,
		},
		{
			MethodName: "userInfoIndex",
			Handler:    _UserManage_UserInfoIndex_Handler,
		},
		{
			MethodName: "userInfoUpdate",
			Handler:    _UserManage_UserInfoUpdate_Handler,
		},
		{
			MethodName: "userInfoRead",
			Handler:    _UserManage_UserInfoRead_Handler,
		},
		{
			MethodName: "userInfoDelete",
			Handler:    _UserManage_UserInfoDelete_Handler,
		},
		{
			MethodName: "userLogin",
			Handler:    _UserManage_UserLogin_Handler,
		},
		{
			MethodName: "userForgetPwd",
			Handler:    _UserManage_UserForgetPwd_Handler,
		},
		{
			MethodName: "userCaptcha",
			Handler:    _UserManage_UserCaptcha_Handler,
		},
		{
			MethodName: "userCheckToken",
			Handler:    _UserManage_UserCheckToken_Handler,
		},
		{
			MethodName: "userRegister",
			Handler:    _UserManage_UserRegister_Handler,
		},
		{
			MethodName: "userChangePwd",
			Handler:    _UserManage_UserChangePwd_Handler,
		},
		{
			MethodName: "userCodeToUserID",
			Handler:    _UserManage_UserCodeToUserID_Handler,
		},
		{
			MethodName: "userBindAccount",
			Handler:    _UserManage_UserBindAccount_Handler,
		},
		{
			MethodName: "userRoleIndex",
			Handler:    _UserManage_UserRoleIndex_Handler,
		},
		{
			MethodName: "userRoleMultiUpdate",
			Handler:    _UserManage_UserRoleMultiUpdate_Handler,
		},
		{
			MethodName: "userRoleMultiCreate",
			Handler:    _UserManage_UserRoleMultiCreate_Handler,
		},
		{
			MethodName: "userDeptIndex",
			Handler:    _UserManage_UserDeptIndex_Handler,
		},
		{
			MethodName: "userDeptMultiDelete",
			Handler:    _UserManage_UserDeptMultiDelete_Handler,
		},
		{
			MethodName: "userDeptMultiCreate",
			Handler:    _UserManage_UserDeptMultiCreate_Handler,
		},
		{
			MethodName: "userAreaApplyCreate",
			Handler:    _UserManage_UserAreaApplyCreate_Handler,
		},
		{
			MethodName: "userMessageMultiIsRead",
			Handler:    _UserManage_UserMessageMultiIsRead_Handler,
		},
		{
			MethodName: "userMessageIndex",
			Handler:    _UserManage_UserMessageIndex_Handler,
		},
		{
			MethodName: "userMessageStatistics",
			Handler:    _UserManage_UserMessageStatistics_Handler,
		},
		{
			MethodName: "userProfileRead",
			Handler:    _UserManage_UserProfileRead_Handler,
		},
		{
			MethodName: "userProfileUpdate",
			Handler:    _UserManage_UserProfileUpdate_Handler,
		},
		{
			MethodName: "userProfileIndex",
			Handler:    _UserManage_UserProfileIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sys.proto",
}

const (
	DataManage_DataProjectCreate_FullMethodName      = "/sys.DataManage/dataProjectCreate"
	DataManage_DataProjectMultiCreate_FullMethodName = "/sys.DataManage/dataProjectMultiCreate"
	DataManage_DataProjectDelete_FullMethodName      = "/sys.DataManage/dataProjectDelete"
	DataManage_DataProjectMultiDelete_FullMethodName = "/sys.DataManage/dataProjectMultiDelete"
	DataManage_DataProjectIndex_FullMethodName       = "/sys.DataManage/dataProjectIndex"
	DataManage_DataAreaMultiUpdate_FullMethodName    = "/sys.DataManage/dataAreaMultiUpdate"
	DataManage_DataAreaIndex_FullMethodName          = "/sys.DataManage/dataAreaIndex"
	DataManage_DataAreaMultiDelete_FullMethodName    = "/sys.DataManage/dataAreaMultiDelete"
	DataManage_UserAreaApplyIndex_FullMethodName     = "/sys.DataManage/userAreaApplyIndex"
	DataManage_UserAreaApplyDeal_FullMethodName      = "/sys.DataManage/userAreaApplyDeal"
	DataManage_DataOpenAccessIndex_FullMethodName    = "/sys.DataManage/dataOpenAccessIndex"
	DataManage_DataOpenAccessRead_FullMethodName     = "/sys.DataManage/dataOpenAccessRead"
	DataManage_DataOpenAccessUpdate_FullMethodName   = "/sys.DataManage/dataOpenAccessUpdate"
	DataManage_DataOpenAccessCreate_FullMethodName   = "/sys.DataManage/dataOpenAccessCreate"
	DataManage_DataOpenAccessDelete_FullMethodName   = "/sys.DataManage/dataOpenAccessDelete"
)

// DataManageClient is the client API for DataManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataManageClient interface {
	DataProjectCreate(ctx context.Context, in *DataProjectSaveReq, opts ...grpc.CallOption) (*Empty, error)
	DataProjectMultiCreate(ctx context.Context, in *DataProjectMultiSaveReq, opts ...grpc.CallOption) (*Empty, error)
	DataProjectDelete(ctx context.Context, in *DataProjectDeleteReq, opts ...grpc.CallOption) (*Empty, error)
	DataProjectMultiDelete(ctx context.Context, in *DataProjectMultiDeleteReq, opts ...grpc.CallOption) (*Empty, error)
	DataProjectIndex(ctx context.Context, in *DataProjectIndexReq, opts ...grpc.CallOption) (*DataProjectIndexResp, error)
	DataAreaMultiUpdate(ctx context.Context, in *DataAreaMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error)
	DataAreaIndex(ctx context.Context, in *DataAreaIndexReq, opts ...grpc.CallOption) (*DataAreaIndexResp, error)
	DataAreaMultiDelete(ctx context.Context, in *DataAreaMultiDeleteReq, opts ...grpc.CallOption) (*Empty, error)
	UserAreaApplyIndex(ctx context.Context, in *UserAreaApplyIndexReq, opts ...grpc.CallOption) (*UserAreaApplyIndexResp, error)
	UserAreaApplyDeal(ctx context.Context, in *UserAreaApplyDealReq, opts ...grpc.CallOption) (*Empty, error)
	DataOpenAccessIndex(ctx context.Context, in *OpenAccessIndexReq, opts ...grpc.CallOption) (*OpenAccessIndexResp, error)
	DataOpenAccessRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*OpenAccess, error)
	DataOpenAccessUpdate(ctx context.Context, in *OpenAccess, opts ...grpc.CallOption) (*Empty, error)
	DataOpenAccessCreate(ctx context.Context, in *OpenAccess, opts ...grpc.CallOption) (*WithID, error)
	DataOpenAccessDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
}

type dataManageClient struct {
	cc grpc.ClientConnInterface
}

func NewDataManageClient(cc grpc.ClientConnInterface) DataManageClient {
	return &dataManageClient{cc}
}

func (c *dataManageClient) DataProjectCreate(ctx context.Context, in *DataProjectSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DataManage_DataProjectCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManageClient) DataProjectMultiCreate(ctx context.Context, in *DataProjectMultiSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DataManage_DataProjectMultiCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManageClient) DataProjectDelete(ctx context.Context, in *DataProjectDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DataManage_DataProjectDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManageClient) DataProjectMultiDelete(ctx context.Context, in *DataProjectMultiDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DataManage_DataProjectMultiDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManageClient) DataProjectIndex(ctx context.Context, in *DataProjectIndexReq, opts ...grpc.CallOption) (*DataProjectIndexResp, error) {
	out := new(DataProjectIndexResp)
	err := c.cc.Invoke(ctx, DataManage_DataProjectIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManageClient) DataAreaMultiUpdate(ctx context.Context, in *DataAreaMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DataManage_DataAreaMultiUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManageClient) DataAreaIndex(ctx context.Context, in *DataAreaIndexReq, opts ...grpc.CallOption) (*DataAreaIndexResp, error) {
	out := new(DataAreaIndexResp)
	err := c.cc.Invoke(ctx, DataManage_DataAreaIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManageClient) DataAreaMultiDelete(ctx context.Context, in *DataAreaMultiDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DataManage_DataAreaMultiDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManageClient) UserAreaApplyIndex(ctx context.Context, in *UserAreaApplyIndexReq, opts ...grpc.CallOption) (*UserAreaApplyIndexResp, error) {
	out := new(UserAreaApplyIndexResp)
	err := c.cc.Invoke(ctx, DataManage_UserAreaApplyIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManageClient) UserAreaApplyDeal(ctx context.Context, in *UserAreaApplyDealReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DataManage_UserAreaApplyDeal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManageClient) DataOpenAccessIndex(ctx context.Context, in *OpenAccessIndexReq, opts ...grpc.CallOption) (*OpenAccessIndexResp, error) {
	out := new(OpenAccessIndexResp)
	err := c.cc.Invoke(ctx, DataManage_DataOpenAccessIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManageClient) DataOpenAccessRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*OpenAccess, error) {
	out := new(OpenAccess)
	err := c.cc.Invoke(ctx, DataManage_DataOpenAccessRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManageClient) DataOpenAccessUpdate(ctx context.Context, in *OpenAccess, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DataManage_DataOpenAccessUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManageClient) DataOpenAccessCreate(ctx context.Context, in *OpenAccess, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, DataManage_DataOpenAccessCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataManageClient) DataOpenAccessDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DataManage_DataOpenAccessDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataManageServer is the server API for DataManage service.
// All implementations must embed UnimplementedDataManageServer
// for forward compatibility
type DataManageServer interface {
	DataProjectCreate(context.Context, *DataProjectSaveReq) (*Empty, error)
	DataProjectMultiCreate(context.Context, *DataProjectMultiSaveReq) (*Empty, error)
	DataProjectDelete(context.Context, *DataProjectDeleteReq) (*Empty, error)
	DataProjectMultiDelete(context.Context, *DataProjectMultiDeleteReq) (*Empty, error)
	DataProjectIndex(context.Context, *DataProjectIndexReq) (*DataProjectIndexResp, error)
	DataAreaMultiUpdate(context.Context, *DataAreaMultiUpdateReq) (*Empty, error)
	DataAreaIndex(context.Context, *DataAreaIndexReq) (*DataAreaIndexResp, error)
	DataAreaMultiDelete(context.Context, *DataAreaMultiDeleteReq) (*Empty, error)
	UserAreaApplyIndex(context.Context, *UserAreaApplyIndexReq) (*UserAreaApplyIndexResp, error)
	UserAreaApplyDeal(context.Context, *UserAreaApplyDealReq) (*Empty, error)
	DataOpenAccessIndex(context.Context, *OpenAccessIndexReq) (*OpenAccessIndexResp, error)
	DataOpenAccessRead(context.Context, *WithID) (*OpenAccess, error)
	DataOpenAccessUpdate(context.Context, *OpenAccess) (*Empty, error)
	DataOpenAccessCreate(context.Context, *OpenAccess) (*WithID, error)
	DataOpenAccessDelete(context.Context, *WithID) (*Empty, error)
	mustEmbedUnimplementedDataManageServer()
}

// UnimplementedDataManageServer must be embedded to have forward compatible implementations.
type UnimplementedDataManageServer struct {
}

func (UnimplementedDataManageServer) DataProjectCreate(context.Context, *DataProjectSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataProjectCreate not implemented")
}
func (UnimplementedDataManageServer) DataProjectMultiCreate(context.Context, *DataProjectMultiSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataProjectMultiCreate not implemented")
}
func (UnimplementedDataManageServer) DataProjectDelete(context.Context, *DataProjectDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataProjectDelete not implemented")
}
func (UnimplementedDataManageServer) DataProjectMultiDelete(context.Context, *DataProjectMultiDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataProjectMultiDelete not implemented")
}
func (UnimplementedDataManageServer) DataProjectIndex(context.Context, *DataProjectIndexReq) (*DataProjectIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataProjectIndex not implemented")
}
func (UnimplementedDataManageServer) DataAreaMultiUpdate(context.Context, *DataAreaMultiUpdateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataAreaMultiUpdate not implemented")
}
func (UnimplementedDataManageServer) DataAreaIndex(context.Context, *DataAreaIndexReq) (*DataAreaIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataAreaIndex not implemented")
}
func (UnimplementedDataManageServer) DataAreaMultiDelete(context.Context, *DataAreaMultiDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataAreaMultiDelete not implemented")
}
func (UnimplementedDataManageServer) UserAreaApplyIndex(context.Context, *UserAreaApplyIndexReq) (*UserAreaApplyIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAreaApplyIndex not implemented")
}
func (UnimplementedDataManageServer) UserAreaApplyDeal(context.Context, *UserAreaApplyDealReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAreaApplyDeal not implemented")
}
func (UnimplementedDataManageServer) DataOpenAccessIndex(context.Context, *OpenAccessIndexReq) (*OpenAccessIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataOpenAccessIndex not implemented")
}
func (UnimplementedDataManageServer) DataOpenAccessRead(context.Context, *WithID) (*OpenAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataOpenAccessRead not implemented")
}
func (UnimplementedDataManageServer) DataOpenAccessUpdate(context.Context, *OpenAccess) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataOpenAccessUpdate not implemented")
}
func (UnimplementedDataManageServer) DataOpenAccessCreate(context.Context, *OpenAccess) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataOpenAccessCreate not implemented")
}
func (UnimplementedDataManageServer) DataOpenAccessDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataOpenAccessDelete not implemented")
}
func (UnimplementedDataManageServer) mustEmbedUnimplementedDataManageServer() {}

// UnsafeDataManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataManageServer will
// result in compilation errors.
type UnsafeDataManageServer interface {
	mustEmbedUnimplementedDataManageServer()
}

func RegisterDataManageServer(s grpc.ServiceRegistrar, srv DataManageServer) {
	s.RegisterService(&DataManage_ServiceDesc, srv)
}

func _DataManage_DataProjectCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataProjectSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManageServer).DataProjectCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManage_DataProjectCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManageServer).DataProjectCreate(ctx, req.(*DataProjectSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManage_DataProjectMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataProjectMultiSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManageServer).DataProjectMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManage_DataProjectMultiCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManageServer).DataProjectMultiCreate(ctx, req.(*DataProjectMultiSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManage_DataProjectDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataProjectDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManageServer).DataProjectDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManage_DataProjectDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManageServer).DataProjectDelete(ctx, req.(*DataProjectDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManage_DataProjectMultiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataProjectMultiDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManageServer).DataProjectMultiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManage_DataProjectMultiDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManageServer).DataProjectMultiDelete(ctx, req.(*DataProjectMultiDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManage_DataProjectIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataProjectIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManageServer).DataProjectIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManage_DataProjectIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManageServer).DataProjectIndex(ctx, req.(*DataProjectIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManage_DataAreaMultiUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataAreaMultiUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManageServer).DataAreaMultiUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManage_DataAreaMultiUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManageServer).DataAreaMultiUpdate(ctx, req.(*DataAreaMultiUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManage_DataAreaIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataAreaIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManageServer).DataAreaIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManage_DataAreaIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManageServer).DataAreaIndex(ctx, req.(*DataAreaIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManage_DataAreaMultiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataAreaMultiDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManageServer).DataAreaMultiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManage_DataAreaMultiDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManageServer).DataAreaMultiDelete(ctx, req.(*DataAreaMultiDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManage_UserAreaApplyIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAreaApplyIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManageServer).UserAreaApplyIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManage_UserAreaApplyIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManageServer).UserAreaApplyIndex(ctx, req.(*UserAreaApplyIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManage_UserAreaApplyDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAreaApplyDealReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManageServer).UserAreaApplyDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManage_UserAreaApplyDeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManageServer).UserAreaApplyDeal(ctx, req.(*UserAreaApplyDealReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManage_DataOpenAccessIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenAccessIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManageServer).DataOpenAccessIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManage_DataOpenAccessIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManageServer).DataOpenAccessIndex(ctx, req.(*OpenAccessIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManage_DataOpenAccessRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManageServer).DataOpenAccessRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManage_DataOpenAccessRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManageServer).DataOpenAccessRead(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManage_DataOpenAccessUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenAccess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManageServer).DataOpenAccessUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManage_DataOpenAccessUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManageServer).DataOpenAccessUpdate(ctx, req.(*OpenAccess))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManage_DataOpenAccessCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenAccess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManageServer).DataOpenAccessCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManage_DataOpenAccessCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManageServer).DataOpenAccessCreate(ctx, req.(*OpenAccess))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataManage_DataOpenAccessDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataManageServer).DataOpenAccessDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataManage_DataOpenAccessDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataManageServer).DataOpenAccessDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

// DataManage_ServiceDesc is the grpc.ServiceDesc for DataManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.DataManage",
	HandlerType: (*DataManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "dataProjectCreate",
			Handler:    _DataManage_DataProjectCreate_Handler,
		},
		{
			MethodName: "dataProjectMultiCreate",
			Handler:    _DataManage_DataProjectMultiCreate_Handler,
		},
		{
			MethodName: "dataProjectDelete",
			Handler:    _DataManage_DataProjectDelete_Handler,
		},
		{
			MethodName: "dataProjectMultiDelete",
			Handler:    _DataManage_DataProjectMultiDelete_Handler,
		},
		{
			MethodName: "dataProjectIndex",
			Handler:    _DataManage_DataProjectIndex_Handler,
		},
		{
			MethodName: "dataAreaMultiUpdate",
			Handler:    _DataManage_DataAreaMultiUpdate_Handler,
		},
		{
			MethodName: "dataAreaIndex",
			Handler:    _DataManage_DataAreaIndex_Handler,
		},
		{
			MethodName: "dataAreaMultiDelete",
			Handler:    _DataManage_DataAreaMultiDelete_Handler,
		},
		{
			MethodName: "userAreaApplyIndex",
			Handler:    _DataManage_UserAreaApplyIndex_Handler,
		},
		{
			MethodName: "userAreaApplyDeal",
			Handler:    _DataManage_UserAreaApplyDeal_Handler,
		},
		{
			MethodName: "dataOpenAccessIndex",
			Handler:    _DataManage_DataOpenAccessIndex_Handler,
		},
		{
			MethodName: "dataOpenAccessRead",
			Handler:    _DataManage_DataOpenAccessRead_Handler,
		},
		{
			MethodName: "dataOpenAccessUpdate",
			Handler:    _DataManage_DataOpenAccessUpdate_Handler,
		},
		{
			MethodName: "dataOpenAccessCreate",
			Handler:    _DataManage_DataOpenAccessCreate_Handler,
		},
		{
			MethodName: "dataOpenAccessDelete",
			Handler:    _DataManage_DataOpenAccessDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sys.proto",
}

const (
	NotifyManage_MessageInfoSend_FullMethodName            = "/sys.NotifyManage/messageInfoSend"
	NotifyManage_MessageInfoIndex_FullMethodName           = "/sys.NotifyManage/messageInfoIndex"
	NotifyManage_MessageInfoUpdate_FullMethodName          = "/sys.NotifyManage/messageInfoUpdate"
	NotifyManage_MessageInfoDelete_FullMethodName          = "/sys.NotifyManage/messageInfoDelete"
	NotifyManage_NotifyConfigRead_FullMethodName           = "/sys.NotifyManage/notifyConfigRead"
	NotifyManage_NotifyConfigCreate_FullMethodName         = "/sys.NotifyManage/notifyConfigCreate"
	NotifyManage_NotifyConfigUpdate_FullMethodName         = "/sys.NotifyManage/notifyConfigUpdate"
	NotifyManage_NotifyConfigIndex_FullMethodName          = "/sys.NotifyManage/notifyConfigIndex"
	NotifyManage_NotifyConfigDelete_FullMethodName         = "/sys.NotifyManage/notifyConfigDelete"
	NotifyManage_NotifyConfigSend_FullMethodName           = "/sys.NotifyManage/notifyConfigSend"
	NotifyManage_NotifyTemplateRead_FullMethodName         = "/sys.NotifyManage/notifyTemplateRead"
	NotifyManage_NotifyTemplateCreate_FullMethodName       = "/sys.NotifyManage/notifyTemplateCreate"
	NotifyManage_NotifyTemplateUpdate_FullMethodName       = "/sys.NotifyManage/notifyTemplateUpdate"
	NotifyManage_NotifyTemplateIndex_FullMethodName        = "/sys.NotifyManage/notifyTemplateIndex"
	NotifyManage_NotifyTemplateDelete_FullMethodName       = "/sys.NotifyManage/notifyTemplateDelete"
	NotifyManage_NotifyConfigTemplateUpdate_FullMethodName = "/sys.NotifyManage/notifyConfigTemplateUpdate"
	NotifyManage_NotifyConfigTemplateDelete_FullMethodName = "/sys.NotifyManage/notifyConfigTemplateDelete"
	NotifyManage_NotifyConfigTemplateIndex_FullMethodName  = "/sys.NotifyManage/notifyConfigTemplateIndex"
	NotifyManage_NotifyChannelRead_FullMethodName          = "/sys.NotifyManage/notifyChannelRead"
	NotifyManage_NotifyChannelCreate_FullMethodName        = "/sys.NotifyManage/notifyChannelCreate"
	NotifyManage_NotifyChannelUpdate_FullMethodName        = "/sys.NotifyManage/notifyChannelUpdate"
	NotifyManage_NotifyChannelIndex_FullMethodName         = "/sys.NotifyManage/notifyChannelIndex"
	NotifyManage_NotifyChannelDelete_FullMethodName        = "/sys.NotifyManage/notifyChannelDelete"
)

// NotifyManageClient is the client API for NotifyManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifyManageClient interface {
	// 站内信
	MessageInfoSend(ctx context.Context, in *MessageInfoSendReq, opts ...grpc.CallOption) (*WithID, error)
	MessageInfoIndex(ctx context.Context, in *MessageInfoIndexReq, opts ...grpc.CallOption) (*MessageInfoIndexResp, error)
	MessageInfoUpdate(ctx context.Context, in *MessageInfo, opts ...grpc.CallOption) (*Empty, error)
	MessageInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	// 通知配置信息
	NotifyConfigRead(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*NotifyConfig, error)
	NotifyConfigCreate(ctx context.Context, in *NotifyConfig, opts ...grpc.CallOption) (*WithID, error)
	NotifyConfigUpdate(ctx context.Context, in *NotifyConfig, opts ...grpc.CallOption) (*Empty, error)
	NotifyConfigIndex(ctx context.Context, in *NotifyConfigIndexReq, opts ...grpc.CallOption) (*NotifyConfigIndexResp, error)
	NotifyConfigDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	NotifyConfigSend(ctx context.Context, in *NotifyConfigSendReq, opts ...grpc.CallOption) (*Empty, error)
	// 通知模版
	NotifyTemplateRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*NotifyTemplate, error)
	NotifyTemplateCreate(ctx context.Context, in *NotifyTemplate, opts ...grpc.CallOption) (*WithID, error)
	NotifyTemplateUpdate(ctx context.Context, in *NotifyTemplate, opts ...grpc.CallOption) (*Empty, error)
	NotifyTemplateIndex(ctx context.Context, in *NotifyTemplateIndexReq, opts ...grpc.CallOption) (*NotifyTemplateIndexResp, error)
	NotifyTemplateDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	// 租户通知配置
	NotifyConfigTemplateUpdate(ctx context.Context, in *NotifyConfigTemplate, opts ...grpc.CallOption) (*Empty, error)
	NotifyConfigTemplateDelete(ctx context.Context, in *NotifyConfigTemplateDeleteReq, opts ...grpc.CallOption) (*Empty, error)
	NotifyConfigTemplateIndex(ctx context.Context, in *NotifyConfigTemplateIndexReq, opts ...grpc.CallOption) (*NotifyConfigTemplateIndexResp, error)
	NotifyChannelRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*NotifyChannel, error)
	NotifyChannelCreate(ctx context.Context, in *NotifyChannel, opts ...grpc.CallOption) (*WithID, error)
	NotifyChannelUpdate(ctx context.Context, in *NotifyChannel, opts ...grpc.CallOption) (*Empty, error)
	NotifyChannelIndex(ctx context.Context, in *NotifyChannelIndexReq, opts ...grpc.CallOption) (*NotifyChannelIndexResp, error)
	NotifyChannelDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
}

type notifyManageClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifyManageClient(cc grpc.ClientConnInterface) NotifyManageClient {
	return &notifyManageClient{cc}
}

func (c *notifyManageClient) MessageInfoSend(ctx context.Context, in *MessageInfoSendReq, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, NotifyManage_MessageInfoSend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) MessageInfoIndex(ctx context.Context, in *MessageInfoIndexReq, opts ...grpc.CallOption) (*MessageInfoIndexResp, error) {
	out := new(MessageInfoIndexResp)
	err := c.cc.Invoke(ctx, NotifyManage_MessageInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) MessageInfoUpdate(ctx context.Context, in *MessageInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotifyManage_MessageInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) MessageInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotifyManage_MessageInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyConfigRead(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*NotifyConfig, error) {
	out := new(NotifyConfig)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyConfigRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyConfigCreate(ctx context.Context, in *NotifyConfig, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyConfigCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyConfigUpdate(ctx context.Context, in *NotifyConfig, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyConfigUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyConfigIndex(ctx context.Context, in *NotifyConfigIndexReq, opts ...grpc.CallOption) (*NotifyConfigIndexResp, error) {
	out := new(NotifyConfigIndexResp)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyConfigIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyConfigDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyConfigDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyConfigSend(ctx context.Context, in *NotifyConfigSendReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyConfigSend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyTemplateRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*NotifyTemplate, error) {
	out := new(NotifyTemplate)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyTemplateRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyTemplateCreate(ctx context.Context, in *NotifyTemplate, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyTemplateCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyTemplateUpdate(ctx context.Context, in *NotifyTemplate, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyTemplateUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyTemplateIndex(ctx context.Context, in *NotifyTemplateIndexReq, opts ...grpc.CallOption) (*NotifyTemplateIndexResp, error) {
	out := new(NotifyTemplateIndexResp)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyTemplateIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyTemplateDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyTemplateDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyConfigTemplateUpdate(ctx context.Context, in *NotifyConfigTemplate, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyConfigTemplateUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyConfigTemplateDelete(ctx context.Context, in *NotifyConfigTemplateDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyConfigTemplateDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyConfigTemplateIndex(ctx context.Context, in *NotifyConfigTemplateIndexReq, opts ...grpc.CallOption) (*NotifyConfigTemplateIndexResp, error) {
	out := new(NotifyConfigTemplateIndexResp)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyConfigTemplateIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyChannelRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*NotifyChannel, error) {
	out := new(NotifyChannel)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyChannelRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyChannelCreate(ctx context.Context, in *NotifyChannel, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyChannelCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyChannelUpdate(ctx context.Context, in *NotifyChannel, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyChannelUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyChannelIndex(ctx context.Context, in *NotifyChannelIndexReq, opts ...grpc.CallOption) (*NotifyChannelIndexResp, error) {
	out := new(NotifyChannelIndexResp)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyChannelIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyManageClient) NotifyChannelDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, NotifyManage_NotifyChannelDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifyManageServer is the server API for NotifyManage service.
// All implementations must embed UnimplementedNotifyManageServer
// for forward compatibility
type NotifyManageServer interface {
	// 站内信
	MessageInfoSend(context.Context, *MessageInfoSendReq) (*WithID, error)
	MessageInfoIndex(context.Context, *MessageInfoIndexReq) (*MessageInfoIndexResp, error)
	MessageInfoUpdate(context.Context, *MessageInfo) (*Empty, error)
	MessageInfoDelete(context.Context, *WithID) (*Empty, error)
	// 通知配置信息
	NotifyConfigRead(context.Context, *WithIDCode) (*NotifyConfig, error)
	NotifyConfigCreate(context.Context, *NotifyConfig) (*WithID, error)
	NotifyConfigUpdate(context.Context, *NotifyConfig) (*Empty, error)
	NotifyConfigIndex(context.Context, *NotifyConfigIndexReq) (*NotifyConfigIndexResp, error)
	NotifyConfigDelete(context.Context, *WithID) (*Empty, error)
	NotifyConfigSend(context.Context, *NotifyConfigSendReq) (*Empty, error)
	// 通知模版
	NotifyTemplateRead(context.Context, *WithID) (*NotifyTemplate, error)
	NotifyTemplateCreate(context.Context, *NotifyTemplate) (*WithID, error)
	NotifyTemplateUpdate(context.Context, *NotifyTemplate) (*Empty, error)
	NotifyTemplateIndex(context.Context, *NotifyTemplateIndexReq) (*NotifyTemplateIndexResp, error)
	NotifyTemplateDelete(context.Context, *WithID) (*Empty, error)
	// 租户通知配置
	NotifyConfigTemplateUpdate(context.Context, *NotifyConfigTemplate) (*Empty, error)
	NotifyConfigTemplateDelete(context.Context, *NotifyConfigTemplateDeleteReq) (*Empty, error)
	NotifyConfigTemplateIndex(context.Context, *NotifyConfigTemplateIndexReq) (*NotifyConfigTemplateIndexResp, error)
	NotifyChannelRead(context.Context, *WithID) (*NotifyChannel, error)
	NotifyChannelCreate(context.Context, *NotifyChannel) (*WithID, error)
	NotifyChannelUpdate(context.Context, *NotifyChannel) (*Empty, error)
	NotifyChannelIndex(context.Context, *NotifyChannelIndexReq) (*NotifyChannelIndexResp, error)
	NotifyChannelDelete(context.Context, *WithID) (*Empty, error)
	mustEmbedUnimplementedNotifyManageServer()
}

// UnimplementedNotifyManageServer must be embedded to have forward compatible implementations.
type UnimplementedNotifyManageServer struct {
}

func (UnimplementedNotifyManageServer) MessageInfoSend(context.Context, *MessageInfoSendReq) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageInfoSend not implemented")
}
func (UnimplementedNotifyManageServer) MessageInfoIndex(context.Context, *MessageInfoIndexReq) (*MessageInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageInfoIndex not implemented")
}
func (UnimplementedNotifyManageServer) MessageInfoUpdate(context.Context, *MessageInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageInfoUpdate not implemented")
}
func (UnimplementedNotifyManageServer) MessageInfoDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageInfoDelete not implemented")
}
func (UnimplementedNotifyManageServer) NotifyConfigRead(context.Context, *WithIDCode) (*NotifyConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyConfigRead not implemented")
}
func (UnimplementedNotifyManageServer) NotifyConfigCreate(context.Context, *NotifyConfig) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyConfigCreate not implemented")
}
func (UnimplementedNotifyManageServer) NotifyConfigUpdate(context.Context, *NotifyConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyConfigUpdate not implemented")
}
func (UnimplementedNotifyManageServer) NotifyConfigIndex(context.Context, *NotifyConfigIndexReq) (*NotifyConfigIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyConfigIndex not implemented")
}
func (UnimplementedNotifyManageServer) NotifyConfigDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyConfigDelete not implemented")
}
func (UnimplementedNotifyManageServer) NotifyConfigSend(context.Context, *NotifyConfigSendReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyConfigSend not implemented")
}
func (UnimplementedNotifyManageServer) NotifyTemplateRead(context.Context, *WithID) (*NotifyTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTemplateRead not implemented")
}
func (UnimplementedNotifyManageServer) NotifyTemplateCreate(context.Context, *NotifyTemplate) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTemplateCreate not implemented")
}
func (UnimplementedNotifyManageServer) NotifyTemplateUpdate(context.Context, *NotifyTemplate) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTemplateUpdate not implemented")
}
func (UnimplementedNotifyManageServer) NotifyTemplateIndex(context.Context, *NotifyTemplateIndexReq) (*NotifyTemplateIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTemplateIndex not implemented")
}
func (UnimplementedNotifyManageServer) NotifyTemplateDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyTemplateDelete not implemented")
}
func (UnimplementedNotifyManageServer) NotifyConfigTemplateUpdate(context.Context, *NotifyConfigTemplate) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyConfigTemplateUpdate not implemented")
}
func (UnimplementedNotifyManageServer) NotifyConfigTemplateDelete(context.Context, *NotifyConfigTemplateDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyConfigTemplateDelete not implemented")
}
func (UnimplementedNotifyManageServer) NotifyConfigTemplateIndex(context.Context, *NotifyConfigTemplateIndexReq) (*NotifyConfigTemplateIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyConfigTemplateIndex not implemented")
}
func (UnimplementedNotifyManageServer) NotifyChannelRead(context.Context, *WithID) (*NotifyChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyChannelRead not implemented")
}
func (UnimplementedNotifyManageServer) NotifyChannelCreate(context.Context, *NotifyChannel) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyChannelCreate not implemented")
}
func (UnimplementedNotifyManageServer) NotifyChannelUpdate(context.Context, *NotifyChannel) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyChannelUpdate not implemented")
}
func (UnimplementedNotifyManageServer) NotifyChannelIndex(context.Context, *NotifyChannelIndexReq) (*NotifyChannelIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyChannelIndex not implemented")
}
func (UnimplementedNotifyManageServer) NotifyChannelDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyChannelDelete not implemented")
}
func (UnimplementedNotifyManageServer) mustEmbedUnimplementedNotifyManageServer() {}

// UnsafeNotifyManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifyManageServer will
// result in compilation errors.
type UnsafeNotifyManageServer interface {
	mustEmbedUnimplementedNotifyManageServer()
}

func RegisterNotifyManageServer(s grpc.ServiceRegistrar, srv NotifyManageServer) {
	s.RegisterService(&NotifyManage_ServiceDesc, srv)
}

func _NotifyManage_MessageInfoSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageInfoSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).MessageInfoSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_MessageInfoSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).MessageInfoSend(ctx, req.(*MessageInfoSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_MessageInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).MessageInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_MessageInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).MessageInfoIndex(ctx, req.(*MessageInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_MessageInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).MessageInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_MessageInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).MessageInfoUpdate(ctx, req.(*MessageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_MessageInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).MessageInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_MessageInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).MessageInfoDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyConfigRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithIDCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyConfigRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyConfigRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyConfigRead(ctx, req.(*WithIDCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyConfigCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyConfigCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyConfigCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyConfigCreate(ctx, req.(*NotifyConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyConfigUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyConfigUpdate(ctx, req.(*NotifyConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyConfigIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyConfigIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyConfigIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyConfigIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyConfigIndex(ctx, req.(*NotifyConfigIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyConfigDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyConfigDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyConfigDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyConfigDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyConfigSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyConfigSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyConfigSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyConfigSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyConfigSend(ctx, req.(*NotifyConfigSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyTemplateRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyTemplateRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyTemplateRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyTemplateRead(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyTemplateCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyTemplateCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyTemplateCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyTemplateCreate(ctx, req.(*NotifyTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyTemplateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyTemplateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyTemplateUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyTemplateUpdate(ctx, req.(*NotifyTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyTemplateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyTemplateIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyTemplateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyTemplateIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyTemplateIndex(ctx, req.(*NotifyTemplateIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyTemplateDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyTemplateDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyTemplateDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyTemplateDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyConfigTemplateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyConfigTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyConfigTemplateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyConfigTemplateUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyConfigTemplateUpdate(ctx, req.(*NotifyConfigTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyConfigTemplateDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyConfigTemplateDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyConfigTemplateDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyConfigTemplateDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyConfigTemplateDelete(ctx, req.(*NotifyConfigTemplateDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyConfigTemplateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyConfigTemplateIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyConfigTemplateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyConfigTemplateIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyConfigTemplateIndex(ctx, req.(*NotifyConfigTemplateIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyChannelRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyChannelRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyChannelRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyChannelRead(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyChannelCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyChannelCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyChannelCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyChannelCreate(ctx, req.(*NotifyChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyChannelUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyChannelUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyChannelUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyChannelUpdate(ctx, req.(*NotifyChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyChannelIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyChannelIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyChannelIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyChannelIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyChannelIndex(ctx, req.(*NotifyChannelIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyManage_NotifyChannelDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyManageServer).NotifyChannelDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotifyManage_NotifyChannelDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyManageServer).NotifyChannelDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

// NotifyManage_ServiceDesc is the grpc.ServiceDesc for NotifyManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifyManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.NotifyManage",
	HandlerType: (*NotifyManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messageInfoSend",
			Handler:    _NotifyManage_MessageInfoSend_Handler,
		},
		{
			MethodName: "messageInfoIndex",
			Handler:    _NotifyManage_MessageInfoIndex_Handler,
		},
		{
			MethodName: "messageInfoUpdate",
			Handler:    _NotifyManage_MessageInfoUpdate_Handler,
		},
		{
			MethodName: "messageInfoDelete",
			Handler:    _NotifyManage_MessageInfoDelete_Handler,
		},
		{
			MethodName: "notifyConfigRead",
			Handler:    _NotifyManage_NotifyConfigRead_Handler,
		},
		{
			MethodName: "notifyConfigCreate",
			Handler:    _NotifyManage_NotifyConfigCreate_Handler,
		},
		{
			MethodName: "notifyConfigUpdate",
			Handler:    _NotifyManage_NotifyConfigUpdate_Handler,
		},
		{
			MethodName: "notifyConfigIndex",
			Handler:    _NotifyManage_NotifyConfigIndex_Handler,
		},
		{
			MethodName: "notifyConfigDelete",
			Handler:    _NotifyManage_NotifyConfigDelete_Handler,
		},
		{
			MethodName: "notifyConfigSend",
			Handler:    _NotifyManage_NotifyConfigSend_Handler,
		},
		{
			MethodName: "notifyTemplateRead",
			Handler:    _NotifyManage_NotifyTemplateRead_Handler,
		},
		{
			MethodName: "notifyTemplateCreate",
			Handler:    _NotifyManage_NotifyTemplateCreate_Handler,
		},
		{
			MethodName: "notifyTemplateUpdate",
			Handler:    _NotifyManage_NotifyTemplateUpdate_Handler,
		},
		{
			MethodName: "notifyTemplateIndex",
			Handler:    _NotifyManage_NotifyTemplateIndex_Handler,
		},
		{
			MethodName: "notifyTemplateDelete",
			Handler:    _NotifyManage_NotifyTemplateDelete_Handler,
		},
		{
			MethodName: "notifyConfigTemplateUpdate",
			Handler:    _NotifyManage_NotifyConfigTemplateUpdate_Handler,
		},
		{
			MethodName: "notifyConfigTemplateDelete",
			Handler:    _NotifyManage_NotifyConfigTemplateDelete_Handler,
		},
		{
			MethodName: "notifyConfigTemplateIndex",
			Handler:    _NotifyManage_NotifyConfigTemplateIndex_Handler,
		},
		{
			MethodName: "notifyChannelRead",
			Handler:    _NotifyManage_NotifyChannelRead_Handler,
		},
		{
			MethodName: "notifyChannelCreate",
			Handler:    _NotifyManage_NotifyChannelCreate_Handler,
		},
		{
			MethodName: "notifyChannelUpdate",
			Handler:    _NotifyManage_NotifyChannelUpdate_Handler,
		},
		{
			MethodName: "notifyChannelIndex",
			Handler:    _NotifyManage_NotifyChannelIndex_Handler,
		},
		{
			MethodName: "notifyChannelDelete",
			Handler:    _NotifyManage_NotifyChannelDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sys.proto",
}

const (
	AccessManage_ApiInfoCreate_FullMethodName         = "/sys.AccessManage/apiInfoCreate"
	AccessManage_ApiInfoIndex_FullMethodName          = "/sys.AccessManage/apiInfoIndex"
	AccessManage_ApiInfoUpdate_FullMethodName         = "/sys.AccessManage/apiInfoUpdate"
	AccessManage_ApiInfoDelete_FullMethodName         = "/sys.AccessManage/apiInfoDelete"
	AccessManage_AccessInfoMultiImport_FullMethodName = "/sys.AccessManage/accessInfoMultiImport"
	AccessManage_AccessInfoCreate_FullMethodName      = "/sys.AccessManage/accessInfoCreate"
	AccessManage_AccessInfoIndex_FullMethodName       = "/sys.AccessManage/accessInfoIndex"
	AccessManage_AccessInfoUpdate_FullMethodName      = "/sys.AccessManage/accessInfoUpdate"
	AccessManage_AccessInfoDelete_FullMethodName      = "/sys.AccessManage/accessInfoDelete"
)

// AccessManageClient is the client API for AccessManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessManageClient interface {
	ApiInfoCreate(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*WithID, error)
	ApiInfoIndex(ctx context.Context, in *ApiInfoIndexReq, opts ...grpc.CallOption) (*ApiInfoIndexResp, error)
	ApiInfoUpdate(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*Empty, error)
	ApiInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	AccessInfoMultiImport(ctx context.Context, in *AccessInfoMultiImportReq, opts ...grpc.CallOption) (*AccessInfoMultiImportResp, error)
	AccessInfoCreate(ctx context.Context, in *AccessInfo, opts ...grpc.CallOption) (*WithID, error)
	AccessInfoIndex(ctx context.Context, in *AccessInfoIndexReq, opts ...grpc.CallOption) (*AccessInfoIndexResp, error)
	AccessInfoUpdate(ctx context.Context, in *AccessInfo, opts ...grpc.CallOption) (*Empty, error)
	AccessInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
}

type accessManageClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessManageClient(cc grpc.ClientConnInterface) AccessManageClient {
	return &accessManageClient{cc}
}

func (c *accessManageClient) ApiInfoCreate(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, AccessManage_ApiInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessManageClient) ApiInfoIndex(ctx context.Context, in *ApiInfoIndexReq, opts ...grpc.CallOption) (*ApiInfoIndexResp, error) {
	out := new(ApiInfoIndexResp)
	err := c.cc.Invoke(ctx, AccessManage_ApiInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessManageClient) ApiInfoUpdate(ctx context.Context, in *ApiInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AccessManage_ApiInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessManageClient) ApiInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AccessManage_ApiInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessManageClient) AccessInfoMultiImport(ctx context.Context, in *AccessInfoMultiImportReq, opts ...grpc.CallOption) (*AccessInfoMultiImportResp, error) {
	out := new(AccessInfoMultiImportResp)
	err := c.cc.Invoke(ctx, AccessManage_AccessInfoMultiImport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessManageClient) AccessInfoCreate(ctx context.Context, in *AccessInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, AccessManage_AccessInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessManageClient) AccessInfoIndex(ctx context.Context, in *AccessInfoIndexReq, opts ...grpc.CallOption) (*AccessInfoIndexResp, error) {
	out := new(AccessInfoIndexResp)
	err := c.cc.Invoke(ctx, AccessManage_AccessInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessManageClient) AccessInfoUpdate(ctx context.Context, in *AccessInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AccessManage_AccessInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessManageClient) AccessInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AccessManage_AccessInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessManageServer is the server API for AccessManage service.
// All implementations must embed UnimplementedAccessManageServer
// for forward compatibility
type AccessManageServer interface {
	ApiInfoCreate(context.Context, *ApiInfo) (*WithID, error)
	ApiInfoIndex(context.Context, *ApiInfoIndexReq) (*ApiInfoIndexResp, error)
	ApiInfoUpdate(context.Context, *ApiInfo) (*Empty, error)
	ApiInfoDelete(context.Context, *WithID) (*Empty, error)
	AccessInfoMultiImport(context.Context, *AccessInfoMultiImportReq) (*AccessInfoMultiImportResp, error)
	AccessInfoCreate(context.Context, *AccessInfo) (*WithID, error)
	AccessInfoIndex(context.Context, *AccessInfoIndexReq) (*AccessInfoIndexResp, error)
	AccessInfoUpdate(context.Context, *AccessInfo) (*Empty, error)
	AccessInfoDelete(context.Context, *WithID) (*Empty, error)
	mustEmbedUnimplementedAccessManageServer()
}

// UnimplementedAccessManageServer must be embedded to have forward compatible implementations.
type UnimplementedAccessManageServer struct {
}

func (UnimplementedAccessManageServer) ApiInfoCreate(context.Context, *ApiInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiInfoCreate not implemented")
}
func (UnimplementedAccessManageServer) ApiInfoIndex(context.Context, *ApiInfoIndexReq) (*ApiInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiInfoIndex not implemented")
}
func (UnimplementedAccessManageServer) ApiInfoUpdate(context.Context, *ApiInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiInfoUpdate not implemented")
}
func (UnimplementedAccessManageServer) ApiInfoDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiInfoDelete not implemented")
}
func (UnimplementedAccessManageServer) AccessInfoMultiImport(context.Context, *AccessInfoMultiImportReq) (*AccessInfoMultiImportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessInfoMultiImport not implemented")
}
func (UnimplementedAccessManageServer) AccessInfoCreate(context.Context, *AccessInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessInfoCreate not implemented")
}
func (UnimplementedAccessManageServer) AccessInfoIndex(context.Context, *AccessInfoIndexReq) (*AccessInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessInfoIndex not implemented")
}
func (UnimplementedAccessManageServer) AccessInfoUpdate(context.Context, *AccessInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessInfoUpdate not implemented")
}
func (UnimplementedAccessManageServer) AccessInfoDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessInfoDelete not implemented")
}
func (UnimplementedAccessManageServer) mustEmbedUnimplementedAccessManageServer() {}

// UnsafeAccessManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessManageServer will
// result in compilation errors.
type UnsafeAccessManageServer interface {
	mustEmbedUnimplementedAccessManageServer()
}

func RegisterAccessManageServer(s grpc.ServiceRegistrar, srv AccessManageServer) {
	s.RegisterService(&AccessManage_ServiceDesc, srv)
}

func _AccessManage_ApiInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessManageServer).ApiInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessManage_ApiInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessManageServer).ApiInfoCreate(ctx, req.(*ApiInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessManage_ApiInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessManageServer).ApiInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessManage_ApiInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessManageServer).ApiInfoIndex(ctx, req.(*ApiInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessManage_ApiInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessManageServer).ApiInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessManage_ApiInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessManageServer).ApiInfoUpdate(ctx, req.(*ApiInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessManage_ApiInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessManageServer).ApiInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessManage_ApiInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessManageServer).ApiInfoDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessManage_AccessInfoMultiImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessInfoMultiImportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessManageServer).AccessInfoMultiImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessManage_AccessInfoMultiImport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessManageServer).AccessInfoMultiImport(ctx, req.(*AccessInfoMultiImportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessManage_AccessInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessManageServer).AccessInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessManage_AccessInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessManageServer).AccessInfoCreate(ctx, req.(*AccessInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessManage_AccessInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessManageServer).AccessInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessManage_AccessInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessManageServer).AccessInfoIndex(ctx, req.(*AccessInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessManage_AccessInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessManageServer).AccessInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessManage_AccessInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessManageServer).AccessInfoUpdate(ctx, req.(*AccessInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessManage_AccessInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessManageServer).AccessInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessManage_AccessInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessManageServer).AccessInfoDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessManage_ServiceDesc is the grpc.ServiceDesc for AccessManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.AccessManage",
	HandlerType: (*AccessManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "apiInfoCreate",
			Handler:    _AccessManage_ApiInfoCreate_Handler,
		},
		{
			MethodName: "apiInfoIndex",
			Handler:    _AccessManage_ApiInfoIndex_Handler,
		},
		{
			MethodName: "apiInfoUpdate",
			Handler:    _AccessManage_ApiInfoUpdate_Handler,
		},
		{
			MethodName: "apiInfoDelete",
			Handler:    _AccessManage_ApiInfoDelete_Handler,
		},
		{
			MethodName: "accessInfoMultiImport",
			Handler:    _AccessManage_AccessInfoMultiImport_Handler,
		},
		{
			MethodName: "accessInfoCreate",
			Handler:    _AccessManage_AccessInfoCreate_Handler,
		},
		{
			MethodName: "accessInfoIndex",
			Handler:    _AccessManage_AccessInfoIndex_Handler,
		},
		{
			MethodName: "accessInfoUpdate",
			Handler:    _AccessManage_AccessInfoUpdate_Handler,
		},
		{
			MethodName: "accessInfoDelete",
			Handler:    _AccessManage_AccessInfoDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sys.proto",
}

const (
	RoleManage_RoleInfoCreate_FullMethodName        = "/sys.RoleManage/roleInfoCreate"
	RoleManage_RoleInfoIndex_FullMethodName         = "/sys.RoleManage/roleInfoIndex"
	RoleManage_RoleInfoUpdate_FullMethodName        = "/sys.RoleManage/roleInfoUpdate"
	RoleManage_RoleInfoDelete_FullMethodName        = "/sys.RoleManage/roleInfoDelete"
	RoleManage_RoleMenuIndex_FullMethodName         = "/sys.RoleManage/roleMenuIndex"
	RoleManage_RoleMenuMultiUpdate_FullMethodName   = "/sys.RoleManage/roleMenuMultiUpdate"
	RoleManage_RoleAppIndex_FullMethodName          = "/sys.RoleManage/roleAppIndex"
	RoleManage_RoleAppMultiUpdate_FullMethodName    = "/sys.RoleManage/roleAppMultiUpdate"
	RoleManage_RoleModuleIndex_FullMethodName       = "/sys.RoleManage/roleModuleIndex"
	RoleManage_RoleModuleMultiUpdate_FullMethodName = "/sys.RoleManage/roleModuleMultiUpdate"
	RoleManage_RoleApiAuth_FullMethodName           = "/sys.RoleManage/roleApiAuth"
	RoleManage_RoleAccessMultiUpdate_FullMethodName = "/sys.RoleManage/roleAccessMultiUpdate"
	RoleManage_RoleAccessIndex_FullMethodName       = "/sys.RoleManage/roleAccessIndex"
)

// RoleManageClient is the client API for RoleManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleManageClient interface {
	RoleInfoCreate(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*WithID, error)
	RoleInfoIndex(ctx context.Context, in *RoleInfoIndexReq, opts ...grpc.CallOption) (*RoleInfoIndexResp, error)
	RoleInfoUpdate(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*Empty, error)
	RoleInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	RoleMenuIndex(ctx context.Context, in *RoleMenuIndexReq, opts ...grpc.CallOption) (*RoleMenuIndexResp, error)
	RoleMenuMultiUpdate(ctx context.Context, in *RoleMenuMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error)
	RoleAppIndex(ctx context.Context, in *RoleAppIndexReq, opts ...grpc.CallOption) (*RoleAppIndexResp, error)
	RoleAppMultiUpdate(ctx context.Context, in *RoleAppMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error)
	RoleModuleIndex(ctx context.Context, in *RoleModuleIndexReq, opts ...grpc.CallOption) (*RoleModuleIndexResp, error)
	RoleModuleMultiUpdate(ctx context.Context, in *RoleModuleMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error)
	RoleApiAuth(ctx context.Context, in *RoleApiAuthReq, opts ...grpc.CallOption) (*RoleApiAuthResp, error)
	RoleAccessMultiUpdate(ctx context.Context, in *RoleAccessMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error)
	RoleAccessIndex(ctx context.Context, in *RoleAccessIndexReq, opts ...grpc.CallOption) (*RoleAccessIndexResp, error)
}

type roleManageClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleManageClient(cc grpc.ClientConnInterface) RoleManageClient {
	return &roleManageClient{cc}
}

func (c *roleManageClient) RoleInfoCreate(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, RoleManage_RoleInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManageClient) RoleInfoIndex(ctx context.Context, in *RoleInfoIndexReq, opts ...grpc.CallOption) (*RoleInfoIndexResp, error) {
	out := new(RoleInfoIndexResp)
	err := c.cc.Invoke(ctx, RoleManage_RoleInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManageClient) RoleInfoUpdate(ctx context.Context, in *RoleInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoleManage_RoleInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManageClient) RoleInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoleManage_RoleInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManageClient) RoleMenuIndex(ctx context.Context, in *RoleMenuIndexReq, opts ...grpc.CallOption) (*RoleMenuIndexResp, error) {
	out := new(RoleMenuIndexResp)
	err := c.cc.Invoke(ctx, RoleManage_RoleMenuIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManageClient) RoleMenuMultiUpdate(ctx context.Context, in *RoleMenuMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoleManage_RoleMenuMultiUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManageClient) RoleAppIndex(ctx context.Context, in *RoleAppIndexReq, opts ...grpc.CallOption) (*RoleAppIndexResp, error) {
	out := new(RoleAppIndexResp)
	err := c.cc.Invoke(ctx, RoleManage_RoleAppIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManageClient) RoleAppMultiUpdate(ctx context.Context, in *RoleAppMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoleManage_RoleAppMultiUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManageClient) RoleModuleIndex(ctx context.Context, in *RoleModuleIndexReq, opts ...grpc.CallOption) (*RoleModuleIndexResp, error) {
	out := new(RoleModuleIndexResp)
	err := c.cc.Invoke(ctx, RoleManage_RoleModuleIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManageClient) RoleModuleMultiUpdate(ctx context.Context, in *RoleModuleMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoleManage_RoleModuleMultiUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManageClient) RoleApiAuth(ctx context.Context, in *RoleApiAuthReq, opts ...grpc.CallOption) (*RoleApiAuthResp, error) {
	out := new(RoleApiAuthResp)
	err := c.cc.Invoke(ctx, RoleManage_RoleApiAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManageClient) RoleAccessMultiUpdate(ctx context.Context, in *RoleAccessMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RoleManage_RoleAccessMultiUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManageClient) RoleAccessIndex(ctx context.Context, in *RoleAccessIndexReq, opts ...grpc.CallOption) (*RoleAccessIndexResp, error) {
	out := new(RoleAccessIndexResp)
	err := c.cc.Invoke(ctx, RoleManage_RoleAccessIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleManageServer is the server API for RoleManage service.
// All implementations must embed UnimplementedRoleManageServer
// for forward compatibility
type RoleManageServer interface {
	RoleInfoCreate(context.Context, *RoleInfo) (*WithID, error)
	RoleInfoIndex(context.Context, *RoleInfoIndexReq) (*RoleInfoIndexResp, error)
	RoleInfoUpdate(context.Context, *RoleInfo) (*Empty, error)
	RoleInfoDelete(context.Context, *WithID) (*Empty, error)
	RoleMenuIndex(context.Context, *RoleMenuIndexReq) (*RoleMenuIndexResp, error)
	RoleMenuMultiUpdate(context.Context, *RoleMenuMultiUpdateReq) (*Empty, error)
	RoleAppIndex(context.Context, *RoleAppIndexReq) (*RoleAppIndexResp, error)
	RoleAppMultiUpdate(context.Context, *RoleAppMultiUpdateReq) (*Empty, error)
	RoleModuleIndex(context.Context, *RoleModuleIndexReq) (*RoleModuleIndexResp, error)
	RoleModuleMultiUpdate(context.Context, *RoleModuleMultiUpdateReq) (*Empty, error)
	RoleApiAuth(context.Context, *RoleApiAuthReq) (*RoleApiAuthResp, error)
	RoleAccessMultiUpdate(context.Context, *RoleAccessMultiUpdateReq) (*Empty, error)
	RoleAccessIndex(context.Context, *RoleAccessIndexReq) (*RoleAccessIndexResp, error)
	mustEmbedUnimplementedRoleManageServer()
}

// UnimplementedRoleManageServer must be embedded to have forward compatible implementations.
type UnimplementedRoleManageServer struct {
}

func (UnimplementedRoleManageServer) RoleInfoCreate(context.Context, *RoleInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleInfoCreate not implemented")
}
func (UnimplementedRoleManageServer) RoleInfoIndex(context.Context, *RoleInfoIndexReq) (*RoleInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleInfoIndex not implemented")
}
func (UnimplementedRoleManageServer) RoleInfoUpdate(context.Context, *RoleInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleInfoUpdate not implemented")
}
func (UnimplementedRoleManageServer) RoleInfoDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleInfoDelete not implemented")
}
func (UnimplementedRoleManageServer) RoleMenuIndex(context.Context, *RoleMenuIndexReq) (*RoleMenuIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleMenuIndex not implemented")
}
func (UnimplementedRoleManageServer) RoleMenuMultiUpdate(context.Context, *RoleMenuMultiUpdateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleMenuMultiUpdate not implemented")
}
func (UnimplementedRoleManageServer) RoleAppIndex(context.Context, *RoleAppIndexReq) (*RoleAppIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleAppIndex not implemented")
}
func (UnimplementedRoleManageServer) RoleAppMultiUpdate(context.Context, *RoleAppMultiUpdateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleAppMultiUpdate not implemented")
}
func (UnimplementedRoleManageServer) RoleModuleIndex(context.Context, *RoleModuleIndexReq) (*RoleModuleIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleModuleIndex not implemented")
}
func (UnimplementedRoleManageServer) RoleModuleMultiUpdate(context.Context, *RoleModuleMultiUpdateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleModuleMultiUpdate not implemented")
}
func (UnimplementedRoleManageServer) RoleApiAuth(context.Context, *RoleApiAuthReq) (*RoleApiAuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleApiAuth not implemented")
}
func (UnimplementedRoleManageServer) RoleAccessMultiUpdate(context.Context, *RoleAccessMultiUpdateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleAccessMultiUpdate not implemented")
}
func (UnimplementedRoleManageServer) RoleAccessIndex(context.Context, *RoleAccessIndexReq) (*RoleAccessIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleAccessIndex not implemented")
}
func (UnimplementedRoleManageServer) mustEmbedUnimplementedRoleManageServer() {}

// UnsafeRoleManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleManageServer will
// result in compilation errors.
type UnsafeRoleManageServer interface {
	mustEmbedUnimplementedRoleManageServer()
}

func RegisterRoleManageServer(s grpc.ServiceRegistrar, srv RoleManageServer) {
	s.RegisterService(&RoleManage_ServiceDesc, srv)
}

func _RoleManage_RoleInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManageServer).RoleInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleManage_RoleInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManageServer).RoleInfoCreate(ctx, req.(*RoleInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManage_RoleInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManageServer).RoleInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleManage_RoleInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManageServer).RoleInfoIndex(ctx, req.(*RoleInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManage_RoleInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManageServer).RoleInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleManage_RoleInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManageServer).RoleInfoUpdate(ctx, req.(*RoleInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManage_RoleInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManageServer).RoleInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleManage_RoleInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManageServer).RoleInfoDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManage_RoleMenuIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMenuIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManageServer).RoleMenuIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleManage_RoleMenuIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManageServer).RoleMenuIndex(ctx, req.(*RoleMenuIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManage_RoleMenuMultiUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleMenuMultiUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManageServer).RoleMenuMultiUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleManage_RoleMenuMultiUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManageServer).RoleMenuMultiUpdate(ctx, req.(*RoleMenuMultiUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManage_RoleAppIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleAppIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManageServer).RoleAppIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleManage_RoleAppIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManageServer).RoleAppIndex(ctx, req.(*RoleAppIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManage_RoleAppMultiUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleAppMultiUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManageServer).RoleAppMultiUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleManage_RoleAppMultiUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManageServer).RoleAppMultiUpdate(ctx, req.(*RoleAppMultiUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManage_RoleModuleIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleModuleIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManageServer).RoleModuleIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleManage_RoleModuleIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManageServer).RoleModuleIndex(ctx, req.(*RoleModuleIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManage_RoleModuleMultiUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleModuleMultiUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManageServer).RoleModuleMultiUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleManage_RoleModuleMultiUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManageServer).RoleModuleMultiUpdate(ctx, req.(*RoleModuleMultiUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManage_RoleApiAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleApiAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManageServer).RoleApiAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleManage_RoleApiAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManageServer).RoleApiAuth(ctx, req.(*RoleApiAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManage_RoleAccessMultiUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleAccessMultiUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManageServer).RoleAccessMultiUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleManage_RoleAccessMultiUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManageServer).RoleAccessMultiUpdate(ctx, req.(*RoleAccessMultiUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManage_RoleAccessIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleAccessIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManageServer).RoleAccessIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoleManage_RoleAccessIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManageServer).RoleAccessIndex(ctx, req.(*RoleAccessIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleManage_ServiceDesc is the grpc.ServiceDesc for RoleManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.RoleManage",
	HandlerType: (*RoleManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "roleInfoCreate",
			Handler:    _RoleManage_RoleInfoCreate_Handler,
		},
		{
			MethodName: "roleInfoIndex",
			Handler:    _RoleManage_RoleInfoIndex_Handler,
		},
		{
			MethodName: "roleInfoUpdate",
			Handler:    _RoleManage_RoleInfoUpdate_Handler,
		},
		{
			MethodName: "roleInfoDelete",
			Handler:    _RoleManage_RoleInfoDelete_Handler,
		},
		{
			MethodName: "roleMenuIndex",
			Handler:    _RoleManage_RoleMenuIndex_Handler,
		},
		{
			MethodName: "roleMenuMultiUpdate",
			Handler:    _RoleManage_RoleMenuMultiUpdate_Handler,
		},
		{
			MethodName: "roleAppIndex",
			Handler:    _RoleManage_RoleAppIndex_Handler,
		},
		{
			MethodName: "roleAppMultiUpdate",
			Handler:    _RoleManage_RoleAppMultiUpdate_Handler,
		},
		{
			MethodName: "roleModuleIndex",
			Handler:    _RoleManage_RoleModuleIndex_Handler,
		},
		{
			MethodName: "roleModuleMultiUpdate",
			Handler:    _RoleManage_RoleModuleMultiUpdate_Handler,
		},
		{
			MethodName: "roleApiAuth",
			Handler:    _RoleManage_RoleApiAuth_Handler,
		},
		{
			MethodName: "roleAccessMultiUpdate",
			Handler:    _RoleManage_RoleAccessMultiUpdate_Handler,
		},
		{
			MethodName: "roleAccessIndex",
			Handler:    _RoleManage_RoleAccessIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sys.proto",
}

const (
	AppManage_AppInfoCreate_FullMethodName        = "/sys.AppManage/appInfoCreate"
	AppManage_AppInfoIndex_FullMethodName         = "/sys.AppManage/appInfoIndex"
	AppManage_AppInfoUpdate_FullMethodName        = "/sys.AppManage/appInfoUpdate"
	AppManage_AppInfoDelete_FullMethodName        = "/sys.AppManage/appInfoDelete"
	AppManage_AppInfoRead_FullMethodName          = "/sys.AppManage/appInfoRead"
	AppManage_AppModuleIndex_FullMethodName       = "/sys.AppManage/appModuleIndex"
	AppManage_AppModuleMultiUpdate_FullMethodName = "/sys.AppManage/appModuleMultiUpdate"
)

// AppManageClient is the client API for AppManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppManageClient interface {
	AppInfoCreate(ctx context.Context, in *AppInfo, opts ...grpc.CallOption) (*WithID, error)
	AppInfoIndex(ctx context.Context, in *AppInfoIndexReq, opts ...grpc.CallOption) (*AppInfoIndexResp, error)
	AppInfoUpdate(ctx context.Context, in *AppInfo, opts ...grpc.CallOption) (*Empty, error)
	AppInfoDelete(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*Empty, error)
	AppInfoRead(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*AppInfo, error)
	AppModuleIndex(ctx context.Context, in *AppModuleIndexReq, opts ...grpc.CallOption) (*AppModuleIndexResp, error)
	AppModuleMultiUpdate(ctx context.Context, in *AppModuleMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error)
}

type appManageClient struct {
	cc grpc.ClientConnInterface
}

func NewAppManageClient(cc grpc.ClientConnInterface) AppManageClient {
	return &appManageClient{cc}
}

func (c *appManageClient) AppInfoCreate(ctx context.Context, in *AppInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, AppManage_AppInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManageClient) AppInfoIndex(ctx context.Context, in *AppInfoIndexReq, opts ...grpc.CallOption) (*AppInfoIndexResp, error) {
	out := new(AppInfoIndexResp)
	err := c.cc.Invoke(ctx, AppManage_AppInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManageClient) AppInfoUpdate(ctx context.Context, in *AppInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AppManage_AppInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManageClient) AppInfoDelete(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AppManage_AppInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManageClient) AppInfoRead(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*AppInfo, error) {
	out := new(AppInfo)
	err := c.cc.Invoke(ctx, AppManage_AppInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManageClient) AppModuleIndex(ctx context.Context, in *AppModuleIndexReq, opts ...grpc.CallOption) (*AppModuleIndexResp, error) {
	out := new(AppModuleIndexResp)
	err := c.cc.Invoke(ctx, AppManage_AppModuleIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appManageClient) AppModuleMultiUpdate(ctx context.Context, in *AppModuleMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AppManage_AppModuleMultiUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppManageServer is the server API for AppManage service.
// All implementations must embed UnimplementedAppManageServer
// for forward compatibility
type AppManageServer interface {
	AppInfoCreate(context.Context, *AppInfo) (*WithID, error)
	AppInfoIndex(context.Context, *AppInfoIndexReq) (*AppInfoIndexResp, error)
	AppInfoUpdate(context.Context, *AppInfo) (*Empty, error)
	AppInfoDelete(context.Context, *WithIDCode) (*Empty, error)
	AppInfoRead(context.Context, *WithIDCode) (*AppInfo, error)
	AppModuleIndex(context.Context, *AppModuleIndexReq) (*AppModuleIndexResp, error)
	AppModuleMultiUpdate(context.Context, *AppModuleMultiUpdateReq) (*Empty, error)
	mustEmbedUnimplementedAppManageServer()
}

// UnimplementedAppManageServer must be embedded to have forward compatible implementations.
type UnimplementedAppManageServer struct {
}

func (UnimplementedAppManageServer) AppInfoCreate(context.Context, *AppInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppInfoCreate not implemented")
}
func (UnimplementedAppManageServer) AppInfoIndex(context.Context, *AppInfoIndexReq) (*AppInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppInfoIndex not implemented")
}
func (UnimplementedAppManageServer) AppInfoUpdate(context.Context, *AppInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppInfoUpdate not implemented")
}
func (UnimplementedAppManageServer) AppInfoDelete(context.Context, *WithIDCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppInfoDelete not implemented")
}
func (UnimplementedAppManageServer) AppInfoRead(context.Context, *WithIDCode) (*AppInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppInfoRead not implemented")
}
func (UnimplementedAppManageServer) AppModuleIndex(context.Context, *AppModuleIndexReq) (*AppModuleIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppModuleIndex not implemented")
}
func (UnimplementedAppManageServer) AppModuleMultiUpdate(context.Context, *AppModuleMultiUpdateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppModuleMultiUpdate not implemented")
}
func (UnimplementedAppManageServer) mustEmbedUnimplementedAppManageServer() {}

// UnsafeAppManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppManageServer will
// result in compilation errors.
type UnsafeAppManageServer interface {
	mustEmbedUnimplementedAppManageServer()
}

func RegisterAppManageServer(s grpc.ServiceRegistrar, srv AppManageServer) {
	s.RegisterService(&AppManage_ServiceDesc, srv)
}

func _AppManage_AppInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManageServer).AppInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppManage_AppInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManageServer).AppInfoCreate(ctx, req.(*AppInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManage_AppInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManageServer).AppInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppManage_AppInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManageServer).AppInfoIndex(ctx, req.(*AppInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManage_AppInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManageServer).AppInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppManage_AppInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManageServer).AppInfoUpdate(ctx, req.(*AppInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManage_AppInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithIDCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManageServer).AppInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppManage_AppInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManageServer).AppInfoDelete(ctx, req.(*WithIDCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManage_AppInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithIDCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManageServer).AppInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppManage_AppInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManageServer).AppInfoRead(ctx, req.(*WithIDCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManage_AppModuleIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppModuleIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManageServer).AppModuleIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppManage_AppModuleIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManageServer).AppModuleIndex(ctx, req.(*AppModuleIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppManage_AppModuleMultiUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppModuleMultiUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppManageServer).AppModuleMultiUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppManage_AppModuleMultiUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppManageServer).AppModuleMultiUpdate(ctx, req.(*AppModuleMultiUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AppManage_ServiceDesc is the grpc.ServiceDesc for AppManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.AppManage",
	HandlerType: (*AppManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "appInfoCreate",
			Handler:    _AppManage_AppInfoCreate_Handler,
		},
		{
			MethodName: "appInfoIndex",
			Handler:    _AppManage_AppInfoIndex_Handler,
		},
		{
			MethodName: "appInfoUpdate",
			Handler:    _AppManage_AppInfoUpdate_Handler,
		},
		{
			MethodName: "appInfoDelete",
			Handler:    _AppManage_AppInfoDelete_Handler,
		},
		{
			MethodName: "appInfoRead",
			Handler:    _AppManage_AppInfoRead_Handler,
		},
		{
			MethodName: "appModuleIndex",
			Handler:    _AppManage_AppModuleIndex_Handler,
		},
		{
			MethodName: "appModuleMultiUpdate",
			Handler:    _AppManage_AppModuleMultiUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sys.proto",
}

const (
	ModuleManage_ModuleInfoCreate_FullMethodName      = "/sys.ModuleManage/moduleInfoCreate"
	ModuleManage_ModuleInfoIndex_FullMethodName       = "/sys.ModuleManage/moduleInfoIndex"
	ModuleManage_ModuleInfoUpdate_FullMethodName      = "/sys.ModuleManage/moduleInfoUpdate"
	ModuleManage_ModuleInfoDelete_FullMethodName      = "/sys.ModuleManage/moduleInfoDelete"
	ModuleManage_ModuleInfoRead_FullMethodName        = "/sys.ModuleManage/moduleInfoRead"
	ModuleManage_ModuleMenuCreate_FullMethodName      = "/sys.ModuleManage/moduleMenuCreate"
	ModuleManage_ModuleMenuIndex_FullMethodName       = "/sys.ModuleManage/moduleMenuIndex"
	ModuleManage_ModuleMenuUpdate_FullMethodName      = "/sys.ModuleManage/moduleMenuUpdate"
	ModuleManage_ModuleMenuDelete_FullMethodName      = "/sys.ModuleManage/moduleMenuDelete"
	ModuleManage_ModuleMenuMultiImport_FullMethodName = "/sys.ModuleManage/moduleMenuMultiImport"
	ModuleManage_ModuleMenuMultiExport_FullMethodName = "/sys.ModuleManage/moduleMenuMultiExport"
)

// ModuleManageClient is the client API for ModuleManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModuleManageClient interface {
	ModuleInfoCreate(ctx context.Context, in *ModuleInfo, opts ...grpc.CallOption) (*WithID, error)
	ModuleInfoIndex(ctx context.Context, in *ModuleInfoIndexReq, opts ...grpc.CallOption) (*ModuleInfoIndexResp, error)
	ModuleInfoUpdate(ctx context.Context, in *ModuleInfo, opts ...grpc.CallOption) (*Empty, error)
	ModuleInfoDelete(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*Empty, error)
	ModuleInfoRead(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*ModuleInfo, error)
	ModuleMenuCreate(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*WithID, error)
	ModuleMenuIndex(ctx context.Context, in *MenuInfoIndexReq, opts ...grpc.CallOption) (*MenuInfoIndexResp, error)
	ModuleMenuUpdate(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*Empty, error)
	ModuleMenuDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	ModuleMenuMultiImport(ctx context.Context, in *MenuMultiImportReq, opts ...grpc.CallOption) (*MenuMultiImportResp, error)
	ModuleMenuMultiExport(ctx context.Context, in *MenuMultiExportReq, opts ...grpc.CallOption) (*MenuMultiExportResp, error)
}

type moduleManageClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleManageClient(cc grpc.ClientConnInterface) ModuleManageClient {
	return &moduleManageClient{cc}
}

func (c *moduleManageClient) ModuleInfoCreate(ctx context.Context, in *ModuleInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, ModuleManage_ModuleInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleManageClient) ModuleInfoIndex(ctx context.Context, in *ModuleInfoIndexReq, opts ...grpc.CallOption) (*ModuleInfoIndexResp, error) {
	out := new(ModuleInfoIndexResp)
	err := c.cc.Invoke(ctx, ModuleManage_ModuleInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleManageClient) ModuleInfoUpdate(ctx context.Context, in *ModuleInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ModuleManage_ModuleInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleManageClient) ModuleInfoDelete(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ModuleManage_ModuleInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleManageClient) ModuleInfoRead(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*ModuleInfo, error) {
	out := new(ModuleInfo)
	err := c.cc.Invoke(ctx, ModuleManage_ModuleInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleManageClient) ModuleMenuCreate(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, ModuleManage_ModuleMenuCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleManageClient) ModuleMenuIndex(ctx context.Context, in *MenuInfoIndexReq, opts ...grpc.CallOption) (*MenuInfoIndexResp, error) {
	out := new(MenuInfoIndexResp)
	err := c.cc.Invoke(ctx, ModuleManage_ModuleMenuIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleManageClient) ModuleMenuUpdate(ctx context.Context, in *MenuInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ModuleManage_ModuleMenuUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleManageClient) ModuleMenuDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ModuleManage_ModuleMenuDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleManageClient) ModuleMenuMultiImport(ctx context.Context, in *MenuMultiImportReq, opts ...grpc.CallOption) (*MenuMultiImportResp, error) {
	out := new(MenuMultiImportResp)
	err := c.cc.Invoke(ctx, ModuleManage_ModuleMenuMultiImport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleManageClient) ModuleMenuMultiExport(ctx context.Context, in *MenuMultiExportReq, opts ...grpc.CallOption) (*MenuMultiExportResp, error) {
	out := new(MenuMultiExportResp)
	err := c.cc.Invoke(ctx, ModuleManage_ModuleMenuMultiExport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleManageServer is the server API for ModuleManage service.
// All implementations must embed UnimplementedModuleManageServer
// for forward compatibility
type ModuleManageServer interface {
	ModuleInfoCreate(context.Context, *ModuleInfo) (*WithID, error)
	ModuleInfoIndex(context.Context, *ModuleInfoIndexReq) (*ModuleInfoIndexResp, error)
	ModuleInfoUpdate(context.Context, *ModuleInfo) (*Empty, error)
	ModuleInfoDelete(context.Context, *WithIDCode) (*Empty, error)
	ModuleInfoRead(context.Context, *WithIDCode) (*ModuleInfo, error)
	ModuleMenuCreate(context.Context, *MenuInfo) (*WithID, error)
	ModuleMenuIndex(context.Context, *MenuInfoIndexReq) (*MenuInfoIndexResp, error)
	ModuleMenuUpdate(context.Context, *MenuInfo) (*Empty, error)
	ModuleMenuDelete(context.Context, *WithID) (*Empty, error)
	ModuleMenuMultiImport(context.Context, *MenuMultiImportReq) (*MenuMultiImportResp, error)
	ModuleMenuMultiExport(context.Context, *MenuMultiExportReq) (*MenuMultiExportResp, error)
	mustEmbedUnimplementedModuleManageServer()
}

// UnimplementedModuleManageServer must be embedded to have forward compatible implementations.
type UnimplementedModuleManageServer struct {
}

func (UnimplementedModuleManageServer) ModuleInfoCreate(context.Context, *ModuleInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleInfoCreate not implemented")
}
func (UnimplementedModuleManageServer) ModuleInfoIndex(context.Context, *ModuleInfoIndexReq) (*ModuleInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleInfoIndex not implemented")
}
func (UnimplementedModuleManageServer) ModuleInfoUpdate(context.Context, *ModuleInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleInfoUpdate not implemented")
}
func (UnimplementedModuleManageServer) ModuleInfoDelete(context.Context, *WithIDCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleInfoDelete not implemented")
}
func (UnimplementedModuleManageServer) ModuleInfoRead(context.Context, *WithIDCode) (*ModuleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleInfoRead not implemented")
}
func (UnimplementedModuleManageServer) ModuleMenuCreate(context.Context, *MenuInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleMenuCreate not implemented")
}
func (UnimplementedModuleManageServer) ModuleMenuIndex(context.Context, *MenuInfoIndexReq) (*MenuInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleMenuIndex not implemented")
}
func (UnimplementedModuleManageServer) ModuleMenuUpdate(context.Context, *MenuInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleMenuUpdate not implemented")
}
func (UnimplementedModuleManageServer) ModuleMenuDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleMenuDelete not implemented")
}
func (UnimplementedModuleManageServer) ModuleMenuMultiImport(context.Context, *MenuMultiImportReq) (*MenuMultiImportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleMenuMultiImport not implemented")
}
func (UnimplementedModuleManageServer) ModuleMenuMultiExport(context.Context, *MenuMultiExportReq) (*MenuMultiExportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleMenuMultiExport not implemented")
}
func (UnimplementedModuleManageServer) mustEmbedUnimplementedModuleManageServer() {}

// UnsafeModuleManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleManageServer will
// result in compilation errors.
type UnsafeModuleManageServer interface {
	mustEmbedUnimplementedModuleManageServer()
}

func RegisterModuleManageServer(s grpc.ServiceRegistrar, srv ModuleManageServer) {
	s.RegisterService(&ModuleManage_ServiceDesc, srv)
}

func _ModuleManage_ModuleInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleManageServer).ModuleInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleManage_ModuleInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleManageServer).ModuleInfoCreate(ctx, req.(*ModuleInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleManage_ModuleInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleManageServer).ModuleInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleManage_ModuleInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleManageServer).ModuleInfoIndex(ctx, req.(*ModuleInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleManage_ModuleInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleManageServer).ModuleInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleManage_ModuleInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleManageServer).ModuleInfoUpdate(ctx, req.(*ModuleInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleManage_ModuleInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithIDCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleManageServer).ModuleInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleManage_ModuleInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleManageServer).ModuleInfoDelete(ctx, req.(*WithIDCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleManage_ModuleInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithIDCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleManageServer).ModuleInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleManage_ModuleInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleManageServer).ModuleInfoRead(ctx, req.(*WithIDCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleManage_ModuleMenuCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleManageServer).ModuleMenuCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleManage_ModuleMenuCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleManageServer).ModuleMenuCreate(ctx, req.(*MenuInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleManage_ModuleMenuIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleManageServer).ModuleMenuIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleManage_ModuleMenuIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleManageServer).ModuleMenuIndex(ctx, req.(*MenuInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleManage_ModuleMenuUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleManageServer).ModuleMenuUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleManage_ModuleMenuUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleManageServer).ModuleMenuUpdate(ctx, req.(*MenuInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleManage_ModuleMenuDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleManageServer).ModuleMenuDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleManage_ModuleMenuDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleManageServer).ModuleMenuDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleManage_ModuleMenuMultiImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuMultiImportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleManageServer).ModuleMenuMultiImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleManage_ModuleMenuMultiImport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleManageServer).ModuleMenuMultiImport(ctx, req.(*MenuMultiImportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleManage_ModuleMenuMultiExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuMultiExportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleManageServer).ModuleMenuMultiExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModuleManage_ModuleMenuMultiExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleManageServer).ModuleMenuMultiExport(ctx, req.(*MenuMultiExportReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ModuleManage_ServiceDesc is the grpc.ServiceDesc for ModuleManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModuleManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.ModuleManage",
	HandlerType: (*ModuleManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "moduleInfoCreate",
			Handler:    _ModuleManage_ModuleInfoCreate_Handler,
		},
		{
			MethodName: "moduleInfoIndex",
			Handler:    _ModuleManage_ModuleInfoIndex_Handler,
		},
		{
			MethodName: "moduleInfoUpdate",
			Handler:    _ModuleManage_ModuleInfoUpdate_Handler,
		},
		{
			MethodName: "moduleInfoDelete",
			Handler:    _ModuleManage_ModuleInfoDelete_Handler,
		},
		{
			MethodName: "moduleInfoRead",
			Handler:    _ModuleManage_ModuleInfoRead_Handler,
		},
		{
			MethodName: "moduleMenuCreate",
			Handler:    _ModuleManage_ModuleMenuCreate_Handler,
		},
		{
			MethodName: "moduleMenuIndex",
			Handler:    _ModuleManage_ModuleMenuIndex_Handler,
		},
		{
			MethodName: "moduleMenuUpdate",
			Handler:    _ModuleManage_ModuleMenuUpdate_Handler,
		},
		{
			MethodName: "moduleMenuDelete",
			Handler:    _ModuleManage_ModuleMenuDelete_Handler,
		},
		{
			MethodName: "moduleMenuMultiImport",
			Handler:    _ModuleManage_ModuleMenuMultiImport_Handler,
		},
		{
			MethodName: "moduleMenuMultiExport",
			Handler:    _ModuleManage_ModuleMenuMultiExport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sys.proto",
}

const (
	DictManage_DictInfoCreate_FullMethodName        = "/sys.DictManage/dictInfoCreate"
	DictManage_DictInfoIndex_FullMethodName         = "/sys.DictManage/dictInfoIndex"
	DictManage_DictInfoUpdate_FullMethodName        = "/sys.DictManage/dictInfoUpdate"
	DictManage_DictInfoDelete_FullMethodName        = "/sys.DictManage/dictInfoDelete"
	DictManage_DictInfoRead_FullMethodName          = "/sys.DictManage/dictInfoRead"
	DictManage_DictDetailRead_FullMethodName        = "/sys.DictManage/dictDetailRead"
	DictManage_DictDetailCreate_FullMethodName      = "/sys.DictManage/dictDetailCreate"
	DictManage_DictDetailMultiCreate_FullMethodName = "/sys.DictManage/dictDetailMultiCreate"
	DictManage_DictDetailIndex_FullMethodName       = "/sys.DictManage/dictDetailIndex"
	DictManage_DictDetailUpdate_FullMethodName      = "/sys.DictManage/dictDetailUpdate"
	DictManage_DictDetailDelete_FullMethodName      = "/sys.DictManage/dictDetailDelete"
	DictManage_DictMultiImport_FullMethodName       = "/sys.DictManage/dictMultiImport"
	DictManage_DictMultiExport_FullMethodName       = "/sys.DictManage/dictMultiExport"
)

// DictManageClient is the client API for DictManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DictManageClient interface {
	DictInfoCreate(ctx context.Context, in *DictInfo, opts ...grpc.CallOption) (*WithID, error)
	DictInfoIndex(ctx context.Context, in *DictInfoIndexReq, opts ...grpc.CallOption) (*DictInfoIndexResp, error)
	DictInfoUpdate(ctx context.Context, in *DictInfo, opts ...grpc.CallOption) (*Empty, error)
	DictInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	DictInfoRead(ctx context.Context, in *DictInfoReadReq, opts ...grpc.CallOption) (*DictInfo, error)
	DictDetailRead(ctx context.Context, in *DictDetailReadReq, opts ...grpc.CallOption) (*DictDetail, error)
	DictDetailCreate(ctx context.Context, in *DictDetail, opts ...grpc.CallOption) (*WithID, error)
	DictDetailMultiCreate(ctx context.Context, in *DictDetailMultiCreateReq, opts ...grpc.CallOption) (*Empty, error)
	DictDetailIndex(ctx context.Context, in *DictDetailIndexReq, opts ...grpc.CallOption) (*DictDetailIndexResp, error)
	DictDetailUpdate(ctx context.Context, in *DictDetail, opts ...grpc.CallOption) (*Empty, error)
	DictDetailDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	DictMultiImport(ctx context.Context, in *DictMultiImportReq, opts ...grpc.CallOption) (*DictMultiImportResp, error)
	DictMultiExport(ctx context.Context, in *DictMultiExportReq, opts ...grpc.CallOption) (*DictMultiExportResp, error)
}

type dictManageClient struct {
	cc grpc.ClientConnInterface
}

func NewDictManageClient(cc grpc.ClientConnInterface) DictManageClient {
	return &dictManageClient{cc}
}

func (c *dictManageClient) DictInfoCreate(ctx context.Context, in *DictInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, DictManage_DictInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictManageClient) DictInfoIndex(ctx context.Context, in *DictInfoIndexReq, opts ...grpc.CallOption) (*DictInfoIndexResp, error) {
	out := new(DictInfoIndexResp)
	err := c.cc.Invoke(ctx, DictManage_DictInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictManageClient) DictInfoUpdate(ctx context.Context, in *DictInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DictManage_DictInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictManageClient) DictInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DictManage_DictInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictManageClient) DictInfoRead(ctx context.Context, in *DictInfoReadReq, opts ...grpc.CallOption) (*DictInfo, error) {
	out := new(DictInfo)
	err := c.cc.Invoke(ctx, DictManage_DictInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictManageClient) DictDetailRead(ctx context.Context, in *DictDetailReadReq, opts ...grpc.CallOption) (*DictDetail, error) {
	out := new(DictDetail)
	err := c.cc.Invoke(ctx, DictManage_DictDetailRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictManageClient) DictDetailCreate(ctx context.Context, in *DictDetail, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, DictManage_DictDetailCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictManageClient) DictDetailMultiCreate(ctx context.Context, in *DictDetailMultiCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DictManage_DictDetailMultiCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictManageClient) DictDetailIndex(ctx context.Context, in *DictDetailIndexReq, opts ...grpc.CallOption) (*DictDetailIndexResp, error) {
	out := new(DictDetailIndexResp)
	err := c.cc.Invoke(ctx, DictManage_DictDetailIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictManageClient) DictDetailUpdate(ctx context.Context, in *DictDetail, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DictManage_DictDetailUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictManageClient) DictDetailDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DictManage_DictDetailDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictManageClient) DictMultiImport(ctx context.Context, in *DictMultiImportReq, opts ...grpc.CallOption) (*DictMultiImportResp, error) {
	out := new(DictMultiImportResp)
	err := c.cc.Invoke(ctx, DictManage_DictMultiImport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictManageClient) DictMultiExport(ctx context.Context, in *DictMultiExportReq, opts ...grpc.CallOption) (*DictMultiExportResp, error) {
	out := new(DictMultiExportResp)
	err := c.cc.Invoke(ctx, DictManage_DictMultiExport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictManageServer is the server API for DictManage service.
// All implementations must embed UnimplementedDictManageServer
// for forward compatibility
type DictManageServer interface {
	DictInfoCreate(context.Context, *DictInfo) (*WithID, error)
	DictInfoIndex(context.Context, *DictInfoIndexReq) (*DictInfoIndexResp, error)
	DictInfoUpdate(context.Context, *DictInfo) (*Empty, error)
	DictInfoDelete(context.Context, *WithID) (*Empty, error)
	DictInfoRead(context.Context, *DictInfoReadReq) (*DictInfo, error)
	DictDetailRead(context.Context, *DictDetailReadReq) (*DictDetail, error)
	DictDetailCreate(context.Context, *DictDetail) (*WithID, error)
	DictDetailMultiCreate(context.Context, *DictDetailMultiCreateReq) (*Empty, error)
	DictDetailIndex(context.Context, *DictDetailIndexReq) (*DictDetailIndexResp, error)
	DictDetailUpdate(context.Context, *DictDetail) (*Empty, error)
	DictDetailDelete(context.Context, *WithID) (*Empty, error)
	DictMultiImport(context.Context, *DictMultiImportReq) (*DictMultiImportResp, error)
	DictMultiExport(context.Context, *DictMultiExportReq) (*DictMultiExportResp, error)
	mustEmbedUnimplementedDictManageServer()
}

// UnimplementedDictManageServer must be embedded to have forward compatible implementations.
type UnimplementedDictManageServer struct {
}

func (UnimplementedDictManageServer) DictInfoCreate(context.Context, *DictInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictInfoCreate not implemented")
}
func (UnimplementedDictManageServer) DictInfoIndex(context.Context, *DictInfoIndexReq) (*DictInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictInfoIndex not implemented")
}
func (UnimplementedDictManageServer) DictInfoUpdate(context.Context, *DictInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictInfoUpdate not implemented")
}
func (UnimplementedDictManageServer) DictInfoDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictInfoDelete not implemented")
}
func (UnimplementedDictManageServer) DictInfoRead(context.Context, *DictInfoReadReq) (*DictInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictInfoRead not implemented")
}
func (UnimplementedDictManageServer) DictDetailRead(context.Context, *DictDetailReadReq) (*DictDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDetailRead not implemented")
}
func (UnimplementedDictManageServer) DictDetailCreate(context.Context, *DictDetail) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDetailCreate not implemented")
}
func (UnimplementedDictManageServer) DictDetailMultiCreate(context.Context, *DictDetailMultiCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDetailMultiCreate not implemented")
}
func (UnimplementedDictManageServer) DictDetailIndex(context.Context, *DictDetailIndexReq) (*DictDetailIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDetailIndex not implemented")
}
func (UnimplementedDictManageServer) DictDetailUpdate(context.Context, *DictDetail) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDetailUpdate not implemented")
}
func (UnimplementedDictManageServer) DictDetailDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictDetailDelete not implemented")
}
func (UnimplementedDictManageServer) DictMultiImport(context.Context, *DictMultiImportReq) (*DictMultiImportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictMultiImport not implemented")
}
func (UnimplementedDictManageServer) DictMultiExport(context.Context, *DictMultiExportReq) (*DictMultiExportResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictMultiExport not implemented")
}
func (UnimplementedDictManageServer) mustEmbedUnimplementedDictManageServer() {}

// UnsafeDictManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictManageServer will
// result in compilation errors.
type UnsafeDictManageServer interface {
	mustEmbedUnimplementedDictManageServer()
}

func RegisterDictManageServer(s grpc.ServiceRegistrar, srv DictManageServer) {
	s.RegisterService(&DictManage_ServiceDesc, srv)
}

func _DictManage_DictInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictManageServer).DictInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictManage_DictInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictManageServer).DictInfoCreate(ctx, req.(*DictInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictManage_DictInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictManageServer).DictInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictManage_DictInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictManageServer).DictInfoIndex(ctx, req.(*DictInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictManage_DictInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictManageServer).DictInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictManage_DictInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictManageServer).DictInfoUpdate(ctx, req.(*DictInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictManage_DictInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictManageServer).DictInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictManage_DictInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictManageServer).DictInfoDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictManage_DictInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictInfoReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictManageServer).DictInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictManage_DictInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictManageServer).DictInfoRead(ctx, req.(*DictInfoReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictManage_DictDetailRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictDetailReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictManageServer).DictDetailRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictManage_DictDetailRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictManageServer).DictDetailRead(ctx, req.(*DictDetailReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictManage_DictDetailCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictManageServer).DictDetailCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictManage_DictDetailCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictManageServer).DictDetailCreate(ctx, req.(*DictDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictManage_DictDetailMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictDetailMultiCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictManageServer).DictDetailMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictManage_DictDetailMultiCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictManageServer).DictDetailMultiCreate(ctx, req.(*DictDetailMultiCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictManage_DictDetailIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictDetailIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictManageServer).DictDetailIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictManage_DictDetailIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictManageServer).DictDetailIndex(ctx, req.(*DictDetailIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictManage_DictDetailUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictManageServer).DictDetailUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictManage_DictDetailUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictManageServer).DictDetailUpdate(ctx, req.(*DictDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictManage_DictDetailDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictManageServer).DictDetailDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictManage_DictDetailDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictManageServer).DictDetailDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictManage_DictMultiImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictMultiImportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictManageServer).DictMultiImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictManage_DictMultiImport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictManageServer).DictMultiImport(ctx, req.(*DictMultiImportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictManage_DictMultiExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictMultiExportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictManageServer).DictMultiExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DictManage_DictMultiExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictManageServer).DictMultiExport(ctx, req.(*DictMultiExportReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DictManage_ServiceDesc is the grpc.ServiceDesc for DictManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DictManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.DictManage",
	HandlerType: (*DictManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "dictInfoCreate",
			Handler:    _DictManage_DictInfoCreate_Handler,
		},
		{
			MethodName: "dictInfoIndex",
			Handler:    _DictManage_DictInfoIndex_Handler,
		},
		{
			MethodName: "dictInfoUpdate",
			Handler:    _DictManage_DictInfoUpdate_Handler,
		},
		{
			MethodName: "dictInfoDelete",
			Handler:    _DictManage_DictInfoDelete_Handler,
		},
		{
			MethodName: "dictInfoRead",
			Handler:    _DictManage_DictInfoRead_Handler,
		},
		{
			MethodName: "dictDetailRead",
			Handler:    _DictManage_DictDetailRead_Handler,
		},
		{
			MethodName: "dictDetailCreate",
			Handler:    _DictManage_DictDetailCreate_Handler,
		},
		{
			MethodName: "dictDetailMultiCreate",
			Handler:    _DictManage_DictDetailMultiCreate_Handler,
		},
		{
			MethodName: "dictDetailIndex",
			Handler:    _DictManage_DictDetailIndex_Handler,
		},
		{
			MethodName: "dictDetailUpdate",
			Handler:    _DictManage_DictDetailUpdate_Handler,
		},
		{
			MethodName: "dictDetailDelete",
			Handler:    _DictManage_DictDetailDelete_Handler,
		},
		{
			MethodName: "dictMultiImport",
			Handler:    _DictManage_DictMultiImport_Handler,
		},
		{
			MethodName: "dictMultiExport",
			Handler:    _DictManage_DictMultiExport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sys.proto",
}

const (
	DepartmentManage_DeptInfoRead_FullMethodName        = "/sys.DepartmentManage/deptInfoRead"
	DepartmentManage_DeptInfoCreate_FullMethodName      = "/sys.DepartmentManage/deptInfoCreate"
	DepartmentManage_DeptInfoIndex_FullMethodName       = "/sys.DepartmentManage/deptInfoIndex"
	DepartmentManage_DeptInfoUpdate_FullMethodName      = "/sys.DepartmentManage/deptInfoUpdate"
	DepartmentManage_DeptInfoDelete_FullMethodName      = "/sys.DepartmentManage/deptInfoDelete"
	DepartmentManage_DeptUserIndex_FullMethodName       = "/sys.DepartmentManage/deptUserIndex"
	DepartmentManage_DeptUserMultiDelete_FullMethodName = "/sys.DepartmentManage/deptUserMultiDelete"
	DepartmentManage_DeptUserMultiCreate_FullMethodName = "/sys.DepartmentManage/deptUserMultiCreate"
	DepartmentManage_DeptRoleIndex_FullMethodName       = "/sys.DepartmentManage/deptRoleIndex"
	DepartmentManage_DeptRoleMultiDelete_FullMethodName = "/sys.DepartmentManage/deptRoleMultiDelete"
	DepartmentManage_DeptRoleMultiCreate_FullMethodName = "/sys.DepartmentManage/deptRoleMultiCreate"
	DepartmentManage_DeptSyncJobExecute_FullMethodName  = "/sys.DepartmentManage/deptSyncJobExecute"
	DepartmentManage_DeptSyncJobRead_FullMethodName     = "/sys.DepartmentManage/deptSyncJobRead"
	DepartmentManage_DeptSyncJobCreate_FullMethodName   = "/sys.DepartmentManage/deptSyncJobCreate"
	DepartmentManage_DeptSyncJobIndex_FullMethodName    = "/sys.DepartmentManage/deptSyncJobIndex"
	DepartmentManage_DeptSyncJobUpdate_FullMethodName   = "/sys.DepartmentManage/deptSyncJobUpdate"
	DepartmentManage_DeptSyncJobDelete_FullMethodName   = "/sys.DepartmentManage/deptSyncJobDelete"
)

// DepartmentManageClient is the client API for DepartmentManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepartmentManageClient interface {
	DeptInfoRead(ctx context.Context, in *DeptInfoReadReq, opts ...grpc.CallOption) (*DeptInfo, error)
	DeptInfoCreate(ctx context.Context, in *DeptInfo, opts ...grpc.CallOption) (*WithID, error)
	DeptInfoIndex(ctx context.Context, in *DeptInfoIndexReq, opts ...grpc.CallOption) (*DeptInfoIndexResp, error)
	DeptInfoUpdate(ctx context.Context, in *DeptInfo, opts ...grpc.CallOption) (*Empty, error)
	DeptInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	DeptUserIndex(ctx context.Context, in *DeptUserIndexReq, opts ...grpc.CallOption) (*DeptUserIndexResp, error)
	DeptUserMultiDelete(ctx context.Context, in *DeptUserMultiDeleteReq, opts ...grpc.CallOption) (*Empty, error)
	DeptUserMultiCreate(ctx context.Context, in *DeptUserMultiCreateReq, opts ...grpc.CallOption) (*Empty, error)
	DeptRoleIndex(ctx context.Context, in *DeptRoleIndexReq, opts ...grpc.CallOption) (*DeptRoleIndexResp, error)
	DeptRoleMultiDelete(ctx context.Context, in *DeptRoleMultiSaveReq, opts ...grpc.CallOption) (*Empty, error)
	DeptRoleMultiCreate(ctx context.Context, in *DeptRoleMultiSaveReq, opts ...grpc.CallOption) (*Empty, error)
	DeptSyncJobExecute(ctx context.Context, in *DeptSyncJobExecuteReq, opts ...grpc.CallOption) (*DeptSyncJobExecuteResp, error)
	DeptSyncJobRead(ctx context.Context, in *DeptSyncJobReadReq, opts ...grpc.CallOption) (*DeptSyncJob, error)
	DeptSyncJobCreate(ctx context.Context, in *DeptSyncJob, opts ...grpc.CallOption) (*WithID, error)
	DeptSyncJobIndex(ctx context.Context, in *DeptSyncJobIndexReq, opts ...grpc.CallOption) (*DeptSyncJobIndexResp, error)
	DeptSyncJobUpdate(ctx context.Context, in *DeptSyncJob, opts ...grpc.CallOption) (*Empty, error)
	DeptSyncJobDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
}

type departmentManageClient struct {
	cc grpc.ClientConnInterface
}

func NewDepartmentManageClient(cc grpc.ClientConnInterface) DepartmentManageClient {
	return &departmentManageClient{cc}
}

func (c *departmentManageClient) DeptInfoRead(ctx context.Context, in *DeptInfoReadReq, opts ...grpc.CallOption) (*DeptInfo, error) {
	out := new(DeptInfo)
	err := c.cc.Invoke(ctx, DepartmentManage_DeptInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentManageClient) DeptInfoCreate(ctx context.Context, in *DeptInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, DepartmentManage_DeptInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentManageClient) DeptInfoIndex(ctx context.Context, in *DeptInfoIndexReq, opts ...grpc.CallOption) (*DeptInfoIndexResp, error) {
	out := new(DeptInfoIndexResp)
	err := c.cc.Invoke(ctx, DepartmentManage_DeptInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentManageClient) DeptInfoUpdate(ctx context.Context, in *DeptInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DepartmentManage_DeptInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentManageClient) DeptInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DepartmentManage_DeptInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentManageClient) DeptUserIndex(ctx context.Context, in *DeptUserIndexReq, opts ...grpc.CallOption) (*DeptUserIndexResp, error) {
	out := new(DeptUserIndexResp)
	err := c.cc.Invoke(ctx, DepartmentManage_DeptUserIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentManageClient) DeptUserMultiDelete(ctx context.Context, in *DeptUserMultiDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DepartmentManage_DeptUserMultiDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentManageClient) DeptUserMultiCreate(ctx context.Context, in *DeptUserMultiCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DepartmentManage_DeptUserMultiCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentManageClient) DeptRoleIndex(ctx context.Context, in *DeptRoleIndexReq, opts ...grpc.CallOption) (*DeptRoleIndexResp, error) {
	out := new(DeptRoleIndexResp)
	err := c.cc.Invoke(ctx, DepartmentManage_DeptRoleIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentManageClient) DeptRoleMultiDelete(ctx context.Context, in *DeptRoleMultiSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DepartmentManage_DeptRoleMultiDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentManageClient) DeptRoleMultiCreate(ctx context.Context, in *DeptRoleMultiSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DepartmentManage_DeptRoleMultiCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentManageClient) DeptSyncJobExecute(ctx context.Context, in *DeptSyncJobExecuteReq, opts ...grpc.CallOption) (*DeptSyncJobExecuteResp, error) {
	out := new(DeptSyncJobExecuteResp)
	err := c.cc.Invoke(ctx, DepartmentManage_DeptSyncJobExecute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentManageClient) DeptSyncJobRead(ctx context.Context, in *DeptSyncJobReadReq, opts ...grpc.CallOption) (*DeptSyncJob, error) {
	out := new(DeptSyncJob)
	err := c.cc.Invoke(ctx, DepartmentManage_DeptSyncJobRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentManageClient) DeptSyncJobCreate(ctx context.Context, in *DeptSyncJob, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, DepartmentManage_DeptSyncJobCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentManageClient) DeptSyncJobIndex(ctx context.Context, in *DeptSyncJobIndexReq, opts ...grpc.CallOption) (*DeptSyncJobIndexResp, error) {
	out := new(DeptSyncJobIndexResp)
	err := c.cc.Invoke(ctx, DepartmentManage_DeptSyncJobIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentManageClient) DeptSyncJobUpdate(ctx context.Context, in *DeptSyncJob, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DepartmentManage_DeptSyncJobUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentManageClient) DeptSyncJobDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DepartmentManage_DeptSyncJobDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepartmentManageServer is the server API for DepartmentManage service.
// All implementations must embed UnimplementedDepartmentManageServer
// for forward compatibility
type DepartmentManageServer interface {
	DeptInfoRead(context.Context, *DeptInfoReadReq) (*DeptInfo, error)
	DeptInfoCreate(context.Context, *DeptInfo) (*WithID, error)
	DeptInfoIndex(context.Context, *DeptInfoIndexReq) (*DeptInfoIndexResp, error)
	DeptInfoUpdate(context.Context, *DeptInfo) (*Empty, error)
	DeptInfoDelete(context.Context, *WithID) (*Empty, error)
	DeptUserIndex(context.Context, *DeptUserIndexReq) (*DeptUserIndexResp, error)
	DeptUserMultiDelete(context.Context, *DeptUserMultiDeleteReq) (*Empty, error)
	DeptUserMultiCreate(context.Context, *DeptUserMultiCreateReq) (*Empty, error)
	DeptRoleIndex(context.Context, *DeptRoleIndexReq) (*DeptRoleIndexResp, error)
	DeptRoleMultiDelete(context.Context, *DeptRoleMultiSaveReq) (*Empty, error)
	DeptRoleMultiCreate(context.Context, *DeptRoleMultiSaveReq) (*Empty, error)
	DeptSyncJobExecute(context.Context, *DeptSyncJobExecuteReq) (*DeptSyncJobExecuteResp, error)
	DeptSyncJobRead(context.Context, *DeptSyncJobReadReq) (*DeptSyncJob, error)
	DeptSyncJobCreate(context.Context, *DeptSyncJob) (*WithID, error)
	DeptSyncJobIndex(context.Context, *DeptSyncJobIndexReq) (*DeptSyncJobIndexResp, error)
	DeptSyncJobUpdate(context.Context, *DeptSyncJob) (*Empty, error)
	DeptSyncJobDelete(context.Context, *WithID) (*Empty, error)
	mustEmbedUnimplementedDepartmentManageServer()
}

// UnimplementedDepartmentManageServer must be embedded to have forward compatible implementations.
type UnimplementedDepartmentManageServer struct {
}

func (UnimplementedDepartmentManageServer) DeptInfoRead(context.Context, *DeptInfoReadReq) (*DeptInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptInfoRead not implemented")
}
func (UnimplementedDepartmentManageServer) DeptInfoCreate(context.Context, *DeptInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptInfoCreate not implemented")
}
func (UnimplementedDepartmentManageServer) DeptInfoIndex(context.Context, *DeptInfoIndexReq) (*DeptInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptInfoIndex not implemented")
}
func (UnimplementedDepartmentManageServer) DeptInfoUpdate(context.Context, *DeptInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptInfoUpdate not implemented")
}
func (UnimplementedDepartmentManageServer) DeptInfoDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptInfoDelete not implemented")
}
func (UnimplementedDepartmentManageServer) DeptUserIndex(context.Context, *DeptUserIndexReq) (*DeptUserIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptUserIndex not implemented")
}
func (UnimplementedDepartmentManageServer) DeptUserMultiDelete(context.Context, *DeptUserMultiDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptUserMultiDelete not implemented")
}
func (UnimplementedDepartmentManageServer) DeptUserMultiCreate(context.Context, *DeptUserMultiCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptUserMultiCreate not implemented")
}
func (UnimplementedDepartmentManageServer) DeptRoleIndex(context.Context, *DeptRoleIndexReq) (*DeptRoleIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptRoleIndex not implemented")
}
func (UnimplementedDepartmentManageServer) DeptRoleMultiDelete(context.Context, *DeptRoleMultiSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptRoleMultiDelete not implemented")
}
func (UnimplementedDepartmentManageServer) DeptRoleMultiCreate(context.Context, *DeptRoleMultiSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptRoleMultiCreate not implemented")
}
func (UnimplementedDepartmentManageServer) DeptSyncJobExecute(context.Context, *DeptSyncJobExecuteReq) (*DeptSyncJobExecuteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptSyncJobExecute not implemented")
}
func (UnimplementedDepartmentManageServer) DeptSyncJobRead(context.Context, *DeptSyncJobReadReq) (*DeptSyncJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptSyncJobRead not implemented")
}
func (UnimplementedDepartmentManageServer) DeptSyncJobCreate(context.Context, *DeptSyncJob) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptSyncJobCreate not implemented")
}
func (UnimplementedDepartmentManageServer) DeptSyncJobIndex(context.Context, *DeptSyncJobIndexReq) (*DeptSyncJobIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptSyncJobIndex not implemented")
}
func (UnimplementedDepartmentManageServer) DeptSyncJobUpdate(context.Context, *DeptSyncJob) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptSyncJobUpdate not implemented")
}
func (UnimplementedDepartmentManageServer) DeptSyncJobDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptSyncJobDelete not implemented")
}
func (UnimplementedDepartmentManageServer) mustEmbedUnimplementedDepartmentManageServer() {}

// UnsafeDepartmentManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepartmentManageServer will
// result in compilation errors.
type UnsafeDepartmentManageServer interface {
	mustEmbedUnimplementedDepartmentManageServer()
}

func RegisterDepartmentManageServer(s grpc.ServiceRegistrar, srv DepartmentManageServer) {
	s.RegisterService(&DepartmentManage_ServiceDesc, srv)
}

func _DepartmentManage_DeptInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptInfoReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentManageServer).DeptInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentManage_DeptInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentManageServer).DeptInfoRead(ctx, req.(*DeptInfoReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentManage_DeptInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentManageServer).DeptInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentManage_DeptInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentManageServer).DeptInfoCreate(ctx, req.(*DeptInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentManage_DeptInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentManageServer).DeptInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentManage_DeptInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentManageServer).DeptInfoIndex(ctx, req.(*DeptInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentManage_DeptInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentManageServer).DeptInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentManage_DeptInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentManageServer).DeptInfoUpdate(ctx, req.(*DeptInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentManage_DeptInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentManageServer).DeptInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentManage_DeptInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentManageServer).DeptInfoDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentManage_DeptUserIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptUserIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentManageServer).DeptUserIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentManage_DeptUserIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentManageServer).DeptUserIndex(ctx, req.(*DeptUserIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentManage_DeptUserMultiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptUserMultiDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentManageServer).DeptUserMultiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentManage_DeptUserMultiDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentManageServer).DeptUserMultiDelete(ctx, req.(*DeptUserMultiDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentManage_DeptUserMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptUserMultiCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentManageServer).DeptUserMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentManage_DeptUserMultiCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentManageServer).DeptUserMultiCreate(ctx, req.(*DeptUserMultiCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentManage_DeptRoleIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptRoleIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentManageServer).DeptRoleIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentManage_DeptRoleIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentManageServer).DeptRoleIndex(ctx, req.(*DeptRoleIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentManage_DeptRoleMultiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptRoleMultiSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentManageServer).DeptRoleMultiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentManage_DeptRoleMultiDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentManageServer).DeptRoleMultiDelete(ctx, req.(*DeptRoleMultiSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentManage_DeptRoleMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptRoleMultiSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentManageServer).DeptRoleMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentManage_DeptRoleMultiCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentManageServer).DeptRoleMultiCreate(ctx, req.(*DeptRoleMultiSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentManage_DeptSyncJobExecute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptSyncJobExecuteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentManageServer).DeptSyncJobExecute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentManage_DeptSyncJobExecute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentManageServer).DeptSyncJobExecute(ctx, req.(*DeptSyncJobExecuteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentManage_DeptSyncJobRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptSyncJobReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentManageServer).DeptSyncJobRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentManage_DeptSyncJobRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentManageServer).DeptSyncJobRead(ctx, req.(*DeptSyncJobReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentManage_DeptSyncJobCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptSyncJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentManageServer).DeptSyncJobCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentManage_DeptSyncJobCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentManageServer).DeptSyncJobCreate(ctx, req.(*DeptSyncJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentManage_DeptSyncJobIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptSyncJobIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentManageServer).DeptSyncJobIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentManage_DeptSyncJobIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentManageServer).DeptSyncJobIndex(ctx, req.(*DeptSyncJobIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentManage_DeptSyncJobUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptSyncJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentManageServer).DeptSyncJobUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentManage_DeptSyncJobUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentManageServer).DeptSyncJobUpdate(ctx, req.(*DeptSyncJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentManage_DeptSyncJobDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentManageServer).DeptSyncJobDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepartmentManage_DeptSyncJobDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentManageServer).DeptSyncJobDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

// DepartmentManage_ServiceDesc is the grpc.ServiceDesc for DepartmentManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DepartmentManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.DepartmentManage",
	HandlerType: (*DepartmentManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "deptInfoRead",
			Handler:    _DepartmentManage_DeptInfoRead_Handler,
		},
		{
			MethodName: "deptInfoCreate",
			Handler:    _DepartmentManage_DeptInfoCreate_Handler,
		},
		{
			MethodName: "deptInfoIndex",
			Handler:    _DepartmentManage_DeptInfoIndex_Handler,
		},
		{
			MethodName: "deptInfoUpdate",
			Handler:    _DepartmentManage_DeptInfoUpdate_Handler,
		},
		{
			MethodName: "deptInfoDelete",
			Handler:    _DepartmentManage_DeptInfoDelete_Handler,
		},
		{
			MethodName: "deptUserIndex",
			Handler:    _DepartmentManage_DeptUserIndex_Handler,
		},
		{
			MethodName: "deptUserMultiDelete",
			Handler:    _DepartmentManage_DeptUserMultiDelete_Handler,
		},
		{
			MethodName: "deptUserMultiCreate",
			Handler:    _DepartmentManage_DeptUserMultiCreate_Handler,
		},
		{
			MethodName: "deptRoleIndex",
			Handler:    _DepartmentManage_DeptRoleIndex_Handler,
		},
		{
			MethodName: "deptRoleMultiDelete",
			Handler:    _DepartmentManage_DeptRoleMultiDelete_Handler,
		},
		{
			MethodName: "deptRoleMultiCreate",
			Handler:    _DepartmentManage_DeptRoleMultiCreate_Handler,
		},
		{
			MethodName: "deptSyncJobExecute",
			Handler:    _DepartmentManage_DeptSyncJobExecute_Handler,
		},
		{
			MethodName: "deptSyncJobRead",
			Handler:    _DepartmentManage_DeptSyncJobRead_Handler,
		},
		{
			MethodName: "deptSyncJobCreate",
			Handler:    _DepartmentManage_DeptSyncJobCreate_Handler,
		},
		{
			MethodName: "deptSyncJobIndex",
			Handler:    _DepartmentManage_DeptSyncJobIndex_Handler,
		},
		{
			MethodName: "deptSyncJobUpdate",
			Handler:    _DepartmentManage_DeptSyncJobUpdate_Handler,
		},
		{
			MethodName: "deptSyncJobDelete",
			Handler:    _DepartmentManage_DeptSyncJobDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sys.proto",
}

const (
	Common_Config_FullMethodName              = "/sys.Common/config"
	Common_QrCodeRead_FullMethodName          = "/sys.Common/qrCodeRead"
	Common_WeatherRead_FullMethodName         = "/sys.Common/weatherRead"
	Common_SlotInfoIndex_FullMethodName       = "/sys.Common/slotInfoIndex"
	Common_SlotInfoCreate_FullMethodName      = "/sys.Common/slotInfoCreate"
	Common_SlotInfoMultiCreate_FullMethodName = "/sys.Common/slotInfoMultiCreate"
	Common_SlotInfoUpdate_FullMethodName      = "/sys.Common/slotInfoUpdate"
	Common_SlotInfoDelete_FullMethodName      = "/sys.Common/slotInfoDelete"
	Common_SlotInfoRead_FullMethodName        = "/sys.Common/slotInfoRead"
	Common_ServiceInfoRead_FullMethodName     = "/sys.Common/serviceInfoRead"
	Common_ServiceInfoUpdate_FullMethodName   = "/sys.Common/serviceInfoUpdate"
	Common_ThirdDeptRead_FullMethodName       = "/sys.Common/thirdDeptRead"
	Common_ThirdDeptIndex_FullMethodName      = "/sys.Common/thirdDeptIndex"
)

// CommonClient is the client API for Common service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommonClient interface {
	Config(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConfigResp, error)
	QrCodeRead(ctx context.Context, in *QRCodeReadReq, opts ...grpc.CallOption) (*QRCodeReadResp, error)
	WeatherRead(ctx context.Context, in *WeatherReadReq, opts ...grpc.CallOption) (*WeatherReadResp, error)
	SlotInfoIndex(ctx context.Context, in *SlotInfoIndexReq, opts ...grpc.CallOption) (*SlotInfoIndexResp, error)
	SlotInfoCreate(ctx context.Context, in *SlotInfo, opts ...grpc.CallOption) (*WithID, error)
	SlotInfoMultiCreate(ctx context.Context, in *SlotInfoMultiCreateReq, opts ...grpc.CallOption) (*Empty, error)
	SlotInfoUpdate(ctx context.Context, in *SlotInfo, opts ...grpc.CallOption) (*Empty, error)
	SlotInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	SlotInfoRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*SlotInfo, error)
	ServiceInfoRead(ctx context.Context, in *WithCode, opts ...grpc.CallOption) (*ServiceInfo, error)
	ServiceInfoUpdate(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*Empty, error)
	ThirdDeptRead(ctx context.Context, in *ThirdDeptInfoReadReq, opts ...grpc.CallOption) (*DeptInfo, error)
	ThirdDeptIndex(ctx context.Context, in *ThirdDeptInfoIndexReq, opts ...grpc.CallOption) (*DeptInfoIndexResp, error)
}

type commonClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonClient(cc grpc.ClientConnInterface) CommonClient {
	return &commonClient{cc}
}

func (c *commonClient) Config(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConfigResp, error) {
	out := new(ConfigResp)
	err := c.cc.Invoke(ctx, Common_Config_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonClient) QrCodeRead(ctx context.Context, in *QRCodeReadReq, opts ...grpc.CallOption) (*QRCodeReadResp, error) {
	out := new(QRCodeReadResp)
	err := c.cc.Invoke(ctx, Common_QrCodeRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonClient) WeatherRead(ctx context.Context, in *WeatherReadReq, opts ...grpc.CallOption) (*WeatherReadResp, error) {
	out := new(WeatherReadResp)
	err := c.cc.Invoke(ctx, Common_WeatherRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonClient) SlotInfoIndex(ctx context.Context, in *SlotInfoIndexReq, opts ...grpc.CallOption) (*SlotInfoIndexResp, error) {
	out := new(SlotInfoIndexResp)
	err := c.cc.Invoke(ctx, Common_SlotInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonClient) SlotInfoCreate(ctx context.Context, in *SlotInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, Common_SlotInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonClient) SlotInfoMultiCreate(ctx context.Context, in *SlotInfoMultiCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Common_SlotInfoMultiCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonClient) SlotInfoUpdate(ctx context.Context, in *SlotInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Common_SlotInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonClient) SlotInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Common_SlotInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonClient) SlotInfoRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*SlotInfo, error) {
	out := new(SlotInfo)
	err := c.cc.Invoke(ctx, Common_SlotInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonClient) ServiceInfoRead(ctx context.Context, in *WithCode, opts ...grpc.CallOption) (*ServiceInfo, error) {
	out := new(ServiceInfo)
	err := c.cc.Invoke(ctx, Common_ServiceInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonClient) ServiceInfoUpdate(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Common_ServiceInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonClient) ThirdDeptRead(ctx context.Context, in *ThirdDeptInfoReadReq, opts ...grpc.CallOption) (*DeptInfo, error) {
	out := new(DeptInfo)
	err := c.cc.Invoke(ctx, Common_ThirdDeptRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonClient) ThirdDeptIndex(ctx context.Context, in *ThirdDeptInfoIndexReq, opts ...grpc.CallOption) (*DeptInfoIndexResp, error) {
	out := new(DeptInfoIndexResp)
	err := c.cc.Invoke(ctx, Common_ThirdDeptIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonServer is the server API for Common service.
// All implementations must embed UnimplementedCommonServer
// for forward compatibility
type CommonServer interface {
	Config(context.Context, *Empty) (*ConfigResp, error)
	QrCodeRead(context.Context, *QRCodeReadReq) (*QRCodeReadResp, error)
	WeatherRead(context.Context, *WeatherReadReq) (*WeatherReadResp, error)
	SlotInfoIndex(context.Context, *SlotInfoIndexReq) (*SlotInfoIndexResp, error)
	SlotInfoCreate(context.Context, *SlotInfo) (*WithID, error)
	SlotInfoMultiCreate(context.Context, *SlotInfoMultiCreateReq) (*Empty, error)
	SlotInfoUpdate(context.Context, *SlotInfo) (*Empty, error)
	SlotInfoDelete(context.Context, *WithID) (*Empty, error)
	SlotInfoRead(context.Context, *WithID) (*SlotInfo, error)
	ServiceInfoRead(context.Context, *WithCode) (*ServiceInfo, error)
	ServiceInfoUpdate(context.Context, *ServiceInfo) (*Empty, error)
	ThirdDeptRead(context.Context, *ThirdDeptInfoReadReq) (*DeptInfo, error)
	ThirdDeptIndex(context.Context, *ThirdDeptInfoIndexReq) (*DeptInfoIndexResp, error)
	mustEmbedUnimplementedCommonServer()
}

// UnimplementedCommonServer must be embedded to have forward compatible implementations.
type UnimplementedCommonServer struct {
}

func (UnimplementedCommonServer) Config(context.Context, *Empty) (*ConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedCommonServer) QrCodeRead(context.Context, *QRCodeReadReq) (*QRCodeReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QrCodeRead not implemented")
}
func (UnimplementedCommonServer) WeatherRead(context.Context, *WeatherReadReq) (*WeatherReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeatherRead not implemented")
}
func (UnimplementedCommonServer) SlotInfoIndex(context.Context, *SlotInfoIndexReq) (*SlotInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlotInfoIndex not implemented")
}
func (UnimplementedCommonServer) SlotInfoCreate(context.Context, *SlotInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlotInfoCreate not implemented")
}
func (UnimplementedCommonServer) SlotInfoMultiCreate(context.Context, *SlotInfoMultiCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlotInfoMultiCreate not implemented")
}
func (UnimplementedCommonServer) SlotInfoUpdate(context.Context, *SlotInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlotInfoUpdate not implemented")
}
func (UnimplementedCommonServer) SlotInfoDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlotInfoDelete not implemented")
}
func (UnimplementedCommonServer) SlotInfoRead(context.Context, *WithID) (*SlotInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlotInfoRead not implemented")
}
func (UnimplementedCommonServer) ServiceInfoRead(context.Context, *WithCode) (*ServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceInfoRead not implemented")
}
func (UnimplementedCommonServer) ServiceInfoUpdate(context.Context, *ServiceInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceInfoUpdate not implemented")
}
func (UnimplementedCommonServer) ThirdDeptRead(context.Context, *ThirdDeptInfoReadReq) (*DeptInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThirdDeptRead not implemented")
}
func (UnimplementedCommonServer) ThirdDeptIndex(context.Context, *ThirdDeptInfoIndexReq) (*DeptInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThirdDeptIndex not implemented")
}
func (UnimplementedCommonServer) mustEmbedUnimplementedCommonServer() {}

// UnsafeCommonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommonServer will
// result in compilation errors.
type UnsafeCommonServer interface {
	mustEmbedUnimplementedCommonServer()
}

func RegisterCommonServer(s grpc.ServiceRegistrar, srv CommonServer) {
	s.RegisterService(&Common_ServiceDesc, srv)
}

func _Common_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Common_Config_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).Config(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Common_QrCodeRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QRCodeReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).QrCodeRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Common_QrCodeRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).QrCodeRead(ctx, req.(*QRCodeReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Common_WeatherRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeatherReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).WeatherRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Common_WeatherRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).WeatherRead(ctx, req.(*WeatherReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Common_SlotInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).SlotInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Common_SlotInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).SlotInfoIndex(ctx, req.(*SlotInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Common_SlotInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).SlotInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Common_SlotInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).SlotInfoCreate(ctx, req.(*SlotInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Common_SlotInfoMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotInfoMultiCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).SlotInfoMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Common_SlotInfoMultiCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).SlotInfoMultiCreate(ctx, req.(*SlotInfoMultiCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Common_SlotInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).SlotInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Common_SlotInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).SlotInfoUpdate(ctx, req.(*SlotInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Common_SlotInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).SlotInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Common_SlotInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).SlotInfoDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Common_SlotInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).SlotInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Common_SlotInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).SlotInfoRead(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Common_ServiceInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).ServiceInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Common_ServiceInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).ServiceInfoRead(ctx, req.(*WithCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Common_ServiceInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).ServiceInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Common_ServiceInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).ServiceInfoUpdate(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Common_ThirdDeptRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThirdDeptInfoReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).ThirdDeptRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Common_ThirdDeptRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).ThirdDeptRead(ctx, req.(*ThirdDeptInfoReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Common_ThirdDeptIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThirdDeptInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonServer).ThirdDeptIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Common_ThirdDeptIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonServer).ThirdDeptIndex(ctx, req.(*ThirdDeptInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Common_ServiceDesc is the grpc.ServiceDesc for Common service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Common_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.Common",
	HandlerType: (*CommonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "config",
			Handler:    _Common_Config_Handler,
		},
		{
			MethodName: "qrCodeRead",
			Handler:    _Common_QrCodeRead_Handler,
		},
		{
			MethodName: "weatherRead",
			Handler:    _Common_WeatherRead_Handler,
		},
		{
			MethodName: "slotInfoIndex",
			Handler:    _Common_SlotInfoIndex_Handler,
		},
		{
			MethodName: "slotInfoCreate",
			Handler:    _Common_SlotInfoCreate_Handler,
		},
		{
			MethodName: "slotInfoMultiCreate",
			Handler:    _Common_SlotInfoMultiCreate_Handler,
		},
		{
			MethodName: "slotInfoUpdate",
			Handler:    _Common_SlotInfoUpdate_Handler,
		},
		{
			MethodName: "slotInfoDelete",
			Handler:    _Common_SlotInfoDelete_Handler,
		},
		{
			MethodName: "slotInfoRead",
			Handler:    _Common_SlotInfoRead_Handler,
		},
		{
			MethodName: "serviceInfoRead",
			Handler:    _Common_ServiceInfoRead_Handler,
		},
		{
			MethodName: "serviceInfoUpdate",
			Handler:    _Common_ServiceInfoUpdate_Handler,
		},
		{
			MethodName: "thirdDeptRead",
			Handler:    _Common_ThirdDeptRead_Handler,
		},
		{
			MethodName: "thirdDeptIndex",
			Handler:    _Common_ThirdDeptIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sys.proto",
}

const (
	Log_LoginLogIndex_FullMethodName  = "/sys.Log/loginLogIndex"
	Log_OperLogIndex_FullMethodName   = "/sys.Log/operLogIndex"
	Log_LoginLogCreate_FullMethodName = "/sys.Log/loginLogCreate"
	Log_OperLogCreate_FullMethodName  = "/sys.Log/operLogCreate"
)

// LogClient is the client API for Log service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogClient interface {
	LoginLogIndex(ctx context.Context, in *LoginLogIndexReq, opts ...grpc.CallOption) (*LoginLogIndexResp, error)
	OperLogIndex(ctx context.Context, in *OperLogIndexReq, opts ...grpc.CallOption) (*OperLogIndexResp, error)
	LoginLogCreate(ctx context.Context, in *LoginLogCreateReq, opts ...grpc.CallOption) (*Empty, error)
	OperLogCreate(ctx context.Context, in *OperLogCreateReq, opts ...grpc.CallOption) (*Empty, error)
}

type logClient struct {
	cc grpc.ClientConnInterface
}

func NewLogClient(cc grpc.ClientConnInterface) LogClient {
	return &logClient{cc}
}

func (c *logClient) LoginLogIndex(ctx context.Context, in *LoginLogIndexReq, opts ...grpc.CallOption) (*LoginLogIndexResp, error) {
	out := new(LoginLogIndexResp)
	err := c.cc.Invoke(ctx, Log_LoginLogIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) OperLogIndex(ctx context.Context, in *OperLogIndexReq, opts ...grpc.CallOption) (*OperLogIndexResp, error) {
	out := new(OperLogIndexResp)
	err := c.cc.Invoke(ctx, Log_OperLogIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) LoginLogCreate(ctx context.Context, in *LoginLogCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Log_LoginLogCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) OperLogCreate(ctx context.Context, in *OperLogCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Log_OperLogCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServer is the server API for Log service.
// All implementations must embed UnimplementedLogServer
// for forward compatibility
type LogServer interface {
	LoginLogIndex(context.Context, *LoginLogIndexReq) (*LoginLogIndexResp, error)
	OperLogIndex(context.Context, *OperLogIndexReq) (*OperLogIndexResp, error)
	LoginLogCreate(context.Context, *LoginLogCreateReq) (*Empty, error)
	OperLogCreate(context.Context, *OperLogCreateReq) (*Empty, error)
	mustEmbedUnimplementedLogServer()
}

// UnimplementedLogServer must be embedded to have forward compatible implementations.
type UnimplementedLogServer struct {
}

func (UnimplementedLogServer) LoginLogIndex(context.Context, *LoginLogIndexReq) (*LoginLogIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginLogIndex not implemented")
}
func (UnimplementedLogServer) OperLogIndex(context.Context, *OperLogIndexReq) (*OperLogIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperLogIndex not implemented")
}
func (UnimplementedLogServer) LoginLogCreate(context.Context, *LoginLogCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginLogCreate not implemented")
}
func (UnimplementedLogServer) OperLogCreate(context.Context, *OperLogCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperLogCreate not implemented")
}
func (UnimplementedLogServer) mustEmbedUnimplementedLogServer() {}

// UnsafeLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServer will
// result in compilation errors.
type UnsafeLogServer interface {
	mustEmbedUnimplementedLogServer()
}

func RegisterLogServer(s grpc.ServiceRegistrar, srv LogServer) {
	s.RegisterService(&Log_ServiceDesc, srv)
}

func _Log_LoginLogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginLogIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).LoginLogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Log_LoginLogIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).LoginLogIndex(ctx, req.(*LoginLogIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_OperLogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperLogIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).OperLogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Log_OperLogIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).OperLogIndex(ctx, req.(*OperLogIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_LoginLogCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginLogCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).LoginLogCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Log_LoginLogCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).LoginLogCreate(ctx, req.(*LoginLogCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_OperLogCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperLogCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).OperLogCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Log_OperLogCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).OperLogCreate(ctx, req.(*OperLogCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Log_ServiceDesc is the grpc.ServiceDesc for Log service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Log_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.Log",
	HandlerType: (*LogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "loginLogIndex",
			Handler:    _Log_LoginLogIndex_Handler,
		},
		{
			MethodName: "operLogIndex",
			Handler:    _Log_OperLogIndex_Handler,
		},
		{
			MethodName: "loginLogCreate",
			Handler:    _Log_LoginLogCreate_Handler,
		},
		{
			MethodName: "operLogCreate",
			Handler:    _Log_OperLogCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sys.proto",
}

const (
	ProjectManage_ProjectInfoCreate_FullMethodName    = "/sys.ProjectManage/projectInfoCreate"
	ProjectManage_ProjectInfoUpdate_FullMethodName    = "/sys.ProjectManage/projectInfoUpdate"
	ProjectManage_ProjectInfoDelete_FullMethodName    = "/sys.ProjectManage/projectInfoDelete"
	ProjectManage_ProjectInfoRead_FullMethodName      = "/sys.ProjectManage/projectInfoRead"
	ProjectManage_ProjectInfoIndex_FullMethodName     = "/sys.ProjectManage/projectInfoIndex"
	ProjectManage_ProjectProfileRead_FullMethodName   = "/sys.ProjectManage/projectProfileRead"
	ProjectManage_ProjectProfileUpdate_FullMethodName = "/sys.ProjectManage/projectProfileUpdate"
	ProjectManage_ProjectProfileIndex_FullMethodName  = "/sys.ProjectManage/projectProfileIndex"
)

// ProjectManageClient is the client API for ProjectManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectManageClient interface {
	// 新增项目
	ProjectInfoCreate(ctx context.Context, in *ProjectInfo, opts ...grpc.CallOption) (*ProjectWithID, error)
	// 更新项目
	ProjectInfoUpdate(ctx context.Context, in *ProjectInfo, opts ...grpc.CallOption) (*Empty, error)
	// 删除项目
	ProjectInfoDelete(ctx context.Context, in *ProjectWithID, opts ...grpc.CallOption) (*Empty, error)
	// 获取项目信息详情
	ProjectInfoRead(ctx context.Context, in *ProjectWithID, opts ...grpc.CallOption) (*ProjectInfo, error)
	// 获取项目信息列表
	ProjectInfoIndex(ctx context.Context, in *ProjectInfoIndexReq, opts ...grpc.CallOption) (*ProjectInfoIndexResp, error)
	ProjectProfileRead(ctx context.Context, in *ProjectProfileReadReq, opts ...grpc.CallOption) (*ProjectProfile, error)
	ProjectProfileUpdate(ctx context.Context, in *ProjectProfile, opts ...grpc.CallOption) (*Empty, error)
	ProjectProfileIndex(ctx context.Context, in *ProjectProfileIndexReq, opts ...grpc.CallOption) (*ProjectProfileIndexResp, error)
}

type projectManageClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectManageClient(cc grpc.ClientConnInterface) ProjectManageClient {
	return &projectManageClient{cc}
}

func (c *projectManageClient) ProjectInfoCreate(ctx context.Context, in *ProjectInfo, opts ...grpc.CallOption) (*ProjectWithID, error) {
	out := new(ProjectWithID)
	err := c.cc.Invoke(ctx, ProjectManage_ProjectInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectManageClient) ProjectInfoUpdate(ctx context.Context, in *ProjectInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProjectManage_ProjectInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectManageClient) ProjectInfoDelete(ctx context.Context, in *ProjectWithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProjectManage_ProjectInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectManageClient) ProjectInfoRead(ctx context.Context, in *ProjectWithID, opts ...grpc.CallOption) (*ProjectInfo, error) {
	out := new(ProjectInfo)
	err := c.cc.Invoke(ctx, ProjectManage_ProjectInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectManageClient) ProjectInfoIndex(ctx context.Context, in *ProjectInfoIndexReq, opts ...grpc.CallOption) (*ProjectInfoIndexResp, error) {
	out := new(ProjectInfoIndexResp)
	err := c.cc.Invoke(ctx, ProjectManage_ProjectInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectManageClient) ProjectProfileRead(ctx context.Context, in *ProjectProfileReadReq, opts ...grpc.CallOption) (*ProjectProfile, error) {
	out := new(ProjectProfile)
	err := c.cc.Invoke(ctx, ProjectManage_ProjectProfileRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectManageClient) ProjectProfileUpdate(ctx context.Context, in *ProjectProfile, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProjectManage_ProjectProfileUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectManageClient) ProjectProfileIndex(ctx context.Context, in *ProjectProfileIndexReq, opts ...grpc.CallOption) (*ProjectProfileIndexResp, error) {
	out := new(ProjectProfileIndexResp)
	err := c.cc.Invoke(ctx, ProjectManage_ProjectProfileIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectManageServer is the server API for ProjectManage service.
// All implementations must embed UnimplementedProjectManageServer
// for forward compatibility
type ProjectManageServer interface {
	// 新增项目
	ProjectInfoCreate(context.Context, *ProjectInfo) (*ProjectWithID, error)
	// 更新项目
	ProjectInfoUpdate(context.Context, *ProjectInfo) (*Empty, error)
	// 删除项目
	ProjectInfoDelete(context.Context, *ProjectWithID) (*Empty, error)
	// 获取项目信息详情
	ProjectInfoRead(context.Context, *ProjectWithID) (*ProjectInfo, error)
	// 获取项目信息列表
	ProjectInfoIndex(context.Context, *ProjectInfoIndexReq) (*ProjectInfoIndexResp, error)
	ProjectProfileRead(context.Context, *ProjectProfileReadReq) (*ProjectProfile, error)
	ProjectProfileUpdate(context.Context, *ProjectProfile) (*Empty, error)
	ProjectProfileIndex(context.Context, *ProjectProfileIndexReq) (*ProjectProfileIndexResp, error)
	mustEmbedUnimplementedProjectManageServer()
}

// UnimplementedProjectManageServer must be embedded to have forward compatible implementations.
type UnimplementedProjectManageServer struct {
}

func (UnimplementedProjectManageServer) ProjectInfoCreate(context.Context, *ProjectInfo) (*ProjectWithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectInfoCreate not implemented")
}
func (UnimplementedProjectManageServer) ProjectInfoUpdate(context.Context, *ProjectInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectInfoUpdate not implemented")
}
func (UnimplementedProjectManageServer) ProjectInfoDelete(context.Context, *ProjectWithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectInfoDelete not implemented")
}
func (UnimplementedProjectManageServer) ProjectInfoRead(context.Context, *ProjectWithID) (*ProjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectInfoRead not implemented")
}
func (UnimplementedProjectManageServer) ProjectInfoIndex(context.Context, *ProjectInfoIndexReq) (*ProjectInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectInfoIndex not implemented")
}
func (UnimplementedProjectManageServer) ProjectProfileRead(context.Context, *ProjectProfileReadReq) (*ProjectProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectProfileRead not implemented")
}
func (UnimplementedProjectManageServer) ProjectProfileUpdate(context.Context, *ProjectProfile) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectProfileUpdate not implemented")
}
func (UnimplementedProjectManageServer) ProjectProfileIndex(context.Context, *ProjectProfileIndexReq) (*ProjectProfileIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectProfileIndex not implemented")
}
func (UnimplementedProjectManageServer) mustEmbedUnimplementedProjectManageServer() {}

// UnsafeProjectManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectManageServer will
// result in compilation errors.
type UnsafeProjectManageServer interface {
	mustEmbedUnimplementedProjectManageServer()
}

func RegisterProjectManageServer(s grpc.ServiceRegistrar, srv ProjectManageServer) {
	s.RegisterService(&ProjectManage_ServiceDesc, srv)
}

func _ProjectManage_ProjectInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectManageServer).ProjectInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectManage_ProjectInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectManageServer).ProjectInfoCreate(ctx, req.(*ProjectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectManage_ProjectInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectManageServer).ProjectInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectManage_ProjectInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectManageServer).ProjectInfoUpdate(ctx, req.(*ProjectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectManage_ProjectInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectWithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectManageServer).ProjectInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectManage_ProjectInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectManageServer).ProjectInfoDelete(ctx, req.(*ProjectWithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectManage_ProjectInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectWithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectManageServer).ProjectInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectManage_ProjectInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectManageServer).ProjectInfoRead(ctx, req.(*ProjectWithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectManage_ProjectInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectManageServer).ProjectInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectManage_ProjectInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectManageServer).ProjectInfoIndex(ctx, req.(*ProjectInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectManage_ProjectProfileRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectProfileReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectManageServer).ProjectProfileRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectManage_ProjectProfileRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectManageServer).ProjectProfileRead(ctx, req.(*ProjectProfileReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectManage_ProjectProfileUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectManageServer).ProjectProfileUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectManage_ProjectProfileUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectManageServer).ProjectProfileUpdate(ctx, req.(*ProjectProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectManage_ProjectProfileIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectProfileIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectManageServer).ProjectProfileIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectManage_ProjectProfileIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectManageServer).ProjectProfileIndex(ctx, req.(*ProjectProfileIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectManage_ServiceDesc is the grpc.ServiceDesc for ProjectManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.ProjectManage",
	HandlerType: (*ProjectManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "projectInfoCreate",
			Handler:    _ProjectManage_ProjectInfoCreate_Handler,
		},
		{
			MethodName: "projectInfoUpdate",
			Handler:    _ProjectManage_ProjectInfoUpdate_Handler,
		},
		{
			MethodName: "projectInfoDelete",
			Handler:    _ProjectManage_ProjectInfoDelete_Handler,
		},
		{
			MethodName: "projectInfoRead",
			Handler:    _ProjectManage_ProjectInfoRead_Handler,
		},
		{
			MethodName: "projectInfoIndex",
			Handler:    _ProjectManage_ProjectInfoIndex_Handler,
		},
		{
			MethodName: "projectProfileRead",
			Handler:    _ProjectManage_ProjectProfileRead_Handler,
		},
		{
			MethodName: "projectProfileUpdate",
			Handler:    _ProjectManage_ProjectProfileUpdate_Handler,
		},
		{
			MethodName: "projectProfileIndex",
			Handler:    _ProjectManage_ProjectProfileIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sys.proto",
}

const (
	AreaManage_AreaInfoCreate_FullMethodName    = "/sys.AreaManage/areaInfoCreate"
	AreaManage_AreaInfoUpdate_FullMethodName    = "/sys.AreaManage/areaInfoUpdate"
	AreaManage_AreaInfoDelete_FullMethodName    = "/sys.AreaManage/areaInfoDelete"
	AreaManage_AreaInfoRead_FullMethodName      = "/sys.AreaManage/areaInfoRead"
	AreaManage_AreaInfoIndex_FullMethodName     = "/sys.AreaManage/areaInfoIndex"
	AreaManage_AreaProfileRead_FullMethodName   = "/sys.AreaManage/areaProfileRead"
	AreaManage_AreaProfileUpdate_FullMethodName = "/sys.AreaManage/areaProfileUpdate"
	AreaManage_AreaProfileIndex_FullMethodName  = "/sys.AreaManage/areaProfileIndex"
)

// AreaManageClient is the client API for AreaManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AreaManageClient interface {
	// 新增区域
	AreaInfoCreate(ctx context.Context, in *AreaInfo, opts ...grpc.CallOption) (*AreaWithID, error)
	// 更新区域
	AreaInfoUpdate(ctx context.Context, in *AreaInfo, opts ...grpc.CallOption) (*Empty, error)
	// 删除区域
	AreaInfoDelete(ctx context.Context, in *AreaWithID, opts ...grpc.CallOption) (*Empty, error)
	// 获取区域信息详情
	AreaInfoRead(ctx context.Context, in *AreaInfoReadReq, opts ...grpc.CallOption) (*AreaInfo, error)
	// 获取区域信息列表
	AreaInfoIndex(ctx context.Context, in *AreaInfoIndexReq, opts ...grpc.CallOption) (*AreaInfoIndexResp, error)
	AreaProfileRead(ctx context.Context, in *AreaProfileReadReq, opts ...grpc.CallOption) (*AreaProfile, error)
	AreaProfileUpdate(ctx context.Context, in *AreaProfile, opts ...grpc.CallOption) (*Empty, error)
	AreaProfileIndex(ctx context.Context, in *AreaProfileIndexReq, opts ...grpc.CallOption) (*AreaProfileIndexResp, error)
}

type areaManageClient struct {
	cc grpc.ClientConnInterface
}

func NewAreaManageClient(cc grpc.ClientConnInterface) AreaManageClient {
	return &areaManageClient{cc}
}

func (c *areaManageClient) AreaInfoCreate(ctx context.Context, in *AreaInfo, opts ...grpc.CallOption) (*AreaWithID, error) {
	out := new(AreaWithID)
	err := c.cc.Invoke(ctx, AreaManage_AreaInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaManageClient) AreaInfoUpdate(ctx context.Context, in *AreaInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AreaManage_AreaInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaManageClient) AreaInfoDelete(ctx context.Context, in *AreaWithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AreaManage_AreaInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaManageClient) AreaInfoRead(ctx context.Context, in *AreaInfoReadReq, opts ...grpc.CallOption) (*AreaInfo, error) {
	out := new(AreaInfo)
	err := c.cc.Invoke(ctx, AreaManage_AreaInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaManageClient) AreaInfoIndex(ctx context.Context, in *AreaInfoIndexReq, opts ...grpc.CallOption) (*AreaInfoIndexResp, error) {
	out := new(AreaInfoIndexResp)
	err := c.cc.Invoke(ctx, AreaManage_AreaInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaManageClient) AreaProfileRead(ctx context.Context, in *AreaProfileReadReq, opts ...grpc.CallOption) (*AreaProfile, error) {
	out := new(AreaProfile)
	err := c.cc.Invoke(ctx, AreaManage_AreaProfileRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaManageClient) AreaProfileUpdate(ctx context.Context, in *AreaProfile, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AreaManage_AreaProfileUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *areaManageClient) AreaProfileIndex(ctx context.Context, in *AreaProfileIndexReq, opts ...grpc.CallOption) (*AreaProfileIndexResp, error) {
	out := new(AreaProfileIndexResp)
	err := c.cc.Invoke(ctx, AreaManage_AreaProfileIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AreaManageServer is the server API for AreaManage service.
// All implementations must embed UnimplementedAreaManageServer
// for forward compatibility
type AreaManageServer interface {
	// 新增区域
	AreaInfoCreate(context.Context, *AreaInfo) (*AreaWithID, error)
	// 更新区域
	AreaInfoUpdate(context.Context, *AreaInfo) (*Empty, error)
	// 删除区域
	AreaInfoDelete(context.Context, *AreaWithID) (*Empty, error)
	// 获取区域信息详情
	AreaInfoRead(context.Context, *AreaInfoReadReq) (*AreaInfo, error)
	// 获取区域信息列表
	AreaInfoIndex(context.Context, *AreaInfoIndexReq) (*AreaInfoIndexResp, error)
	AreaProfileRead(context.Context, *AreaProfileReadReq) (*AreaProfile, error)
	AreaProfileUpdate(context.Context, *AreaProfile) (*Empty, error)
	AreaProfileIndex(context.Context, *AreaProfileIndexReq) (*AreaProfileIndexResp, error)
	mustEmbedUnimplementedAreaManageServer()
}

// UnimplementedAreaManageServer must be embedded to have forward compatible implementations.
type UnimplementedAreaManageServer struct {
}

func (UnimplementedAreaManageServer) AreaInfoCreate(context.Context, *AreaInfo) (*AreaWithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaInfoCreate not implemented")
}
func (UnimplementedAreaManageServer) AreaInfoUpdate(context.Context, *AreaInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaInfoUpdate not implemented")
}
func (UnimplementedAreaManageServer) AreaInfoDelete(context.Context, *AreaWithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaInfoDelete not implemented")
}
func (UnimplementedAreaManageServer) AreaInfoRead(context.Context, *AreaInfoReadReq) (*AreaInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaInfoRead not implemented")
}
func (UnimplementedAreaManageServer) AreaInfoIndex(context.Context, *AreaInfoIndexReq) (*AreaInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaInfoIndex not implemented")
}
func (UnimplementedAreaManageServer) AreaProfileRead(context.Context, *AreaProfileReadReq) (*AreaProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaProfileRead not implemented")
}
func (UnimplementedAreaManageServer) AreaProfileUpdate(context.Context, *AreaProfile) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaProfileUpdate not implemented")
}
func (UnimplementedAreaManageServer) AreaProfileIndex(context.Context, *AreaProfileIndexReq) (*AreaProfileIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreaProfileIndex not implemented")
}
func (UnimplementedAreaManageServer) mustEmbedUnimplementedAreaManageServer() {}

// UnsafeAreaManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AreaManageServer will
// result in compilation errors.
type UnsafeAreaManageServer interface {
	mustEmbedUnimplementedAreaManageServer()
}

func RegisterAreaManageServer(s grpc.ServiceRegistrar, srv AreaManageServer) {
	s.RegisterService(&AreaManage_ServiceDesc, srv)
}

func _AreaManage_AreaInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaManageServer).AreaInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AreaManage_AreaInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaManageServer).AreaInfoCreate(ctx, req.(*AreaInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaManage_AreaInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaManageServer).AreaInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AreaManage_AreaInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaManageServer).AreaInfoUpdate(ctx, req.(*AreaInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaManage_AreaInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaWithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaManageServer).AreaInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AreaManage_AreaInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaManageServer).AreaInfoDelete(ctx, req.(*AreaWithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaManage_AreaInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaInfoReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaManageServer).AreaInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AreaManage_AreaInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaManageServer).AreaInfoRead(ctx, req.(*AreaInfoReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaManage_AreaInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaManageServer).AreaInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AreaManage_AreaInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaManageServer).AreaInfoIndex(ctx, req.(*AreaInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaManage_AreaProfileRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaProfileReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaManageServer).AreaProfileRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AreaManage_AreaProfileRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaManageServer).AreaProfileRead(ctx, req.(*AreaProfileReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaManage_AreaProfileUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaManageServer).AreaProfileUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AreaManage_AreaProfileUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaManageServer).AreaProfileUpdate(ctx, req.(*AreaProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _AreaManage_AreaProfileIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreaProfileIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AreaManageServer).AreaProfileIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AreaManage_AreaProfileIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AreaManageServer).AreaProfileIndex(ctx, req.(*AreaProfileIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AreaManage_ServiceDesc is the grpc.ServiceDesc for AreaManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AreaManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.AreaManage",
	HandlerType: (*AreaManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "areaInfoCreate",
			Handler:    _AreaManage_AreaInfoCreate_Handler,
		},
		{
			MethodName: "areaInfoUpdate",
			Handler:    _AreaManage_AreaInfoUpdate_Handler,
		},
		{
			MethodName: "areaInfoDelete",
			Handler:    _AreaManage_AreaInfoDelete_Handler,
		},
		{
			MethodName: "areaInfoRead",
			Handler:    _AreaManage_AreaInfoRead_Handler,
		},
		{
			MethodName: "areaInfoIndex",
			Handler:    _AreaManage_AreaInfoIndex_Handler,
		},
		{
			MethodName: "areaProfileRead",
			Handler:    _AreaManage_AreaProfileRead_Handler,
		},
		{
			MethodName: "areaProfileUpdate",
			Handler:    _AreaManage_AreaProfileUpdate_Handler,
		},
		{
			MethodName: "areaProfileIndex",
			Handler:    _AreaManage_AreaProfileIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sys.proto",
}

const (
	TenantManage_TenantInfoCreate_FullMethodName           = "/sys.TenantManage/tenantInfoCreate"
	TenantManage_TenantInfoUpdate_FullMethodName           = "/sys.TenantManage/tenantInfoUpdate"
	TenantManage_TenantInfoDelete_FullMethodName           = "/sys.TenantManage/tenantInfoDelete"
	TenantManage_TenantInfoRead_FullMethodName             = "/sys.TenantManage/tenantInfoRead"
	TenantManage_TenantInfoIndex_FullMethodName            = "/sys.TenantManage/tenantInfoIndex"
	TenantManage_TenantConfigUpdate_FullMethodName         = "/sys.TenantManage/tenantConfigUpdate"
	TenantManage_TenantConfigRead_FullMethodName           = "/sys.TenantManage/tenantConfigRead"
	TenantManage_TenantAccessMultiDelete_FullMethodName    = "/sys.TenantManage/tenantAccessMultiDelete"
	TenantManage_TenantAccessMultiCreate_FullMethodName    = "/sys.TenantManage/tenantAccessMultiCreate"
	TenantManage_TenantAccessMultiUpdate_FullMethodName    = "/sys.TenantManage/tenantAccessMultiUpdate"
	TenantManage_TenantAccessIndex_FullMethodName          = "/sys.TenantManage/tenantAccessIndex"
	TenantManage_TenantAppIndex_FullMethodName             = "/sys.TenantManage/tenantAppIndex"
	TenantManage_TenantAppCreate_FullMethodName            = "/sys.TenantManage/tenantAppCreate"
	TenantManage_TenantAppRead_FullMethodName              = "/sys.TenantManage/tenantAppRead"
	TenantManage_TenantAppUpdate_FullMethodName            = "/sys.TenantManage/tenantAppUpdate"
	TenantManage_TenantAppDelete_FullMethodName            = "/sys.TenantManage/tenantAppDelete"
	TenantManage_TenantAppModuleMultiCreate_FullMethodName = "/sys.TenantManage/tenantAppModuleMultiCreate"
	TenantManage_TenantAppModuleCreate_FullMethodName      = "/sys.TenantManage/tenantAppModuleCreate"
	TenantManage_TenantAppModuleIndex_FullMethodName       = "/sys.TenantManage/tenantAppModuleIndex"
	TenantManage_TenantAppModuleDelete_FullMethodName      = "/sys.TenantManage/tenantAppModuleDelete"
	TenantManage_TenantAppMenuCreate_FullMethodName        = "/sys.TenantManage/tenantAppMenuCreate"
	TenantManage_TenantAppMenuIndex_FullMethodName         = "/sys.TenantManage/tenantAppMenuIndex"
	TenantManage_TenantAppMenuUpdate_FullMethodName        = "/sys.TenantManage/tenantAppMenuUpdate"
	TenantManage_TenantAppMenuDelete_FullMethodName        = "/sys.TenantManage/tenantAppMenuDelete"
	TenantManage_TenantOpenCheckToken_FullMethodName       = "/sys.TenantManage/tenantOpenCheckToken"
	TenantManage_TenantOpenWebHook_FullMethodName          = "/sys.TenantManage/tenantOpenWebHook"
	TenantManage_TenantAgreementIndex_FullMethodName       = "/sys.TenantManage/tenantAgreementIndex"
	TenantManage_TenantAgreementUpdate_FullMethodName      = "/sys.TenantManage/tenantAgreementUpdate"
	TenantManage_TenantAgreementCreate_FullMethodName      = "/sys.TenantManage/tenantAgreementCreate"
	TenantManage_TenantAgreementRead_FullMethodName        = "/sys.TenantManage/tenantAgreementRead"
	TenantManage_TenantAgreementDelete_FullMethodName      = "/sys.TenantManage/tenantAgreementDelete"
)

// TenantManageClient is the client API for TenantManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantManageClient interface {
	// 新增区域
	TenantInfoCreate(ctx context.Context, in *TenantInfoCreateReq, opts ...grpc.CallOption) (*WithID, error)
	// 更新区域
	TenantInfoUpdate(ctx context.Context, in *TenantInfo, opts ...grpc.CallOption) (*Empty, error)
	// 删除区域
	TenantInfoDelete(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*Empty, error)
	// 获取租户信息详情
	TenantInfoRead(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*TenantInfo, error)
	// 获取租户信息列表
	TenantInfoIndex(ctx context.Context, in *TenantInfoIndexReq, opts ...grpc.CallOption) (*TenantInfoIndexResp, error)
	TenantConfigUpdate(ctx context.Context, in *TenantConfig, opts ...grpc.CallOption) (*Empty, error)
	TenantConfigRead(ctx context.Context, in *WithCode, opts ...grpc.CallOption) (*TenantConfig, error)
	TenantAccessMultiDelete(ctx context.Context, in *TenantAccessMultiSaveReq, opts ...grpc.CallOption) (*Empty, error)
	TenantAccessMultiCreate(ctx context.Context, in *TenantAccessMultiSaveReq, opts ...grpc.CallOption) (*Empty, error)
	TenantAccessMultiUpdate(ctx context.Context, in *TenantAccessMultiSaveReq, opts ...grpc.CallOption) (*Empty, error)
	TenantAccessIndex(ctx context.Context, in *TenantAccessIndexReq, opts ...grpc.CallOption) (*TenantAccessIndexResp, error)
	TenantAppIndex(ctx context.Context, in *TenantAppIndexReq, opts ...grpc.CallOption) (*TenantAppIndexResp, error)
	TenantAppCreate(ctx context.Context, in *TenantAppInfo, opts ...grpc.CallOption) (*Empty, error)
	TenantAppRead(ctx context.Context, in *TenantAppWithIDOrCode, opts ...grpc.CallOption) (*TenantAppInfo, error)
	TenantAppUpdate(ctx context.Context, in *TenantAppInfo, opts ...grpc.CallOption) (*Empty, error)
	TenantAppDelete(ctx context.Context, in *TenantAppWithIDOrCode, opts ...grpc.CallOption) (*Empty, error)
	TenantAppModuleMultiCreate(ctx context.Context, in *TenantAppInfo, opts ...grpc.CallOption) (*Empty, error)
	TenantAppModuleCreate(ctx context.Context, in *TenantModuleCreateReq, opts ...grpc.CallOption) (*Empty, error)
	TenantAppModuleIndex(ctx context.Context, in *TenantModuleIndexReq, opts ...grpc.CallOption) (*TenantModuleIndexResp, error)
	TenantAppModuleDelete(ctx context.Context, in *TenantModuleWithIDOrCode, opts ...grpc.CallOption) (*Empty, error)
	TenantAppMenuCreate(ctx context.Context, in *TenantAppMenu, opts ...grpc.CallOption) (*WithID, error)
	TenantAppMenuIndex(ctx context.Context, in *TenantAppMenuIndexReq, opts ...grpc.CallOption) (*TenantAppMenuIndexResp, error)
	TenantAppMenuUpdate(ctx context.Context, in *TenantAppMenu, opts ...grpc.CallOption) (*Empty, error)
	TenantAppMenuDelete(ctx context.Context, in *WithAppCodeID, opts ...grpc.CallOption) (*Empty, error)
	TenantOpenCheckToken(ctx context.Context, in *TenantOpenCheckTokenReq, opts ...grpc.CallOption) (*TenantOpenCheckTokenResp, error)
	TenantOpenWebHook(ctx context.Context, in *WithCode, opts ...grpc.CallOption) (*TenantOpenWebHook, error)
	TenantAgreementIndex(ctx context.Context, in *TenantAgreementIndexReq, opts ...grpc.CallOption) (*TenantAgreementIndexResp, error)
	TenantAgreementUpdate(ctx context.Context, in *TenantAgreement, opts ...grpc.CallOption) (*Empty, error)
	TenantAgreementCreate(ctx context.Context, in *TenantAgreement, opts ...grpc.CallOption) (*WithID, error)
	TenantAgreementRead(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*TenantAgreement, error)
	TenantAgreementDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
}

type tenantManageClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantManageClient(cc grpc.ClientConnInterface) TenantManageClient {
	return &tenantManageClient{cc}
}

func (c *tenantManageClient) TenantInfoCreate(ctx context.Context, in *TenantInfoCreateReq, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, TenantManage_TenantInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantInfoUpdate(ctx context.Context, in *TenantInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TenantManage_TenantInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantInfoDelete(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TenantManage_TenantInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantInfoRead(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*TenantInfo, error) {
	out := new(TenantInfo)
	err := c.cc.Invoke(ctx, TenantManage_TenantInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantInfoIndex(ctx context.Context, in *TenantInfoIndexReq, opts ...grpc.CallOption) (*TenantInfoIndexResp, error) {
	out := new(TenantInfoIndexResp)
	err := c.cc.Invoke(ctx, TenantManage_TenantInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantConfigUpdate(ctx context.Context, in *TenantConfig, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TenantManage_TenantConfigUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantConfigRead(ctx context.Context, in *WithCode, opts ...grpc.CallOption) (*TenantConfig, error) {
	out := new(TenantConfig)
	err := c.cc.Invoke(ctx, TenantManage_TenantConfigRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAccessMultiDelete(ctx context.Context, in *TenantAccessMultiSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TenantManage_TenantAccessMultiDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAccessMultiCreate(ctx context.Context, in *TenantAccessMultiSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TenantManage_TenantAccessMultiCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAccessMultiUpdate(ctx context.Context, in *TenantAccessMultiSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TenantManage_TenantAccessMultiUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAccessIndex(ctx context.Context, in *TenantAccessIndexReq, opts ...grpc.CallOption) (*TenantAccessIndexResp, error) {
	out := new(TenantAccessIndexResp)
	err := c.cc.Invoke(ctx, TenantManage_TenantAccessIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAppIndex(ctx context.Context, in *TenantAppIndexReq, opts ...grpc.CallOption) (*TenantAppIndexResp, error) {
	out := new(TenantAppIndexResp)
	err := c.cc.Invoke(ctx, TenantManage_TenantAppIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAppCreate(ctx context.Context, in *TenantAppInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TenantManage_TenantAppCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAppRead(ctx context.Context, in *TenantAppWithIDOrCode, opts ...grpc.CallOption) (*TenantAppInfo, error) {
	out := new(TenantAppInfo)
	err := c.cc.Invoke(ctx, TenantManage_TenantAppRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAppUpdate(ctx context.Context, in *TenantAppInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TenantManage_TenantAppUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAppDelete(ctx context.Context, in *TenantAppWithIDOrCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TenantManage_TenantAppDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAppModuleMultiCreate(ctx context.Context, in *TenantAppInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TenantManage_TenantAppModuleMultiCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAppModuleCreate(ctx context.Context, in *TenantModuleCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TenantManage_TenantAppModuleCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAppModuleIndex(ctx context.Context, in *TenantModuleIndexReq, opts ...grpc.CallOption) (*TenantModuleIndexResp, error) {
	out := new(TenantModuleIndexResp)
	err := c.cc.Invoke(ctx, TenantManage_TenantAppModuleIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAppModuleDelete(ctx context.Context, in *TenantModuleWithIDOrCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TenantManage_TenantAppModuleDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAppMenuCreate(ctx context.Context, in *TenantAppMenu, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, TenantManage_TenantAppMenuCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAppMenuIndex(ctx context.Context, in *TenantAppMenuIndexReq, opts ...grpc.CallOption) (*TenantAppMenuIndexResp, error) {
	out := new(TenantAppMenuIndexResp)
	err := c.cc.Invoke(ctx, TenantManage_TenantAppMenuIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAppMenuUpdate(ctx context.Context, in *TenantAppMenu, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TenantManage_TenantAppMenuUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAppMenuDelete(ctx context.Context, in *WithAppCodeID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TenantManage_TenantAppMenuDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantOpenCheckToken(ctx context.Context, in *TenantOpenCheckTokenReq, opts ...grpc.CallOption) (*TenantOpenCheckTokenResp, error) {
	out := new(TenantOpenCheckTokenResp)
	err := c.cc.Invoke(ctx, TenantManage_TenantOpenCheckToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantOpenWebHook(ctx context.Context, in *WithCode, opts ...grpc.CallOption) (*TenantOpenWebHook, error) {
	out := new(TenantOpenWebHook)
	err := c.cc.Invoke(ctx, TenantManage_TenantOpenWebHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAgreementIndex(ctx context.Context, in *TenantAgreementIndexReq, opts ...grpc.CallOption) (*TenantAgreementIndexResp, error) {
	out := new(TenantAgreementIndexResp)
	err := c.cc.Invoke(ctx, TenantManage_TenantAgreementIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAgreementUpdate(ctx context.Context, in *TenantAgreement, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TenantManage_TenantAgreementUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAgreementCreate(ctx context.Context, in *TenantAgreement, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, TenantManage_TenantAgreementCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAgreementRead(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*TenantAgreement, error) {
	out := new(TenantAgreement)
	err := c.cc.Invoke(ctx, TenantManage_TenantAgreementRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantManageClient) TenantAgreementDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TenantManage_TenantAgreementDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantManageServer is the server API for TenantManage service.
// All implementations must embed UnimplementedTenantManageServer
// for forward compatibility
type TenantManageServer interface {
	// 新增区域
	TenantInfoCreate(context.Context, *TenantInfoCreateReq) (*WithID, error)
	// 更新区域
	TenantInfoUpdate(context.Context, *TenantInfo) (*Empty, error)
	// 删除区域
	TenantInfoDelete(context.Context, *WithIDCode) (*Empty, error)
	// 获取租户信息详情
	TenantInfoRead(context.Context, *WithIDCode) (*TenantInfo, error)
	// 获取租户信息列表
	TenantInfoIndex(context.Context, *TenantInfoIndexReq) (*TenantInfoIndexResp, error)
	TenantConfigUpdate(context.Context, *TenantConfig) (*Empty, error)
	TenantConfigRead(context.Context, *WithCode) (*TenantConfig, error)
	TenantAccessMultiDelete(context.Context, *TenantAccessMultiSaveReq) (*Empty, error)
	TenantAccessMultiCreate(context.Context, *TenantAccessMultiSaveReq) (*Empty, error)
	TenantAccessMultiUpdate(context.Context, *TenantAccessMultiSaveReq) (*Empty, error)
	TenantAccessIndex(context.Context, *TenantAccessIndexReq) (*TenantAccessIndexResp, error)
	TenantAppIndex(context.Context, *TenantAppIndexReq) (*TenantAppIndexResp, error)
	TenantAppCreate(context.Context, *TenantAppInfo) (*Empty, error)
	TenantAppRead(context.Context, *TenantAppWithIDOrCode) (*TenantAppInfo, error)
	TenantAppUpdate(context.Context, *TenantAppInfo) (*Empty, error)
	TenantAppDelete(context.Context, *TenantAppWithIDOrCode) (*Empty, error)
	TenantAppModuleMultiCreate(context.Context, *TenantAppInfo) (*Empty, error)
	TenantAppModuleCreate(context.Context, *TenantModuleCreateReq) (*Empty, error)
	TenantAppModuleIndex(context.Context, *TenantModuleIndexReq) (*TenantModuleIndexResp, error)
	TenantAppModuleDelete(context.Context, *TenantModuleWithIDOrCode) (*Empty, error)
	TenantAppMenuCreate(context.Context, *TenantAppMenu) (*WithID, error)
	TenantAppMenuIndex(context.Context, *TenantAppMenuIndexReq) (*TenantAppMenuIndexResp, error)
	TenantAppMenuUpdate(context.Context, *TenantAppMenu) (*Empty, error)
	TenantAppMenuDelete(context.Context, *WithAppCodeID) (*Empty, error)
	TenantOpenCheckToken(context.Context, *TenantOpenCheckTokenReq) (*TenantOpenCheckTokenResp, error)
	TenantOpenWebHook(context.Context, *WithCode) (*TenantOpenWebHook, error)
	TenantAgreementIndex(context.Context, *TenantAgreementIndexReq) (*TenantAgreementIndexResp, error)
	TenantAgreementUpdate(context.Context, *TenantAgreement) (*Empty, error)
	TenantAgreementCreate(context.Context, *TenantAgreement) (*WithID, error)
	TenantAgreementRead(context.Context, *WithIDCode) (*TenantAgreement, error)
	TenantAgreementDelete(context.Context, *WithID) (*Empty, error)
	mustEmbedUnimplementedTenantManageServer()
}

// UnimplementedTenantManageServer must be embedded to have forward compatible implementations.
type UnimplementedTenantManageServer struct {
}

func (UnimplementedTenantManageServer) TenantInfoCreate(context.Context, *TenantInfoCreateReq) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantInfoCreate not implemented")
}
func (UnimplementedTenantManageServer) TenantInfoUpdate(context.Context, *TenantInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantInfoUpdate not implemented")
}
func (UnimplementedTenantManageServer) TenantInfoDelete(context.Context, *WithIDCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantInfoDelete not implemented")
}
func (UnimplementedTenantManageServer) TenantInfoRead(context.Context, *WithIDCode) (*TenantInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantInfoRead not implemented")
}
func (UnimplementedTenantManageServer) TenantInfoIndex(context.Context, *TenantInfoIndexReq) (*TenantInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantInfoIndex not implemented")
}
func (UnimplementedTenantManageServer) TenantConfigUpdate(context.Context, *TenantConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantConfigUpdate not implemented")
}
func (UnimplementedTenantManageServer) TenantConfigRead(context.Context, *WithCode) (*TenantConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantConfigRead not implemented")
}
func (UnimplementedTenantManageServer) TenantAccessMultiDelete(context.Context, *TenantAccessMultiSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAccessMultiDelete not implemented")
}
func (UnimplementedTenantManageServer) TenantAccessMultiCreate(context.Context, *TenantAccessMultiSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAccessMultiCreate not implemented")
}
func (UnimplementedTenantManageServer) TenantAccessMultiUpdate(context.Context, *TenantAccessMultiSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAccessMultiUpdate not implemented")
}
func (UnimplementedTenantManageServer) TenantAccessIndex(context.Context, *TenantAccessIndexReq) (*TenantAccessIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAccessIndex not implemented")
}
func (UnimplementedTenantManageServer) TenantAppIndex(context.Context, *TenantAppIndexReq) (*TenantAppIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAppIndex not implemented")
}
func (UnimplementedTenantManageServer) TenantAppCreate(context.Context, *TenantAppInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAppCreate not implemented")
}
func (UnimplementedTenantManageServer) TenantAppRead(context.Context, *TenantAppWithIDOrCode) (*TenantAppInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAppRead not implemented")
}
func (UnimplementedTenantManageServer) TenantAppUpdate(context.Context, *TenantAppInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAppUpdate not implemented")
}
func (UnimplementedTenantManageServer) TenantAppDelete(context.Context, *TenantAppWithIDOrCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAppDelete not implemented")
}
func (UnimplementedTenantManageServer) TenantAppModuleMultiCreate(context.Context, *TenantAppInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAppModuleMultiCreate not implemented")
}
func (UnimplementedTenantManageServer) TenantAppModuleCreate(context.Context, *TenantModuleCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAppModuleCreate not implemented")
}
func (UnimplementedTenantManageServer) TenantAppModuleIndex(context.Context, *TenantModuleIndexReq) (*TenantModuleIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAppModuleIndex not implemented")
}
func (UnimplementedTenantManageServer) TenantAppModuleDelete(context.Context, *TenantModuleWithIDOrCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAppModuleDelete not implemented")
}
func (UnimplementedTenantManageServer) TenantAppMenuCreate(context.Context, *TenantAppMenu) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAppMenuCreate not implemented")
}
func (UnimplementedTenantManageServer) TenantAppMenuIndex(context.Context, *TenantAppMenuIndexReq) (*TenantAppMenuIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAppMenuIndex not implemented")
}
func (UnimplementedTenantManageServer) TenantAppMenuUpdate(context.Context, *TenantAppMenu) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAppMenuUpdate not implemented")
}
func (UnimplementedTenantManageServer) TenantAppMenuDelete(context.Context, *WithAppCodeID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAppMenuDelete not implemented")
}
func (UnimplementedTenantManageServer) TenantOpenCheckToken(context.Context, *TenantOpenCheckTokenReq) (*TenantOpenCheckTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantOpenCheckToken not implemented")
}
func (UnimplementedTenantManageServer) TenantOpenWebHook(context.Context, *WithCode) (*TenantOpenWebHook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantOpenWebHook not implemented")
}
func (UnimplementedTenantManageServer) TenantAgreementIndex(context.Context, *TenantAgreementIndexReq) (*TenantAgreementIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAgreementIndex not implemented")
}
func (UnimplementedTenantManageServer) TenantAgreementUpdate(context.Context, *TenantAgreement) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAgreementUpdate not implemented")
}
func (UnimplementedTenantManageServer) TenantAgreementCreate(context.Context, *TenantAgreement) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAgreementCreate not implemented")
}
func (UnimplementedTenantManageServer) TenantAgreementRead(context.Context, *WithIDCode) (*TenantAgreement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAgreementRead not implemented")
}
func (UnimplementedTenantManageServer) TenantAgreementDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantAgreementDelete not implemented")
}
func (UnimplementedTenantManageServer) mustEmbedUnimplementedTenantManageServer() {}

// UnsafeTenantManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantManageServer will
// result in compilation errors.
type UnsafeTenantManageServer interface {
	mustEmbedUnimplementedTenantManageServer()
}

func RegisterTenantManageServer(s grpc.ServiceRegistrar, srv TenantManageServer) {
	s.RegisterService(&TenantManage_ServiceDesc, srv)
}

func _TenantManage_TenantInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantInfoCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantInfoCreate(ctx, req.(*TenantInfoCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantInfoUpdate(ctx, req.(*TenantInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithIDCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantInfoDelete(ctx, req.(*WithIDCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithIDCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantInfoRead(ctx, req.(*WithIDCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantInfoIndex(ctx, req.(*TenantInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantConfigUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantConfigUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantConfigUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantConfigUpdate(ctx, req.(*TenantConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantConfigRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantConfigRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantConfigRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantConfigRead(ctx, req.(*WithCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAccessMultiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAccessMultiSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAccessMultiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAccessMultiDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAccessMultiDelete(ctx, req.(*TenantAccessMultiSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAccessMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAccessMultiSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAccessMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAccessMultiCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAccessMultiCreate(ctx, req.(*TenantAccessMultiSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAccessMultiUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAccessMultiSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAccessMultiUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAccessMultiUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAccessMultiUpdate(ctx, req.(*TenantAccessMultiSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAccessIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAccessIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAccessIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAccessIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAccessIndex(ctx, req.(*TenantAccessIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAppIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAppIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAppIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAppIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAppIndex(ctx, req.(*TenantAppIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAppCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAppInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAppCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAppCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAppCreate(ctx, req.(*TenantAppInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAppRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAppWithIDOrCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAppRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAppRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAppRead(ctx, req.(*TenantAppWithIDOrCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAppUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAppInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAppUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAppUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAppUpdate(ctx, req.(*TenantAppInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAppDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAppWithIDOrCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAppDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAppDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAppDelete(ctx, req.(*TenantAppWithIDOrCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAppModuleMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAppInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAppModuleMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAppModuleMultiCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAppModuleMultiCreate(ctx, req.(*TenantAppInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAppModuleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantModuleCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAppModuleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAppModuleCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAppModuleCreate(ctx, req.(*TenantModuleCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAppModuleIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantModuleIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAppModuleIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAppModuleIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAppModuleIndex(ctx, req.(*TenantModuleIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAppModuleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantModuleWithIDOrCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAppModuleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAppModuleDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAppModuleDelete(ctx, req.(*TenantModuleWithIDOrCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAppMenuCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAppMenu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAppMenuCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAppMenuCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAppMenuCreate(ctx, req.(*TenantAppMenu))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAppMenuIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAppMenuIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAppMenuIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAppMenuIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAppMenuIndex(ctx, req.(*TenantAppMenuIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAppMenuUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAppMenu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAppMenuUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAppMenuUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAppMenuUpdate(ctx, req.(*TenantAppMenu))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAppMenuDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithAppCodeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAppMenuDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAppMenuDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAppMenuDelete(ctx, req.(*WithAppCodeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantOpenCheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantOpenCheckTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantOpenCheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantOpenCheckToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantOpenCheckToken(ctx, req.(*TenantOpenCheckTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantOpenWebHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantOpenWebHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantOpenWebHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantOpenWebHook(ctx, req.(*WithCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAgreementIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAgreementIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAgreementIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAgreementIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAgreementIndex(ctx, req.(*TenantAgreementIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAgreementUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAgreement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAgreementUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAgreementUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAgreementUpdate(ctx, req.(*TenantAgreement))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAgreementCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantAgreement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAgreementCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAgreementCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAgreementCreate(ctx, req.(*TenantAgreement))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAgreementRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithIDCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAgreementRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAgreementRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAgreementRead(ctx, req.(*WithIDCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantManage_TenantAgreementDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantManageServer).TenantAgreementDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantManage_TenantAgreementDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantManageServer).TenantAgreementDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantManage_ServiceDesc is the grpc.ServiceDesc for TenantManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.TenantManage",
	HandlerType: (*TenantManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "tenantInfoCreate",
			Handler:    _TenantManage_TenantInfoCreate_Handler,
		},
		{
			MethodName: "tenantInfoUpdate",
			Handler:    _TenantManage_TenantInfoUpdate_Handler,
		},
		{
			MethodName: "tenantInfoDelete",
			Handler:    _TenantManage_TenantInfoDelete_Handler,
		},
		{
			MethodName: "tenantInfoRead",
			Handler:    _TenantManage_TenantInfoRead_Handler,
		},
		{
			MethodName: "tenantInfoIndex",
			Handler:    _TenantManage_TenantInfoIndex_Handler,
		},
		{
			MethodName: "tenantConfigUpdate",
			Handler:    _TenantManage_TenantConfigUpdate_Handler,
		},
		{
			MethodName: "tenantConfigRead",
			Handler:    _TenantManage_TenantConfigRead_Handler,
		},
		{
			MethodName: "tenantAccessMultiDelete",
			Handler:    _TenantManage_TenantAccessMultiDelete_Handler,
		},
		{
			MethodName: "tenantAccessMultiCreate",
			Handler:    _TenantManage_TenantAccessMultiCreate_Handler,
		},
		{
			MethodName: "tenantAccessMultiUpdate",
			Handler:    _TenantManage_TenantAccessMultiUpdate_Handler,
		},
		{
			MethodName: "tenantAccessIndex",
			Handler:    _TenantManage_TenantAccessIndex_Handler,
		},
		{
			MethodName: "tenantAppIndex",
			Handler:    _TenantManage_TenantAppIndex_Handler,
		},
		{
			MethodName: "tenantAppCreate",
			Handler:    _TenantManage_TenantAppCreate_Handler,
		},
		{
			MethodName: "tenantAppRead",
			Handler:    _TenantManage_TenantAppRead_Handler,
		},
		{
			MethodName: "tenantAppUpdate",
			Handler:    _TenantManage_TenantAppUpdate_Handler,
		},
		{
			MethodName: "tenantAppDelete",
			Handler:    _TenantManage_TenantAppDelete_Handler,
		},
		{
			MethodName: "tenantAppModuleMultiCreate",
			Handler:    _TenantManage_TenantAppModuleMultiCreate_Handler,
		},
		{
			MethodName: "tenantAppModuleCreate",
			Handler:    _TenantManage_TenantAppModuleCreate_Handler,
		},
		{
			MethodName: "tenantAppModuleIndex",
			Handler:    _TenantManage_TenantAppModuleIndex_Handler,
		},
		{
			MethodName: "tenantAppModuleDelete",
			Handler:    _TenantManage_TenantAppModuleDelete_Handler,
		},
		{
			MethodName: "tenantAppMenuCreate",
			Handler:    _TenantManage_TenantAppMenuCreate_Handler,
		},
		{
			MethodName: "tenantAppMenuIndex",
			Handler:    _TenantManage_TenantAppMenuIndex_Handler,
		},
		{
			MethodName: "tenantAppMenuUpdate",
			Handler:    _TenantManage_TenantAppMenuUpdate_Handler,
		},
		{
			MethodName: "tenantAppMenuDelete",
			Handler:    _TenantManage_TenantAppMenuDelete_Handler,
		},
		{
			MethodName: "tenantOpenCheckToken",
			Handler:    _TenantManage_TenantOpenCheckToken_Handler,
		},
		{
			MethodName: "tenantOpenWebHook",
			Handler:    _TenantManage_TenantOpenWebHook_Handler,
		},
		{
			MethodName: "tenantAgreementIndex",
			Handler:    _TenantManage_TenantAgreementIndex_Handler,
		},
		{
			MethodName: "tenantAgreementUpdate",
			Handler:    _TenantManage_TenantAgreementUpdate_Handler,
		},
		{
			MethodName: "tenantAgreementCreate",
			Handler:    _TenantManage_TenantAgreementCreate_Handler,
		},
		{
			MethodName: "tenantAgreementRead",
			Handler:    _TenantManage_TenantAgreementRead_Handler,
		},
		{
			MethodName: "tenantAgreementDelete",
			Handler:    _TenantManage_TenantAgreementDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sys.proto",
}

const (
	Ops_OpsWorkOrderCreate_FullMethodName = "/sys.ops/opsWorkOrderCreate"
	Ops_OpsWorkOrderUpdate_FullMethodName = "/sys.ops/opsWorkOrderUpdate"
	Ops_OpsWorkOrderIndex_FullMethodName  = "/sys.ops/opsWorkOrderIndex"
	Ops_OpsFeedbackCreate_FullMethodName  = "/sys.ops/opsFeedbackCreate"
	Ops_OpsFeedbackUpdate_FullMethodName  = "/sys.ops/opsFeedbackUpdate"
	Ops_OpsFeedbackIndex_FullMethodName   = "/sys.ops/opsFeedbackIndex"
)

// OpsClient is the client API for Ops service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpsClient interface {
	// 维护工单  Work Order
	OpsWorkOrderCreate(ctx context.Context, in *OpsWorkOrder, opts ...grpc.CallOption) (*WithID, error)
	OpsWorkOrderUpdate(ctx context.Context, in *OpsWorkOrder, opts ...grpc.CallOption) (*Empty, error)
	OpsWorkOrderIndex(ctx context.Context, in *OpsWorkOrderIndexReq, opts ...grpc.CallOption) (*OpsWorkOrderIndexResp, error)
	// 反馈
	OpsFeedbackCreate(ctx context.Context, in *OpsFeedback, opts ...grpc.CallOption) (*WithID, error)
	OpsFeedbackUpdate(ctx context.Context, in *OpsFeedback, opts ...grpc.CallOption) (*Empty, error)
	OpsFeedbackIndex(ctx context.Context, in *OpsFeedbackIndexReq, opts ...grpc.CallOption) (*OpsFeedbackIndexResp, error)
}

type opsClient struct {
	cc grpc.ClientConnInterface
}

func NewOpsClient(cc grpc.ClientConnInterface) OpsClient {
	return &opsClient{cc}
}

func (c *opsClient) OpsWorkOrderCreate(ctx context.Context, in *OpsWorkOrder, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, Ops_OpsWorkOrderCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsClient) OpsWorkOrderUpdate(ctx context.Context, in *OpsWorkOrder, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Ops_OpsWorkOrderUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsClient) OpsWorkOrderIndex(ctx context.Context, in *OpsWorkOrderIndexReq, opts ...grpc.CallOption) (*OpsWorkOrderIndexResp, error) {
	out := new(OpsWorkOrderIndexResp)
	err := c.cc.Invoke(ctx, Ops_OpsWorkOrderIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsClient) OpsFeedbackCreate(ctx context.Context, in *OpsFeedback, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, Ops_OpsFeedbackCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsClient) OpsFeedbackUpdate(ctx context.Context, in *OpsFeedback, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Ops_OpsFeedbackUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsClient) OpsFeedbackIndex(ctx context.Context, in *OpsFeedbackIndexReq, opts ...grpc.CallOption) (*OpsFeedbackIndexResp, error) {
	out := new(OpsFeedbackIndexResp)
	err := c.cc.Invoke(ctx, Ops_OpsFeedbackIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpsServer is the server API for Ops service.
// All implementations must embed UnimplementedOpsServer
// for forward compatibility
type OpsServer interface {
	// 维护工单  Work Order
	OpsWorkOrderCreate(context.Context, *OpsWorkOrder) (*WithID, error)
	OpsWorkOrderUpdate(context.Context, *OpsWorkOrder) (*Empty, error)
	OpsWorkOrderIndex(context.Context, *OpsWorkOrderIndexReq) (*OpsWorkOrderIndexResp, error)
	// 反馈
	OpsFeedbackCreate(context.Context, *OpsFeedback) (*WithID, error)
	OpsFeedbackUpdate(context.Context, *OpsFeedback) (*Empty, error)
	OpsFeedbackIndex(context.Context, *OpsFeedbackIndexReq) (*OpsFeedbackIndexResp, error)
	mustEmbedUnimplementedOpsServer()
}

// UnimplementedOpsServer must be embedded to have forward compatible implementations.
type UnimplementedOpsServer struct {
}

func (UnimplementedOpsServer) OpsWorkOrderCreate(context.Context, *OpsWorkOrder) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpsWorkOrderCreate not implemented")
}
func (UnimplementedOpsServer) OpsWorkOrderUpdate(context.Context, *OpsWorkOrder) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpsWorkOrderUpdate not implemented")
}
func (UnimplementedOpsServer) OpsWorkOrderIndex(context.Context, *OpsWorkOrderIndexReq) (*OpsWorkOrderIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpsWorkOrderIndex not implemented")
}
func (UnimplementedOpsServer) OpsFeedbackCreate(context.Context, *OpsFeedback) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpsFeedbackCreate not implemented")
}
func (UnimplementedOpsServer) OpsFeedbackUpdate(context.Context, *OpsFeedback) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpsFeedbackUpdate not implemented")
}
func (UnimplementedOpsServer) OpsFeedbackIndex(context.Context, *OpsFeedbackIndexReq) (*OpsFeedbackIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpsFeedbackIndex not implemented")
}
func (UnimplementedOpsServer) mustEmbedUnimplementedOpsServer() {}

// UnsafeOpsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpsServer will
// result in compilation errors.
type UnsafeOpsServer interface {
	mustEmbedUnimplementedOpsServer()
}

func RegisterOpsServer(s grpc.ServiceRegistrar, srv OpsServer) {
	s.RegisterService(&Ops_ServiceDesc, srv)
}

func _Ops_OpsWorkOrderCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpsWorkOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).OpsWorkOrderCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ops_OpsWorkOrderCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).OpsWorkOrderCreate(ctx, req.(*OpsWorkOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ops_OpsWorkOrderUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpsWorkOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).OpsWorkOrderUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ops_OpsWorkOrderUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).OpsWorkOrderUpdate(ctx, req.(*OpsWorkOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ops_OpsWorkOrderIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpsWorkOrderIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).OpsWorkOrderIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ops_OpsWorkOrderIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).OpsWorkOrderIndex(ctx, req.(*OpsWorkOrderIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ops_OpsFeedbackCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpsFeedback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).OpsFeedbackCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ops_OpsFeedbackCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).OpsFeedbackCreate(ctx, req.(*OpsFeedback))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ops_OpsFeedbackUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpsFeedback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).OpsFeedbackUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ops_OpsFeedbackUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).OpsFeedbackUpdate(ctx, req.(*OpsFeedback))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ops_OpsFeedbackIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpsFeedbackIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).OpsFeedbackIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ops_OpsFeedbackIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).OpsFeedbackIndex(ctx, req.(*OpsFeedbackIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ops_ServiceDesc is the grpc.ServiceDesc for Ops service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ops_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sys.ops",
	HandlerType: (*OpsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "opsWorkOrderCreate",
			Handler:    _Ops_OpsWorkOrderCreate_Handler,
		},
		{
			MethodName: "opsWorkOrderUpdate",
			Handler:    _Ops_OpsWorkOrderUpdate_Handler,
		},
		{
			MethodName: "opsWorkOrderIndex",
			Handler:    _Ops_OpsWorkOrderIndex_Handler,
		},
		{
			MethodName: "opsFeedbackCreate",
			Handler:    _Ops_OpsFeedbackCreate_Handler,
		},
		{
			MethodName: "opsFeedbackUpdate",
			Handler:    _Ops_OpsFeedbackUpdate_Handler,
		},
		{
			MethodName: "opsFeedbackIndex",
			Handler:    _Ops_OpsFeedbackIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sys.proto",
}
