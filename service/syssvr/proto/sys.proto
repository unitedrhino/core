syntax = "proto3";
option go_package = "pb/sys";
import "google/protobuf/wrappers.proto";

package sys;

service UserManage {
  rpc userInfoCreate(UserInfoCreateReq) returns(UserCreateResp);//创建用户信息
  rpc userInfoIndex(UserInfoIndexReq) returns(UserInfoIndexResp);
  rpc userInfoUpdate(UserInfo) returns(Response);//更新用户基本数据
  rpc userInfoRead(UserInfoReadReq) returns(UserInfo);//获取用户信息
  rpc userInfoDelete(UserInfoDeleteReq) returns(Response);//刪除用戶
  rpc userLogin(UserLoginReq) returns(UserLoginResp);
  rpc userForgetPwd(UserForgetPwdReq)returns(Response);
  rpc userCaptcha(UserCaptchaReq)returns(UserCaptchaResp);
  rpc userCheckToken(UserCheckTokenReq) returns(UserCheckTokenResp);
  rpc userRegister(UserRegisterReq) returns(UserRegisterResp);
  rpc userChangePwd(UserChangePwdReq) returns(Response);

  rpc userRoleIndex(UserRoleIndexReq) returns (UserRoleIndexResp); //获取角色API权限列表
  rpc userRoleMultiUpdate(UserRoleMultiUpdateReq) returns(Response); //添加角色

  rpc userAreaApplyCreate(UserAreaApplyCreateReq) returns(Response);//申请区域权限
}

service DataManage {
  rpc dataProjectMultiUpdate (DataProjectMultiUpdateReq) returns (Response);   //授权用户数据权限
  rpc dataProjectIndex (DataProjectIndexReq) returns (DataProjectIndexResp); //获取用户数据权限列表

  rpc dataAreaMultiUpdate (DataAreaMultiUpdateReq) returns (Response);   //授权用户数据权限
  rpc dataAreaIndex (DataAreaIndexReq) returns (DataAreaIndexResp); //获取用户数据权限列表
  rpc dataAreaMultiDelete (DataAreaMultiDeleteReq) returns (Response); //删除用户授权

  rpc userAreaApplyIndex(UserAreaApplyIndexReq)returns(UserAreaApplyIndexResp);
  rpc userAreaApplyDeal(UserAreaApplyDealReq)returns(Response);//处理区域权限申请
}



service AccessManage{
  rpc apiInfoCreate(ApiInfo) returns(WithID);   //添加接口
  rpc apiInfoIndex(ApiInfoIndexReq) returns(ApiInfoIndexResp); //获取接口列表
  rpc apiInfoUpdate(ApiInfo) returns(Response);   //更新接口
  rpc apiInfoDelete(WithID) returns(Response);   //删除接口

  rpc accessInfoCreate(AccessInfo) returns(WithID);   //添加接口
  rpc accessInfoIndex(AccessInfoIndexReq) returns(AccessInfoIndexResp); //获取接口列表
  rpc accessInfoUpdate(AccessInfo) returns(Response);   //更新接口
  rpc accessInfoDelete(WithID) returns(Response);   //删除接口
}

service RoleManage {
  rpc roleInfoCreate(RoleInfo) returns(WithID); //添加角色
  rpc roleInfoIndex(RoleInfoIndexReq) returns(RoleInfoIndexResp); //获取角色列表
  rpc roleInfoUpdate(RoleInfo) returns(Response); //更新角色
  rpc roleInfoDelete(WithID) returns(Response); //删除角色

  rpc roleMenuIndex(RoleMenuIndexReq) returns (RoleMenuIndexResp); //获取角色API权限列表
  rpc roleMenuMultiUpdate(RoleMenuMultiUpdateReq) returns(Response); //添加角色

  rpc roleAppIndex(RoleAppIndexReq) returns (RoleAppIndexResp); //获取角色API权限列表
  rpc roleAppMultiUpdate(RoleAppMultiUpdateReq) returns (Response);  //更新角色API权限

  rpc roleModuleIndex(RoleModuleIndexReq) returns (RoleModuleIndexResp); //获取角色API权限列表
  rpc roleModuleMultiUpdate(RoleModuleMultiUpdateReq) returns (Response);  //更新角色API权限


  rpc roleApiAuth(RoleApiAuthReq) returns(Response);   //角色API鉴权
  rpc roleAccessMultiUpdate(RoleAccessMultiUpdateReq) returns (Response);  //更新角色API权限
  rpc roleAccessIndex(RoleAccessIndexReq) returns (RoleAccessIndexResp); //获取角色API权限列表
}


service AppManage{
  rpc appInfoCreate(AppInfo) returns(WithID); //添加角色
  rpc appInfoIndex(AppInfoIndexReq) returns(AppInfoIndexResp); //获取角色列表
  rpc appInfoUpdate(AppInfo) returns(Response); //更新角色
  rpc appInfoDelete(WithIDCode) returns(Response); //删除角色
  rpc appInfoRead(WithIDCode) returns(AppInfo);   //获取详情接口

  rpc appModuleIndex(AppModuleIndexReq) returns (AppModuleIndexResp); //获取角色API权限列表
  rpc appModuleMultiUpdate(AppModuleMultiUpdateReq) returns (Response);  //更新角色API权限
}

service ModuleManage{
  rpc moduleInfoCreate(ModuleInfo) returns(WithID); //添加角色
  rpc moduleInfoIndex(ModuleInfoIndexReq) returns(ModuleInfoIndexResp); //获取角色列表
  rpc moduleInfoUpdate(ModuleInfo) returns(Response); //更新角色
  rpc moduleInfoDelete(WithIDCode) returns(Response); //删除角色
  rpc moduleInfoRead(WithIDCode) returns(ModuleInfo);   //获取详情接口

  rpc moduleMenuCreate(MenuInfo) returns(WithID); //添加菜单
  rpc moduleMenuIndex(MenuInfoIndexReq) returns(MenuInfoIndexResp); //获取菜单列表
  rpc moduleMenuUpdate(MenuInfo) returns(Response); //更新菜单
  rpc moduleMenuDelete(WithID) returns(Response); //删除菜单


}



service Common {
  rpc config(Response) returns(configResp); //添加菜单
}

service Log {
  rpc loginLogIndex(LoginLogIndexReq) returns (LoginLogIndexResp); //获取登录日志列表
  rpc operLogIndex(OperLogIndexReq) returns (OperLogIndexResp);    //获取操作日志列表
  rpc loginLogCreate(LoginLogCreateReq) returns(Response);         //登录日志数据入库
  rpc operLogCreate(OperLogCreateReq) returns(Response);           //操作日志数据入库
}


//项目管理
service ProjectManage {
  //新增项目
  rpc projectInfoCreate (ProjectInfo) returns (ProjectWithID);
  //更新项目
  rpc projectInfoUpdate (ProjectInfo) returns (Response);
  //删除项目
  rpc projectInfoDelete (ProjectWithID) returns (Response);
  //获取项目信息详情
  rpc projectInfoRead (ProjectWithID) returns (ProjectInfo);
  //获取项目信息列表
  rpc projectInfoIndex (ProjectInfoIndexReq) returns (ProjectInfoIndexResp);
}


//项目区域管理
service AreaManage {
  //新增区域
  rpc areaInfoCreate (AreaInfo) returns (AreaWithID);
  //更新区域
  rpc areaInfoUpdate (AreaInfo) returns (Response);
  //删除区域
  rpc areaInfoDelete (AreaWithID) returns (Response);
  //获取区域信息详情
  rpc areaInfoRead (AreaInfoReadReq) returns (AreaInfo);
  //获取区域信息列表
  rpc areaInfoIndex (AreaInfoIndexReq) returns (AreaInfoIndexResp);
}


service TenantManage {
  //新增区域
  rpc tenantInfoCreate (TenantInfoCreateReq) returns (WithID);
  //更新区域
  rpc tenantInfoUpdate (TenantInfo) returns (Response);
  //删除区域
  rpc tenantInfoDelete (WithIDCode) returns (Response);
  //获取租户信息详情
  rpc tenantInfoRead (WithIDCode) returns (TenantInfo);
  //获取租户信息列表
  rpc tenantInfoIndex (TenantInfoIndexReq) returns (TenantInfoIndexResp);

  rpc tenantAccessMultiUpdate(TenantAccessMultiUpdateReq) returns (Response);  //更新角色API权限
  rpc tenantAccessIndex(TenantAccessIndexReq) returns (TenantAccessIndexResp); //获取角色API权限列表

  rpc tenantAppIndex(TenantAppIndexReq) returns (TenantAppIndexResp); //获取租户APP权限列表
  rpc tenantAppCreate(TenantAppCreateReq) returns(Response); //添加角色
  rpc tenantAppDelete(TenantAppWithIDOrCode) returns(Response); //删除角色

  rpc tenantAppModuleMultiCreate(TenantAppCreateReq) returns(Response); //添加角色
  rpc tenantAppModuleCreate(TenantModuleCreateReq) returns(Response); //添加角色
  rpc tenantAppModuleIndex(TenantModuleIndexReq) returns(TenantModuleIndexResp); //获取角色列表
  rpc tenantAppModuleDelete(TenantModuleWithIDOrCode) returns(Response); //删除角色

  rpc tenantAppMenuCreate(TenantAppMenu) returns(WithID); //添加菜单
  rpc tenantAppMenuIndex(TenantAppMenuIndexReq) returns(TenantAppMenuIndexResp); //获取菜单列表
  rpc tenantAppMenuUpdate(TenantAppMenu) returns(Response); //更新菜单
  rpc tenantAppMenuDelete(WithAppCodeID) returns(Response); //删除菜单


}

//--------------------租户管理------------------------

message TenantInfoCreateReq{
  TenantInfo info = 1;
  UserInfo adminUserInfo = 2;
}

message TenantInfo{
  int64 id = 1;
  string name = 2;
  string code = 3;
  int64 adminUserID = 4;
  int64 adminRoleID = 8;
  string baseUrl = 5;      // 基础URL
  string logoUrl = 6;     // 应用logo地址
  google.protobuf.StringValue desc = 7;
}
message TenantInfoIndexReq{
  PageInfo page = 1;//分页信息
  string name = 2;
  string code = 3;
}

message TenantInfoIndexResp{
  repeated  TenantInfo list =1;
  int64 total = 2;
}




message TenantAccessMultiUpdateReq{
  string code = 1;
  repeated  string  accessCodes = 4;
}

message TenantAccessIndexReq{
  string code = 1;
}

message TenantAccessIndexResp{
  repeated string accessCodes = 1;
}


message TenantAppCreateReq{
  string code = 1;
  string appCode = 2;
  repeated TenantAppModule modules = 3;//模块列表
}

message TenantAppWithIDOrCode{
  string code = 1;
  string appCode = 2;
  int64 id = 3;
}

message TenantAppModule{
  string code = 1;
  repeated int64 menuIDs =2;
}

message TenantAppIndexReq{
  PageInfo page = 1;//分页信息
  string code = 2;
  repeated string appCodes = 3;
}

message TenantAppIndexResp{
  int64 total = 1;
  repeated AppInfo list = 2;//app列表数据
}

message TenantAppMultiUpdateReq{
  string code = 2;
  repeated string appCodes = 3;
}

message TenantModuleIndexReq{
  PageInfo page = 1;//分页信息
  string code = 2;
  string appCode =3;
  repeated string moduleCodes = 4;
}

message TenantModuleIndexResp{
  repeated ModuleInfo list = 1;
}

message TenantAppMenuIndexReq{
  PageInfo page = 1;//分页信息
  string code = 2;
  string appCode =3;
  string moduleCode =4;
  bool isRetTree = 5;
  repeated int64 menuIDs = 6;
}
message TenantAppMenuIndexResp{
  repeated TenantAppMenu list = 1;
}

message TenantAppMenu{
  int64 templateID = 1;
  string code = 2;
  string appCode =3;
  MenuInfo info=4;
  repeated TenantAppMenu children = 5;
}


message TenantModuleCreateReq{
  string code = 1;
  string appCode =2;
  string moduleCode = 3;
  repeated int64 menuIDs =4;
}
message TenantModuleWithIDOrCode{
  string code = 1;
  string appCode = 2;
  string moduleCode = 3;
  int64 id = 4;
}

//----------------------------------------------------------------------------------------------

message Point{
  double  longitude = 1;//经度
  double  latitude = 2;//纬度
}

message Response {
}

message PageInfo {
    int64 page = 1;
    int64 size = 2;
    //排序信息
    repeated OrderBy orders = 3;
    message OrderBy {
        //排序的字段名
        string filed = 1;
        //排序方式：0 aes, 1 desc
        int64 sort = 2;
    }
}

message WithID{
  int64 id = 1;
}

message WithIDCode{
  int64 id = 1;
  string code=2;
}

message WithAppCodeID{
  int64 id = 1;
  string appCode=2;
  string code =3;//租户code
}

//----------------------------------------------------------------------------------------------

message ProjectWithID{
  int64 projectID = 1; //项目id（只读）
}

message ProjectInfo {
  int64 createdTime = 1; //创建时间（只读）
  int64 projectID = 2; //项目id（只读）
  string projectName = 3; //项目名称（读写）
  int64 adminUserID = 5;//管理员
//  google.protobuf.StringValue region = 6; //项目省市区县（读写）
  Point Position = 6; //项目区域定位
  google.protobuf.StringValue desc = 8; //项目备注（读写）
}

message ProjectInfoIndexReq {
  PageInfo page = 1; //进行数据分页（不传默认2000相当于全部）
  string projectName = 2; //过滤条件: 项目名称
  repeated int64 projectIDs = 3; //过滤条件: 过滤项目id列表
}

message ProjectInfoIndexResp {
  int64 total = 1; //总数
  repeated ProjectInfo list = 2; //项目列表
}

//----------------------------------------------------------------------------------------------



message AreaInfo {
  int64 createdTime = 1; //创建时间（只读）
  int64 areaID = 2; //项目区域id（只读）
  int64 parentAreaID = 3; //上级项目区域id（只读）
  int64 projectID = 4; //项目id（只读）
  string areaName = 5; //项目区域名称（读写）
  Point Position = 6; //项目区域定位，默认百度坐标系（读写）
  google.protobuf.StringValue desc = 7; //项目区域备注（读写）
  repeated AreaInfo children = 8; //下级项目区域列表（只读）
  repeated int64 areaIDPath =9;
  repeated string areaNamePath =10;
  int64 lowerLevelCount =11;//下级区域的数量
  repeated int64 childrenAreaIDs =12;//所属的子区域id列表
}


message AreaWithID {
  int64 areaID = 1; //项目区域id
}


message AreaInfoReadReq {
  int64 projectID = 1; //项目ids
  int64 areaID = 2; //项目区域id
  bool isRetTree = 3;//是否返回子节点
}

message AreaInfoIndexReq {
  PageInfo page = 1; //进行数据分页（不传默认2000相当于全部）
  int64 projectID = 3; //项目ids
  int64 parentAreaID = 4;
  repeated int64 areaIDs = 5; //区域ids
  bool  isRetTopLevel = 6;//如果该参数为true则返回除了root节点的有权限的最高层的区域列表
}

message AreaInfoIndexResp {
  int64 total = 1; //总数
  repeated AreaInfo list = 2; //项目区域列表
}

//message AreaInfoTreeReq {
//  int64 projectID = 1; //二选一条件: 项目id
//  int64 areaID = 2; //二选一条件: 区域id
//}
//
//message AreaInfoTreeResp {
//  AreaInfo tree = 1; //项目区域树
//}


//----------------------------------------------------------------------------------------------





message AuthApiInfo{
  string route = 1;
  string method = 2;//大写 http 方法

}

message RoleAccessMultiUpdateReq{
  int64 id = 1;//角色ID
  repeated  string  accessCodes = 4;
}

message RoleAccessIndexReq{
  int64 id = 1;//角色ID
}

message RoleAccessIndexResp{
  int64 total = 1;
  repeated string accessCodes = 3;
}



message RoleMenuIndexReq{
  int64 id = 1;//角色ID
  string appCode = 2;//appCode
  string moduleCode = 3;//模块编码
}

message RoleMenuIndexResp{
  int64 total = 1;
  repeated int64 menuIDs = 3;
}

message RoleAppIndexReq{
  int64 id = 1;//角色ID
}

message RoleAppIndexResp{
  int64 total = 1;
  repeated string appCodes = 3;
}

message RoleModuleIndexReq{
  int64 id = 1;//角色ID
  string appCode = 2;//appCode
}

message RoleModuleIndexResp{
  int64 total = 1;
  repeated string moduleCodes = 3;
}


message DateRange{
  string start = 1;
  string end = 2;
}

message LoginLogIndexReq{
  PageInfo page       = 1;  // 分页信息 只获取一个则不填
  string appCode = 2;//应用编码
  string ipAddr = 3;        // 登录IP地址
  string loginLocation = 4; // 登录地点
  DateRange date = 5;       // 时间范围
}

message LoginLogInfo {
  int64  userID = 1;           // 用户id
  string userName = 2;      // 登录账号
  string ipAddr = 3;        // 登录IP地址
  string loginLocation = 4; // 登录地点
  string browser = 5;       // 浏览器
  string os = 6;            // 操作系统
  int64 code = 7;           // 登录状态（200成功 其它失败）
  string msg = 8;           // 提示消息
  int64  createdTime = 9;   // 登录时间
  string appCode = 10;//应用编码
}

message LoginLogIndexResp{
  repeated LoginLogInfo list = 1;
  int64 total = 2; //总记录数
}

message OperLogIndexReq{
  PageInfo page       = 1; //分页信息 只获取一个则不填
  string operName     = 2; //按操作名称查找
  string operUserName = 3; //按操作人员名称查找
  int64 businessType  = 4; //按业务类型（1新增 2修改 3删除 4查询）查找
  string appCode = 5;//应用编码
}

message OperLogInfo {
    int64  userID = 1;                //用户id
    string operUserName = 2;       //操作人员名称
    string operName = 3;           //操作名称
    int64  businessType = 4;       //业务类型（1新增 2修改 3删除 4查询）
    string uri = 5;                //请求地址
    string operIpAddr = 6;         //操作主机地址
    string operLocation = 7;       //操作地点
    string req = 8;                //请求参数
    string resp = 9;               //返回参数
    int64  code = 10;               //登录状态（200成功 其它失败）
    string msg = 11;               //提示消息
    int64  createdTime = 12;       //操作时间
    string appCode = 13;//应用编码
}

message OperLogIndexResp{
  repeated OperLogInfo list = 1;
  int64 total = 2; //总记录数
}

message LoginLogCreateReq{
  int64  userID = 1;           // 用户id
  string userName = 2;      // 登录账号
  string ipAddr = 3;        // 登录IP地址
  string loginLocation = 4; // 登录地点
  string browser = 5;       // 浏览器
  string os = 6;            // 操作系统
  int64 code = 7;           // 登录状态（200成功 其它失败）
  string msg = 8;           // 提示消息
  string appCode = 9;//应用编码
}

message OperLogCreateReq{
  int64  userID = 1;                //用户id
  string operUserName = 2;       //操作人员名称
  string operName = 3;           //操作名称
  int64  businessType = 4;       //业务类型（1新增 2修改 3删除 4查询）
  string uri = 5;                //请求地址
  string route = 6;              //接口路由
  string operIpAddr = 7;         //操作主机地址
  string operLocation = 8;       //操作地点
  string req = 9;                //请求参数
  string resp = 10;              //返回参数
  int64  code = 11;              //返回状态（200成功 其它失败）
  string msg = 12;               //提示消息
  string appCode = 13;//应用编码
}

//用户属性信息
message UserInfo{
  int64  userID = 1;
  string userName =2;
  string password =3;
  string email = 4;
  string phone =5;
  string wechatUnionID = 6;
  string lastIP =7;
  string regIP =8;
  string nickName =9;
  string city =10;
  string country =11;
  string province =12;
  string language =13;
  int64  createdTime =15;
  int64  role = 16;
  int64  sex =17;
  int64  isAllData =18;
  string headImg =19;
  bool isUpdateHeadImg = 20;//只有这个参数为true的时候才会更新图片,传参为图片的file path

}



message UserCreateResp{
  int64 userID = 1;//用户id
}

message UserCheckTokenReq{
  string token = 1;
  string ip = 2;
  string appCode = 3;
}

message UserCheckTokenResp{
  string token = 1;  //如果时间不多会更新jwt，需要判断jwt是否为“” 如果不为空，则需要更新用户的token
  int64 userID = 2;
  repeated int64 roleIDs = 3;
  int64 isAllData = 4;
  string tenantCode = 5;//租户编码
  int64 isAdmin = 6;//是否是超级管理员
  string userName = 7;//用户名
}

message RoleAppMultiUpdateReq{
  int64 id = 1;
  repeated string appCodes = 3;
}

message RoleModuleMultiUpdateReq{
  int64 id = 1;
  string appCode = 2;
  repeated string moduleCodes = 3;
}

message RoleMenuMultiUpdateReq{
  int64 id = 1;
  string appCode = 2;
  string moduleCode = 3;//模块编码
  repeated int64 menuIDs = 4;
}

message RoleApiAuthReq{
  int64 roleID = 1;
  string path = 2;
  string method = 3;
}

message UserInfoCreateReq{
  UserInfo info = 1;
  repeated int64 roleIDs =2;
}

message UserInfoIndexReq{
  PageInfo page       = 1;//分页信息 只获取一个则不填 搜索的字段: userID:用户id userName:登录用户名  email:邮箱  phone:手机号
  string userName = 2;
  string phone = 3;
  string email = 4;
  repeated int64 userIDs =5;
}

message UserInfoIndexResp{
  repeated UserInfo list = 1;
  int64 total = 2;
}



message UserInfoReadReq{
  int64 userID=1;
}


message UserInfoDeleteReq{
  int64 userID = 1;
}

message JwtToken{
  string accessToken = 1;
  int64 accessExpire = 2;
  int64 refreshAfter = 3;
}

message UserCaptchaReq{
  string account = 1;//短信验证时填写手机号,邮箱验证时填写邮箱
  string type = 2;//验证方式:短信验证,图片验证码,邮箱验证
  string use = 3;//用途
  string codeID = 4;//验证码编码
  string code = 5;//验证码
}

message UserCaptchaResp{
  string codeID = 1;//验证码编码
  string code = 2;//验证码--只有图片验证码由apisvr生成,其他方式返回空
  int64 expire = 3;//过期时间
}


message UserForgetPwdReq{
  string account = 1; //登录账号(支持用户名,手机号登录) 账号密码登录时需要填写
  string  type = 2;//账号类型: email:邮箱 phone:手机号
  string password =3;//密码
  string code = 5;//验证码    微信登录填code
  string codeID = 6;//验证码编号 微信登录填state
}

message  UserChangePwdReq{
  string  type = 1;//验证类型: email:邮箱 phone:手机号
  string password =3;//密码
  string code = 5;//验证码    微信登录填code
  string codeID = 6;//验证码编号 微信登录填state
}

message UserLoginReq{
    string account = 1; //登录账号(支持用户名,手机号登录) 账号密码登录时需要填写
    int32 pwdType = 2;//账号密码登录时需要填写.0,无密码 1，明文 2，md5加密
    string password =3;//密码，建议md5转换 密码登录时需要填写
    string loginType =4;//验证类型 phone 手机号 wxOpen 微信开放平台 wxIn 微信内 wxMiniP 微信小程序 pwd 账号密码
    string code = 5;//验证码    微信登录填code
    string codeID = 6;//验证码编号 微信登录填state
    string ip = 7;//透传请求的 ip
}

message UserLoginResp{
  UserInfo info = 1;
  JwtToken token =2;
}

//登录信息注册,注册第一步(注册核心登录信息) 返回一个jwt用来第二步注册
message UserRegisterReq{
  string regType =1; //注册方式:	phone手机号注册 email邮箱注册 wxopen 微信开放平台登录 wxin 微信内登录 wxminip 微信小程序 pwd 账号密码注册
  string account =2;    //手机号注册时填写手机号 账号密码注册时填写userName
  string code =3;    //验证码    微信注册填code
  string codeID =4;  //验证码编号 微信注册填state
  string password =5;
  UserInfo info = 6;//填写用户信息
}

message UserRegisterResp{
  int64 userID = 1;
}


message UserRoleIndexReq{
  int64 userID = 1;
}

message UserRoleIndexResp{
  int64 total = 1;
  repeated RoleInfo list = 2;//角色列表
}

message UserRoleMultiUpdateReq{
  int64 userID = 1;
  repeated int64 roleIDs = 2;//API列表数据
}

//----------------------------------------------------------------------------------------------

message DataProject {
    int64 projectID = 1; //权限数据ID
    int64 authType =2;// 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
}

message DataProjectMultiUpdateReq {
    int64 targetID = 1; //用户ID（必填，雪花ID）
    string targetType = 2;
    repeated DataProject projects = 3; //权限数据IDs（必填）
}

message DataProjectIndexReq {
    PageInfo page = 1 ; //进行数据分页（不传默认2000相当于全部）
    int64 userID =2;//获取该用户实际获得的权限
    int64 targetID = 3;
    string targetType =4;
}

message DataProjectIndexResp {
    int64 total = 1;           //总数
    repeated DataProject list = 2; //用户数据权限列表
}


message DataArea {
  int64 areaID = 1; //项目id
  int64 authType =2;// 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
}

message DataAreaMultiUpdateReq {
  int64 targetID = 1; //用户ID（必填，雪花ID）
  string targetType = 2;
  int64 projectID = 3; //项目id
  repeated DataArea areas = 4; //权限数据IDs
}

message DataAreaIndexReq {
  PageInfo page = 1 ; //进行数据分页（不传默认2000相当于全部）
  int64 userID = 2; //用户ID（必填，雪花ID）
  int64 projectID = 3; //项目id 必选
  int64 targetID = 4;
  string targetType =5;
}

message DataAreaIndexResp {
  int64 total = 1;           //总数
  repeated DataArea list = 2; //用户数据权限列表
}

message DataAreaMultiDeleteReq{
  int64 projectID = 1; //项目id 必选
  int64 targetID = 2;
  string targetType =3;
  repeated int64 areaIDs = 4;
}

message UserAreaApplyCreateReq{
  int64 areaID = 1; //项目id
  int64 authType =2;// 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
}

message UserAreaApplyIndexReq{
  PageInfo page = 1 ; //进行数据分页（不传默认2000相当于全部）
  repeated int64 authTypes =2;// 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
}

message UserAreaApplyInfo{
  int64 id = 1; //项目id
  int64 userID = 2;
  int64 areaID = 3; //项目id
  int64 authType =4;// 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
  int64 createdTime = 5;
}

message UserAreaApplyIndexResp{
  int64 total = 1;           //总数
  repeated UserAreaApplyInfo list = 2; //用户数据权限列表
}

message UserAreaApplyDealReq{
  bool isApprove = 1;//是否同意
  repeated int64 ids = 2; //授权申请的id列表
}





//模块相关接口

message ModuleInfo{
  int64 id = 1;
  string name= 2;          // 模块名称
  string code = 3;          // 模块编码
  google.protobuf.StringValue desc = 4;        // 模块描述
  int64 type = 5;
  int64 subType=12;
  string path = 6;
  string url = 7;
  string icon = 8;
  int64 order = 9;
  int64 hideInMenu = 10;
  google.protobuf.StringValue body = 11;
}

message ModuleInfoIndexReq{
  PageInfo page = 1;//分页信息
  string name = 2;
  string code = 3;
  repeated string codes =4;
  string appCode = 5;
}

message ModuleInfoIndexResp{
  repeated  ModuleInfo list =1;
  int64 total = 2;
}

//----------------------------------------------------------------------------------------------
//应用相关接口

message AppInfo{
  int64 id = 1;
  string name= 2;          // 应用名称
  string type=7;//应用类型 web:web页面  app:应用  mini:小程序
  string code = 3;          // 应用编码
  google.protobuf.StringValue desc = 4;        // 应用描述
  string baseUrl = 5;      // 基础URL
  string logoUrl = 6;     // 应用logo地址
}

message AppInfoIndexReq{
  PageInfo page = 1;//分页信息
  string name = 2;
  string code = 3;
}

message AppInfoIndexResp{
  repeated  AppInfo list =1;
  int64 total = 2;
}

message AppModuleMultiUpdateReq{
  string code = 1;//应用code
  repeated string moduleCodes = 3;
}

message AppModuleIndexReq{
  string code = 1;//应用code
}

message AppModuleIndexResp{
  repeated string moduleCodes = 3;
}


//----------------------------------------------------------------------------------------------


message RoleInfoIndexReq{
  PageInfo page = 1;//分页信息
  string name = 2;
  int64 status = 3;
}

message RoleInfoIndexResp{
  repeated  RoleInfo list =1;
  int64 total = 2;
}

message RoleInfo{
  int64   id = 1;
  string  name = 2;
  string  desc = 3;
  int64   createdTime  =4;
  int64   status = 5;
}



message RoleAppUpdateReq{
  int64 id = 1;
  repeated string appCodes = 2;
}

message MenuInfoIndexReq{
  string  moduleCode = 1;
  repeated int64 menuIDs = 2;
  bool isRetTree = 3;
}

message MenuInfo{
  string moduleCode = 12;
  int64 id = 1;
  string name = 2;
  int64 parentID = 3;
  int64 type = 4;
  string path = 5;
  string component = 6;
  string icon = 7;
  string redirect = 8;
  int64 createTime = 9;
  int64 order = 10;
  int64 hideInMenu = 11;
  google.protobuf.StringValue body = 13;
  repeated MenuInfo children = 14;
}
message MenuInfoIndexResp{
  repeated MenuInfo list = 1;
}



message Map{
  string mode = 1;       //坐标系 默认百度坐标系
  string accessKey = 2;  //设备地图key
}
message configResp{
  Map map = 1;           //设备地图相关配置
}

message ApiInfoIndexReq{
  PageInfo page = 1;// 分页信息
  string route = 2; // 接口路由
  string method = 3; // 接口请求方式: POST GET
  string name = 4;  // 接口名称
  int64 IsAuthTenant = 5;//是否可以授权给普通租户
  repeated int64 apiIDs = 6;//API列表数据
  string accessCode =7;
}

message ApiInfo{
  string accessCode = 7;
  int64 id = 1;            // 接口编号
  string route = 2;        // 接口路由
  string method = 3;        // 接口请求方式: POST GET
  string name = 5;         // 接口名称
  int64  businessType = 6; // 业务类型（1新增 2修改 3删除 4查询 5其它)
  int64 IsAuthTenant = 8;//是否可以授权给普通租户
  string desc = 9;//描述
}

message ApiInfoIndexResp{
  repeated ApiInfo list = 1; // 接口列表数据
  int64 total = 2;           // 接口列表总记录数
}

message AccessInfoIndexReq{
  PageInfo page = 1;// 分页信息
  string group = 4; // 接口分组
  string code =6;
  repeated string codes = 7;
  string name = 8;  // 接口名称
  int64 isNeedAuth = 9;//是否需要权限认证 1是 2否
  bool WithApis =10;
}

message AccessInfo{
  int64 id = 1;            // 接口编号
  string code = 7;
  string name = 5;         // 接口名称
  string group = 4;        // 接口分组
  int64 isNeedAuth = 8;//是否需要权限认证 1是 2否
  string desc = 9;//描述
  repeated ApiInfo Apis = 10;
}

message AccessInfoIndexResp{
  repeated AccessInfo list = 1; // 接口列表数据
  int64 total = 2;           // 接口列表总记录数
}

