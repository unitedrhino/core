syntax = "proto3";
option go_package = "pb/sys";
import "google/protobuf/wrappers.proto";

package sys;

service UserManage {
  rpc userInfoCreate(UserInfoCreateReq) returns(UserCreateResp);//创建用户信息
  rpc userInfoIndex(UserInfoIndexReq) returns(UserInfoIndexResp);
  rpc userInfoUpdate(userInfoUpdateReq) returns(Empty);//更新用户基本数据
  rpc userInfoRead(UserInfoReadReq) returns(UserInfo);//获取用户信息
  rpc userInfoDelete(UserInfoDeleteReq) returns(Empty);//刪除用戶
  rpc userLogin(UserLoginReq) returns(UserLoginResp);
  rpc userForgetPwd(UserForgetPwdReq)returns(Empty);
  rpc userCaptcha(UserCaptchaReq)returns(UserCaptchaResp);
  rpc userCheckToken(UserCheckTokenReq) returns(UserCheckTokenResp);
  rpc userRegister(UserRegisterReq) returns(UserRegisterResp);
  rpc userChangePwd(UserChangePwdReq) returns(Empty);
  rpc userCodeToUserID(UserCodeToUserIDReq)returns(UserCodeToUserIDResp);//第三方的code获取用户的id

  rpc userRoleIndex(UserRoleIndexReq) returns (UserRoleIndexResp); //获取角色API权限列表
  rpc userRoleMultiUpdate(UserRoleMultiUpdateReq) returns(Empty); //添加角色
  rpc userRoleMultiCreate(UserRoleMultiUpdateReq) returns(Empty); //添加角色

  rpc userAreaApplyCreate(UserAreaApplyCreateReq) returns(Empty);//申请区域权限

  rpc userMessageMultiIsRead(IDList)returns(Empty);//用户消息批量已读
  rpc userMessageIndex(UserMessageIndexReq)returns(UserMessageIndexResp);//获取用户消息
  rpc userMessageStatistics(Empty)returns(UserMessageStatisticsResp);
  rpc userProfileRead(WithCode)returns(UserProfile);
  rpc userProfileUpdate(UserProfile)returns(Empty);
  rpc userProfileIndex(UserProfileIndexReq)returns(UserProfileIndexResp);
}

service DataManage {
  rpc dataProjectMultiUpdate (DataProjectMultiUpdateReq) returns (Empty);   //授权用户数据权限
  rpc dataProjectCreate (DataProjectSaveReq) returns (Empty);   //授权用户数据权限
  rpc dataProjectDelete (DataProjectDeleteReq) returns (Empty);   //授权用户数据权限
  rpc dataProjectIndex (DataProjectIndexReq) returns (DataProjectIndexResp); //获取用户数据权限列表

  rpc dataAreaMultiUpdate (DataAreaMultiUpdateReq) returns (Empty);   //授权用户数据权限
  rpc dataAreaIndex (DataAreaIndexReq) returns (DataAreaIndexResp); //获取用户数据权限列表
  rpc dataAreaMultiDelete (DataAreaMultiDeleteReq) returns (Empty); //删除用户授权

  rpc userAreaApplyIndex(UserAreaApplyIndexReq)returns(UserAreaApplyIndexResp);
  rpc userAreaApplyDeal(UserAreaApplyDealReq)returns(Empty);//处理区域权限申请


  rpc dataOpenAccessIndex(OpenAccessIndexReq)returns(OpenAccessIndexResp);
  rpc dataOpenAccessRead(WithID)returns(OpenAccess);
  rpc dataOpenAccessUpdate(OpenAccess)returns(Empty);
  rpc dataOpenAccessCreate(OpenAccess)returns(WithID);
  rpc dataOpenAccessDelete(WithID) returns(Empty);
}


//通知管理
service NotifyManage {
  //站内信
  rpc messageInfoSend(MessageInfoSendReq)returns(WithID);//发送站内信给用户
  rpc messageInfoIndex(MessageInfoIndexReq)returns(MessageInfoIndexResp);//获取全局站内信列表
  rpc messageInfoUpdate(MessageInfo)returns(Empty);//更新站内信
  rpc messageInfoDelete(WithID)returns(Empty);//删除站内信

  //通知配置信息
  rpc notifyConfigRead(WithIDCode)returns(NotifyConfig);
  rpc notifyConfigCreate(NotifyConfig)returns(WithID);
  rpc notifyConfigUpdate(NotifyConfig)returns(Empty);
  rpc notifyConfigIndex(NotifyConfigIndexReq)returns(NotifyConfigIndexResp);
  rpc notifyConfigDelete(WithID)returns(Empty);
  rpc notifyConfigSend(NotifyConfigSendReq)returns(Empty);//发送消息通知(短信,邮箱,钉钉推送,微信推送,app推送)

  //通知模版
  rpc notifyTemplateRead(WithID)returns(NotifyTemplate);
  rpc notifyTemplateCreate(NotifyTemplate)returns(WithID);
  rpc notifyTemplateUpdate(NotifyTemplate)returns(Empty);
  rpc notifyTemplateIndex(NotifyTemplateIndexReq)returns(NotifyTemplateIndexResp);
  rpc notifyTemplateDelete(WithID)returns(Empty);

  //租户通知配置
  rpc notifyConfigTemplateUpdate(NotifyConfigTemplate)returns(Empty);
  rpc notifyConfigTemplateDelete(NotifyConfigTemplateDeleteReq)returns(Empty);

  rpc notifyConfigTemplateIndex(NotifyConfigTemplateIndexReq)returns(NotifyConfigTemplateIndexResp);

  rpc notifyChannelRead(WithID)returns(NotifyChannel);
  rpc notifyChannelCreate(NotifyChannel)returns(WithID);
  rpc notifyChannelUpdate(NotifyChannel)returns(Empty);
  rpc notifyChannelIndex(NotifyChannelIndexReq)returns(NotifyChannelIndexResp);
  rpc notifyChannelDelete(WithID)returns(Empty);
}

service AccessManage{
  rpc apiInfoCreate(ApiInfo) returns(WithID);   //添加接口
  rpc apiInfoIndex(ApiInfoIndexReq) returns(ApiInfoIndexResp); //获取接口列表
  rpc apiInfoUpdate(ApiInfo) returns(Empty);   //更新接口
  rpc apiInfoDelete(WithID) returns(Empty);   //删除接口

  rpc accessInfoMultiImport(AccessInfoMultiImportReq) returns(AccessInfoMultiImportResp);   //添加接口
  rpc accessInfoCreate(AccessInfo) returns(WithID);   //添加接口
  rpc accessInfoIndex(AccessInfoIndexReq) returns(AccessInfoIndexResp); //获取接口列表
  rpc accessInfoUpdate(AccessInfo) returns(Empty);   //更新接口
  rpc accessInfoDelete(WithID) returns(Empty);   //删除接口
}

service RoleManage {
  rpc roleInfoCreate(RoleInfo) returns(WithID); //添加角色
  rpc roleInfoIndex(RoleInfoIndexReq) returns(RoleInfoIndexResp); //获取角色列表
  rpc roleInfoUpdate(RoleInfo) returns(Empty); //更新角色
  rpc roleInfoDelete(WithID) returns(Empty); //删除角色

  rpc roleMenuIndex(RoleMenuIndexReq) returns (RoleMenuIndexResp); //获取角色API权限列表
  rpc roleMenuMultiUpdate(RoleMenuMultiUpdateReq) returns(Empty); //添加角色

  rpc roleAppIndex(RoleAppIndexReq) returns (RoleAppIndexResp); //获取角色API权限列表
  rpc roleAppMultiUpdate(RoleAppMultiUpdateReq) returns (Empty);  //更新角色API权限

  rpc roleModuleIndex(RoleModuleIndexReq) returns (RoleModuleIndexResp); //获取角色API权限列表
  rpc roleModuleMultiUpdate(RoleModuleMultiUpdateReq) returns (Empty);  //更新角色API权限


  rpc roleApiAuth(RoleApiAuthReq) returns(RoleApiAuthResp);   //角色API鉴权
  rpc roleAccessMultiUpdate(RoleAccessMultiUpdateReq) returns (Empty);  //更新角色API权限
  rpc roleAccessIndex(RoleAccessIndexReq) returns (RoleAccessIndexResp); //获取角色API权限列表
}


service AppManage{
  rpc appInfoCreate(AppInfo) returns(WithID); //添加角色
  rpc appInfoIndex(AppInfoIndexReq) returns(AppInfoIndexResp); //获取角色列表
  rpc appInfoUpdate(AppInfo) returns(Empty); //更新角色
  rpc appInfoDelete(WithIDCode) returns(Empty); //删除角色
  rpc appInfoRead(WithIDCode) returns(AppInfo);   //获取详情接口

  rpc appModuleIndex(AppModuleIndexReq) returns (AppModuleIndexResp); //获取角色API权限列表
  rpc appModuleMultiUpdate(AppModuleMultiUpdateReq) returns (Empty);  //更新角色API权限
}

service ModuleManage{
  rpc moduleInfoCreate(ModuleInfo) returns(WithID); //添加角色
  rpc moduleInfoIndex(ModuleInfoIndexReq) returns(ModuleInfoIndexResp); //获取角色列表
  rpc moduleInfoUpdate(ModuleInfo) returns(Empty); //更新角色
  rpc moduleInfoDelete(WithIDCode) returns(Empty); //删除角色
  rpc moduleInfoRead(WithIDCode) returns(ModuleInfo);   //获取详情接口

  rpc moduleMenuCreate(MenuInfo) returns(WithID); //添加菜单
  rpc moduleMenuIndex(MenuInfoIndexReq) returns(MenuInfoIndexResp); //获取菜单列表
  rpc moduleMenuUpdate(MenuInfo) returns(Empty); //更新菜单
  rpc moduleMenuDelete(WithID) returns(Empty); //删除菜单
}

service DictManage{
  rpc dictInfoCreate(DictInfo) returns(WithID); //添加角色
  rpc dictInfoIndex(DictInfoIndexReq) returns(DictInfoIndexResp); //获取角色列表
  rpc dictInfoUpdate(DictInfo) returns(Empty); //更新角色
  rpc dictInfoDelete(WithID) returns(Empty); //删除角色
  rpc dictInfoRead(DictInfoReadReq) returns(DictInfo);   //获取详情接口

  rpc dictDetailRead(DictDetailReadReq)returns(DictDetail);
  rpc dictDetailCreate(DictDetail) returns(WithID); //添加角色
  rpc dictDetailIndex(DictDetailIndexReq) returns(DictDetailIndexResp); //获取角色列表
  rpc dictDetailUpdate(DictDetail) returns(Empty); //更新角色
  rpc dictDetailDelete(WithID) returns(Empty); //删除角色
}


service Common {
  rpc config(Empty) returns(configResp); //添加菜单
  rpc QRCodeRead(QRCodeReadReq)returns(QRCodeReadResp);
  rpc WeatherRead(WeatherReadReq)returns(WeatherReadResp);

  rpc slotInfoIndex(SlotInfoIndexReq) returns(SlotInfoIndexResp);//获取插槽列表
  rpc slotInfoCreate(SlotInfo) returns(WithID); //添加角色
  rpc slotInfoUpdate(SlotInfo) returns(Empty); //更新角色
  rpc slotInfoDelete(WithID) returns(Empty); //删除角色
  rpc slotInfoRead(WithID) returns(SlotInfo);   //获取详情接口
}

service Log {
  rpc loginLogIndex(LoginLogIndexReq) returns (LoginLogIndexResp); //获取登录日志列表
  rpc operLogIndex(OperLogIndexReq) returns (OperLogIndexResp);    //获取操作日志列表
  rpc loginLogCreate(LoginLogCreateReq) returns(Empty);         //登录日志数据入库
  rpc operLogCreate(OperLogCreateReq) returns(Empty);           //操作日志数据入库
}


//项目管理
service ProjectManage {
  //新增项目
  rpc projectInfoCreate (ProjectInfo) returns (ProjectWithID);
  //更新项目
  rpc projectInfoUpdate (ProjectInfo) returns (Empty);
  //删除项目
  rpc projectInfoDelete (ProjectWithID) returns (Empty);
  //获取项目信息详情
  rpc projectInfoRead (ProjectWithID) returns (ProjectInfo);
  //获取项目信息列表
  rpc projectInfoIndex (ProjectInfoIndexReq) returns (ProjectInfoIndexResp);

  rpc projectProfileRead(ProjectProfileReadReq)returns(ProjectProfile);
  rpc projectProfileUpdate(ProjectProfile)returns(Empty);
  rpc projectProfileIndex(ProjectProfileIndexReq)returns(ProjectProfileIndexResp);
}


//项目区域管理
service AreaManage {
  //新增区域
  rpc areaInfoCreate (AreaInfo) returns (AreaWithID);
  //更新区域
  rpc areaInfoUpdate (AreaInfo) returns (Empty);
  //删除区域
  rpc areaInfoDelete (AreaWithID) returns (Empty);
  //获取区域信息详情
  rpc areaInfoRead (AreaInfoReadReq) returns (AreaInfo);
  //获取区域信息列表
  rpc areaInfoIndex (AreaInfoIndexReq) returns (AreaInfoIndexResp);

  rpc areaProfileRead(AreaProfileReadReq)returns(AreaProfile);
  rpc areaProfileUpdate(AreaProfile)returns(Empty);
  rpc areaProfileIndex(AreaProfileIndexReq)returns(AreaProfileIndexResp);
}


service TenantManage {
  //新增区域
  rpc tenantInfoCreate (TenantInfoCreateReq) returns (WithID);
  //更新区域
  rpc tenantInfoUpdate (TenantInfo) returns (Empty);
  //删除区域
  rpc tenantInfoDelete (WithIDCode) returns (Empty);
  //获取租户信息详情
  rpc tenantInfoRead (WithIDCode) returns (TenantInfo);
  //获取租户信息列表
  rpc tenantInfoIndex (TenantInfoIndexReq) returns (TenantInfoIndexResp);

  rpc tenantConfigUpdate(TenantConfig)returns(Empty);
  rpc tenantConfigRead(WithCode)returns(TenantConfig);

  rpc tenantAccessMultiDelete(TenantAccessMultiSaveReq) returns (Empty);  //更新角色API权限
  rpc tenantAccessMultiCreate(TenantAccessMultiSaveReq) returns (Empty);  //更新角色API权限
  rpc tenantAccessMultiUpdate(TenantAccessMultiSaveReq) returns (Empty);  //更新角色API权限
  rpc tenantAccessIndex(TenantAccessIndexReq) returns (TenantAccessIndexResp); //获取角色API权限列表

  rpc tenantAppIndex(TenantAppIndexReq) returns (TenantAppIndexResp); //获取租户APP权限列表
  rpc tenantAppCreate(TenantAppInfo) returns(Empty); //添加角色
  rpc tenantAppRead(TenantAppWithIDOrCode) returns(TenantAppInfo); //添加角色
  rpc tenantAppUpdate(TenantAppInfo) returns(Empty); //添加角色
  rpc tenantAppDelete(TenantAppWithIDOrCode) returns(Empty); //删除角色

  rpc tenantAppModuleMultiCreate(TenantAppInfo) returns(Empty); //添加角色
  rpc tenantAppModuleCreate(TenantModuleCreateReq) returns(Empty); //添加角色
  rpc tenantAppModuleIndex(TenantModuleIndexReq) returns(TenantModuleIndexResp); //获取角色列表
  rpc tenantAppModuleDelete(TenantModuleWithIDOrCode) returns(Empty); //删除角色

  rpc tenantAppMenuCreate(TenantAppMenu) returns(WithID); //添加菜单
  rpc tenantAppMenuIndex(TenantAppMenuIndexReq) returns(TenantAppMenuIndexResp); //获取菜单列表
  rpc tenantAppMenuUpdate(TenantAppMenu) returns(Empty); //更新菜单
  rpc tenantAppMenuDelete(WithAppCodeID) returns(Empty); //删除菜单



  rpc tenantOpenCheckToken(TenantOpenCheckTokenReq) returns(TenantOpenCheckTokenResp);

  rpc tenantOpenWebHook(WithCode)returns(TenantOpenWebHook);

  rpc tenantAgreementIndex(TenantAgreementIndexReq) returns(TenantAgreementIndexResp); //获取协议列表
  rpc tenantAgreementUpdate(TenantAgreement) returns(Empty); //更新协议
  rpc tenantAgreementCreate(TenantAgreement) returns(WithID); //创建协议
  rpc tenantAgreementRead(WithIDCode) returns(TenantAgreement); //获取协议详情
  rpc tenantAgreementDelete(WithID) returns(Empty); //删除协议
}

//运营
service ops{
  //维护工单  Work Order
  rpc opsWorkOrderCreate(OpsWorkOrder) returns(WithID);
  rpc opsWorkOrderUpdate(OpsWorkOrder) returns(Empty);
  rpc opsWorkOrderIndex(OpsWorkOrderIndexReq) returns(OpsWorkOrderIndexResp);

  //反馈
  rpc opsFeedbackCreate(OpsFeedback)returns(WithID);
  rpc opsFeedbackUpdate(OpsFeedback)returns(Empty);
  rpc opsFeedbackIndex(OpsFeedbackIndexReq)returns(OpsFeedbackIndexResp);
}

message SendOption {
  int64  timeoutToFail = 1;//超时失败时间
  int64  requestTimeout = 2;//请求超时,超时后会进行重试
  int64  retryInterval = 3;//重试间隔
}

message ThirdAppConfig {
  string appID =1;
  string appKey=2;//微信小程序无需填写
  string appSecret=3;
}

message ThirdApp {
  string version =1;// 应用版本
  string versionDesc=2;//版本说明
  string filePath=3;// 文件路径,拿来下载文件
  bool isUpdateFilePath=4;// 文件路径,拿来下载文件
}


message IDList{
  repeated int64 ids=1;
}

//消息中心

message NotifyConfig{
  int64 id =1; // id编号
  string group =2; //分组
  string code =3; // 通知类型编码
  string name =4; //通知的命名
  repeated string supportTypes =5; //支持的通知类型
  repeated string enableTypes =8; //启用的通知类型
  string desc =6; // 项目备注
  int64 isRecord =7; //是否记录该消息,是的情况下会将消息存一份到消息中心
  map<string,string> params =12; //变量属性 key是参数,value是描述
}

message NotifyConfigIndexReq{
  PageInfo page =1;
  string group =2; //分组
  string code =3; // 通知类型编码
  string name =4; //通知的命名
}
message NotifyConfigIndexResp{
  repeated NotifyConfig list =1;
  int64 total= 2;
}

message NotifyTemplate{
  int64 id =1;  // id编号
  string tenantCode =2;  //限定租户,不填是通用的
  string name =3;  //通知的命名
  string notifyCode =4;  //对应的配置Code
  string type =5;  //对应的配置类型 sms email
  string templateCode =6;  // 通知类型编码
  string signName =7;  //签名(短信)
  string subject =8;  //默认消息主题
  string body =9;  //默认模版内容
  string desc =10;  // 备注
  int64 channelID =11;//通道ID
  NotifyChannel Channel =12;
}

message NotifyChannel{
  int64 id =1;  // id编号
  string name =2;  //通知的命名
  string type =3;  //对应的配置类型 sms email
  string desc =4;  // 备注
  string webhook =5;//钉钉webhook及企微webhook
  ThirdEmail email =6;//邮箱配置
  ThirdAppConfig app =7;//第三方应用配置
  ThirdSms sms =8;//短信配置
}

message NotifyChannelIndexReq{
  PageInfo page =1;
  string name =3;  //通知的命名
  string type =2;  //对应的配置类型 sms email
}

message NotifyChannelIndexResp{
  repeated NotifyChannel list =1;
  int64 total= 2;
}

message ThirdEmail {
  string From    =1;// 发件人  你自己要发邮件的邮箱
  string Host    =2;// 服务器地址 例如 smtp.qq.com  请前往QQ或者你要发邮件的邮箱查看其smtp协议
  string Secret  =3;// 密钥    用于登录的密钥 最好不要用邮箱密码 去邮箱smtp申请一个用于登录的密钥
  string Nickname=4;// 昵称    发件人昵称 通常为自己的邮箱
  int64 Port     =5;// 端口     请前往QQ或者你要发邮件的邮箱查看其smtp协议 大多为 465
  int64 IsSSL    =6;// 是否SSL   是否开启SSL
}



message ThirdSms {
  string type =1;//ali|tencent
  string accessKeyID =2;
  string accessKeySecret =3;
  string appID = 4;
  string appKey = 5;
}

message NotifyTemplateIndexReq{
  PageInfo page =1;
  string name =3;  //通知的命名
  string notifyCode =4;  //对应的配置Code
  string type =5;  //对应的配置类型 sms email
}

message NotifyTemplateIndexResp{
  repeated NotifyTemplate list =1;
  int64 total= 2;
}

message MessageInfoIndexReq{
  PageInfo page =1;
  string group =2; //分组
  string notifyCode  =4;
}

message MessageInfoIndexResp{
  repeated MessageInfo list=1;
  int64 total = 2;
}

message MessageInfoSendReq{
  repeated int64 userIDs     =1; //指定用户ID
  int64 isGlobal =2;//全局消息
  string notifyCode  =4;         //通知的code
  string subject     =5; //通知主题
  string body        =6;
  string str1        =7;
  string str2        =8;
  string str3        =9;
  repeated string withTypes =10;  //同时推送指定方式 sms email
  int64 NotifyTime = 11;//通知时间,不传为立刻通知
}

message MessageInfo {
  int64 id=10;
  string group =1;
  string notifyCode =2;
  string notifyName =12;
  string subject=3;
  string body=4;
  string str1=5;
  string str2=6;
  string str3=7;
  int64 isGlobal =8;
  int64 createdTime=9;
  int64 NotifyTime = 11;//通知时间,不传为立刻通知
}


message NotifyConfigTemplateDeleteReq{
  string notifyCode =2;
  string type =3;
}

message NotifyConfigTemplateIndexReq{
  string notifyCode =2;
  string type =3;
}

message NotifyConfigTemplateIndexResp{
  repeated NotifyConfigTemplate list =1;
}

message NotifyConfigTemplate{
  int64 id =1;
  string notifyCode =2;
  string type =3;
  int64 templateID =4;
}

message TenantAgreement{
  int64 id =1;
  string code =2;//协议编码
  string name =3;//协议名称
  string title =4;
  string content = 5;
}

message TenantAgreementIndexReq{
  PageInfo page =1;
}

message TenantAgreementIndexResp{
  repeated TenantAgreement list =1;
  int64 total= 2;
}


message TenantOpenCheckTokenReq{
  string token = 1;
  string ip = 2;
}

message TenantOpenCheckTokenResp{
  int64 userID = 1;
  string tenantCode = 5;//租户编码
  int64 isAdmin = 6;//是否是超级管理员
  string userName = 7;//用户名
}

message TenantOpenWebHook{
  int64 id =1;
  string tenantCode =2;
  string code =3;
  string uri =5;
  repeated string hosts =6;
  string desc =7;
  map<string,string> handler =8;
}


message OpenAccess{
  int64 id =1;
  string tenantCode =2;
  string code =3;
  int64 userID =4;
  string accessSecret =5;
  repeated string ipRange =6;
  string desc =7;
}

message OpenAccessIndexReq{
  PageInfo page =1;
  string tenantCode =2;
  string code =3;
  int64 userID =4;
}

message OpenAccessIndexResp{
  int64 total =1;
  repeated OpenAccess list=2;
}



/* 用户相关 */

message UserProfile{
  string code =1;
  string params =2;
}

message UserProfileIndexReq{
  repeated string codes =1;
}

message UserProfileIndexResp{
  repeated UserProfile profiles =1;
}

message UserMessage{
  int64 id =1;
  int64 userID=2;
  int64 isRead=3;
  MessageInfo message=4;
}

message UserMessageIndexReq{
  PageInfo page =1;
  string group =2;
  string notifyCode =3;
  int64 isRead = 4;
  string str1        =5;
  string str2        =6;
  string str3        =7;
}

message UserMessageStatisticsResp{
   repeated UserMessageStatistics list =1;
}

message UserMessageStatistics{
  string group=1;
  int64 count=2;
}

message UserMessageIndexResp{
  int64 total =1;
  repeated UserMessage list=2;
}

message NotifyConfigSendReq{
      repeated int64 userIDs     =1; //只有填写了用户ID才会记录
      repeated string accounts    =2;
//      string accountType =3;
      string notifyCode  =4;         //通知的code
      string type        =5; //通知类型
      map<string,string> params      =6;
      string str1        =7;
      string str2        =8;
      string str3        =9;
      int64 templateID =10;//指定模版
}

//--------------------租户管理------------------------

message TenantInfoCreateReq{
  TenantInfo info = 1;
  UserInfo adminUserInfo = 2;
}

message TenantInfo{
  int64 id = 1;
  string name = 2;
  string code = 3;
  int64 adminUserID = 4;
  int64 adminRoleID = 5;
  google.protobuf.StringValue desc = 6;
  int64 defaultProjectID = 7;
  int64 defaultAreaID = 8;
  string backgroundImg =9;
  bool isUpdateBackgroundImg = 10;
  string backgroundColour =15;//背景颜色
  google.protobuf.StringValue backgroundDesc =19;//背景描述
  string logoImg =11;
  bool isUpdateLogoImg =12;
  string title =13;
  string titleEn =14;
  int64 createdTime =16;
  int64 status =17;
  string footer =18;//页尾
  int64 userCount =20;//用户统计
}
message TenantInfoIndexReq{
  PageInfo page = 1;//分页信息
  string name = 2;
  string code = 3;
  int64 status = 4;
}

message TenantInfoIndexResp{
  repeated  TenantInfo list =1;
  int64 total = 2;
}

message TenantConfig{
  int64 id = 1;
  string name = 2;
  string tenantCode = 3;//租户编码
  int64 registerRoleID=4;//注册分配的角色id
  string weatherKey =7;//和风天气秘钥 参考: https://dev.qweather.com/
  int64 checkUserDelete=5;//1(禁止项目管理员注销账号) 2(不禁止项目管理员注销账号)
  google.protobuf.Int64Value deviceLimit = 8;//租户下的设备数量限制,0为不限制
  repeated  TenantConfigRegisterAutoCreateProject registerAutoCreateProject =6;//注册自动创建项目
}

message TenantConfigRegisterAutoCreateProject{
    int64 id =4;
    string projectName =1;
    int64 isSysCreated =2; //是否是系统创建的,系统创建的只有管理员可以删除
    repeated TenantConfigRegisterAutoCreateArea areas=3;
}
message TenantConfigRegisterAutoCreateArea{
  int64 id =5;
  string  areaName =1;
  string  areaImg =2;
  int64   isSysCreated = 3;//是否是系统创建的,系统创建的只有管理员可以删除
  bool isUpdateAreaImg=4;//是否更新区域图片
}

message TenantAccessMultiSaveReq{
  string code = 1;
  repeated  string  accessCodes = 4;
}

message TenantAccessIndexReq{
  string code = 1;
}

message TenantAccessIndexResp{
  repeated string accessCodes = 1;
}


message TenantAppInfo{
  int64 id =6;
  string code = 1;
  string appCode = 2;
  repeated TenantAppModule modules = 3;//模块列表
  ThirdAppConfig dingMini =4;//钉钉小程序
  ThirdAppConfig wxMini =5;//微信小程序
  ThirdAppConfig wxOpen =7;//微信开放 web app需要填写
  ThirdApp android =10; //安卓应用
  repeated string LoginTypes =8;//支持的登录类型(不填支持全部登录方式):  	 "email":邮箱 "phone":手机号  "wxMiniP":微信小程序  "wxOpen": 微信开放平台登录   "dingApp":钉钉应用(包含小程序,h5等方式)  "pwd":账号密码注册
  int64 isAutoRegister =9;//登录未注册是否自动注册
}

message TenantAppWithIDOrCode{
  string code = 1;
  string appCode = 2;
  int64 id = 3;
}

message TenantAppModule{
  string code = 1;
  repeated int64 menuIDs =2;
}

message TenantAppIndexReq{
  PageInfo page = 1;//分页信息
  string code = 2;
  repeated string appCodes = 3;
  string type=4;//应用类型 web:web页面  app:应用  mini:小程序
  string subType=5;//子类型  wx:微信小程序  dingTalk:钉钉小程序
  string appID =6;
}

message TenantAppIndexResp{
  int64 total = 1;
  repeated TenantAppInfo list = 2;//app列表数据
}

message TenantAppMultiUpdateReq{
  string code = 2;
  repeated string appCodes = 3;
}

message TenantModuleIndexReq{
  PageInfo page = 1;//分页信息
  string code = 2;
  string appCode =3;
  repeated string moduleCodes = 4;
}

message TenantModuleIndexResp{
  repeated ModuleInfo list = 1;
}

message TenantAppMenuIndexReq{
  PageInfo page = 1;//分页信息
  string code = 2;
  string appCode =3;
  string moduleCode =4;
  bool isRetTree = 5;
  repeated int64 menuIDs = 6;
  int64 isCommon = 7;
}
message TenantAppMenuIndexResp{
  repeated TenantAppMenu list = 1;
}

message TenantAppMenu{
  int64 templateID = 1;
  string code = 2;
  string appCode =3;
  MenuInfo info=4;
  repeated TenantAppMenu children = 5;
}


message TenantModuleCreateReq{
  string code = 1;
  string appCode =2;
  string moduleCode = 3;
  repeated int64 menuIDs =4;
}
message TenantModuleWithIDOrCode{
  string code = 1;
  string appCode = 2;
  string moduleCode = 3;
  int64 id = 4;
}

//----------------------------------------------------------------------------------------------

message Point{
  double  longitude = 1;//经度
  double  latitude = 2;//纬度
}

message Empty {
}

message PageInfo {
    int64 page = 1;
    int64 size = 2;
    //排序信息
    repeated OrderBy orders = 3;
    message OrderBy {
        //排序的字段名
        string field = 1;
        //排序方式：0 aes, 1 desc
        int64 sort = 2;
    }
}

message CompareString{
  string CmpType =1;//"=":相等 "!=":不相等 ">":大于">=":大于等于"<":小于"<=":小于等于 "like":模糊查询
  string value =2;//值
}
message CompareInt64{
  string CmpType =1;//"=":相等 "!=":不相等 ">":大于">=":大于等于"<":小于"<=":小于等于 "like":模糊查询
  int64 value =2;//值
}

message WithID{
  int64 id = 1;
}

message WithIDCode{
  int64 id = 1;
  string code=2;
}

message WithCode{
  string code=1;
}

message WithAppCodeID{
  int64 id = 1;
  string appCode=2;
  string code =3;//租户code
}

//----------------------------------------------------------------------------------------------

message ProjectWithID{
  int64 projectID = 1; //项目id（只读）
}

message ProjectInfo {
  int64 createdTime = 1; //创建时间（只读）
  int64 projectID = 2; //项目id（只读）
  string projectName = 3; //项目名称（读写）
  int64 adminUserID = 5;//管理员
//  google.protobuf.StringValue region = 6; //项目省市区县（读写）
  Point Position = 6; //项目区域定位
  google.protobuf.FloatValue area =7;//建筑面积(单位平米)
  int64 ppsm =10;//w.h/m2 每平方米功耗 建筑定额能耗 Power per square meter
  google.protobuf.StringValue desc = 8; //项目备注（读写）
  google.protobuf.StringValue address = 11;//项目详细地址
  google.protobuf.Int64Value deviceCount=12;//设备统计
  int64 areaCount =9;//项目下的区域统计(只读)
  int64 userCount =17;//项目下用户统计
  string projectImg =15;//项目图片
  bool isUpdateProjectImg =16;//是否更新项目的图片
  int64 isSysCreated =18; //是否是系统创建的,系统创建的只有管理员可以删除
  repeated AreaInfo areas =19;//
}


message ProjectProfile{
  string code =4;
  string params =5;
}

message ProjectProfileReadReq{
  string code =1;
}

message ProjectProfileIndexReq{
  repeated string codes = 2;
}

message ProjectProfileIndexResp{
  repeated ProjectProfile profiles =1;
}

message ProjectInfoIndexReq {
  PageInfo page = 1; //进行数据分页（不传默认2000相当于全部）
  string projectName = 2; //过滤条件: 项目名称
  bool isGetAll =4;//是否获取所有(管理员获取所有)
  repeated int64 projectIDs = 3; //过滤条件: 过滤项目id列表
  bool withTopAreas =5;  //同时返回顶层的区域列表
}

message ProjectInfoIndexResp {
  int64 total = 1; //总数
  repeated ProjectInfo list = 2; //项目列表
}

//----------------------------------------------------------------------------------------------



message AreaInfo {
  int64 createdTime = 1; //创建时间（只读）
  int64 areaID = 2; //项目区域id（只读）
  int64 parentAreaID = 3; //上级项目区域id（只读）
  int64 projectID = 4; //项目id（只读）
  string areaName = 5; //项目区域名称（读写）
  Point Position = 6; //项目区域定位，默认百度坐标系（读写）
  google.protobuf.StringValue desc = 7; //项目区域备注（读写）
  repeated AreaInfo children = 8; //下级项目区域列表（只读）
  string areaIDPath =9;
  string areaNamePath =10;
  int64 lowerLevelCount =11;//下级区域的数量
  repeated int64 childrenAreaIDs =12;//所属的子区域id列表
  int64 isLeaf =13;//是否是叶子节点
  string useBy =14;//用途
  string areaImg =15;//区域图片
  bool isUpdateAreaImg =16;//是否更新区域的图片
  google.protobuf.Int64Value deviceCount=17;//绑定该区域的设备统计
  google.protobuf.Int64Value groupCount=19; //绑定该区域的分组统计
  int64 isSysCreated =18; //是否是系统创建的,系统创建的只有管理员可以删除
}


message AreaWithID {
  int64 areaID = 1; //项目区域id
}

message AreaProfile{
  int64 areaID = 1; //项目区域id
  string code =2;
  string params =3;
}

message AreaProfileReadReq{
  int64 areaID = 2; //项目区域id
  string code =4;
}

message AreaProfileIndexReq{
  int64 areaID = 1; //项目区域id
  repeated string codes = 2;
}

message AreaProfileIndexResp{
  repeated AreaProfile profiles =1;
}



message AreaInfoReadReq {
  int64 projectID = 1; //项目ids
  int64 areaID = 2; //项目区域id
  bool withChildren = 3;//是否返回子节点
}

message AreaInfoIndexReq {
  PageInfo page = 1; //进行数据分页（不传默认2000相当于全部）
  int64 projectID = 3; //项目ids
  int64 parentAreaID = 4;
  repeated int64 areaIDs = 5; //区域ids
  bool  isRetTopLevel = 6;//如果该参数为true则返回除了root节点的有权限的最高层的区域列表
  int64 isLeaf =7;//是否是叶子节点
  CompareInt64 deviceCount =8;
  CompareInt64 groupCount =9;
}

message AreaInfoIndexResp {
  int64 total = 1; //总数
  repeated AreaInfo list = 2; //项目区域列表
}

//message AreaInfoTreeReq {
//  int64 projectID = 1; //二选一条件: 项目id
//  int64 areaID = 2; //二选一条件: 区域id
//}
//
//message AreaInfoTreeResp {
//  AreaInfo tree = 1; //项目区域树
//}


//----------------------------------------------------------------------------------------------


message SlotInfo{
  int64 id =1;
  string  code =2;  // 主编码
  string subCode =3;// 子编码
  string  slotCode =4;  //slot的编码
  string  method =5;  // 请求方式 GET  POST
  string  uri =6;  // 参考: /api/v1/system/user/self/captcha?fwefwf=gwgweg&wefaef=gwegwe
  repeated string  hosts =7;  //访问的地址 host or host:port
  string  body =8;  // body 参数模板
  map<string,string>  handler =9;  //http头
  string  authType =10;  //鉴权类型 core
  string desc = 11;//描述类型
}

message WeatherAir  {
    string aqi =1;
    string level =2;
    string category =3;
    string primary =4;
    string pm10 =5;
    string pm2p5 =6;
    string no2 =7;
    string so2 =8;
    string co =9;
    string o3 =10;
}

message WeatherReadReq  {
    Point position=1;
    int64 ProjectID =2;
}

message WeatherReadResp  {
    string obsTime=1;
    string temp=2;
    string feelsLike=3;
    string icon=4;
    string text=5;
    string wind360=6;
    string windDir=7;
    string windScale=8;
    string windSpeed=9;
    string humidity=10;
    string precip=11;
    string pressure=12;
    string vis=13;
    string cloud=14;
    string dew=15;
    WeatherAir air=17;
}



message QRCodeReadReq{
  string page =1; //默认是主页，页面 page，例如 pages/index/index，根路径前不要填加 /，不能携带参数（参数请放在scene字段里），如果不填写这个字段，默认跳主页面。scancode_time为系统保留参数，不允许配置
  string scene=2; //        	最大32个可见字符，只支持数字，大小写英文以及部分特殊字符：!#$&'()*+,/:;=?@-._~，其它字符请自行编码为合法字符（因不支持%，中文无法使用 urlencode 处理，请使用其他编码方式）
  string envVersion=3; //要打开的小程序版本。正式版为 "release"，体验版为 "trial"，开发版为 "develop"。默认是正式版。
}

message QRCodeReadResp{
  bytes buffer =1;
}

message SlotInfoIndexReq{
  string code =1;
  string subCode =2;
  PageInfo page       = 3;  // 分页信息 只获取一个则不填
}

message SlotInfoIndexResp{
  repeated SlotInfo list=1;
  int64 total = 2;
}

message AuthApiInfo{
  string route = 1;
  string method = 2;//大写 http 方法
}

message RoleAccessMultiUpdateReq{
  int64 id = 1;//角色ID
  repeated  string  accessCodes = 4;
}

message RoleAccessIndexReq{
  repeated int64 ids = 1;//角色ID
  int64 id = 2;//角色ID
}

message RoleAccessIndexResp{
  int64 total = 1;
  repeated string accessCodes = 3;
}



message RoleMenuIndexReq{
  repeated int64 ids = 1;//角色ID
  int64 id = 4;//角色ID
  string appCode = 2;//appCode
  string moduleCode = 3;//模块编码
}

message RoleMenuIndexResp{
  int64 total = 1;
  repeated int64 menuIDs = 3;
}

message RoleAppIndexReq{
  repeated int64 ids = 1;//角色ID
  int64 id = 2;//角色ID
}

message RoleAppIndexResp{
  int64 total = 1;
  repeated string appCodes = 3;
}

message RoleModuleIndexReq{
  repeated int64 ids = 1;//角色ID
  int64 id = 3;//角色ID
  string appCode = 2;//appCode
}

message RoleModuleIndexResp{
  int64 total = 1;
  repeated string moduleCodes = 3;
}


message DateRange{
  string start = 1;
  string end = 2;
}

message LoginLogIndexReq{
  PageInfo page       = 1;  // 分页信息 只获取一个则不填
  string appCode = 2;//应用编码
  string ipAddr = 3;        // 登录IP地址
  string loginLocation = 4; // 登录地点
  DateRange date = 5;       // 时间范围
}

message LoginLogInfo {
  int64  userID = 1;           // 用户id
  string userName = 2;      // 登录账号
  string ipAddr = 3;        // 登录IP地址
  string loginLocation = 4; // 登录地点
  string browser = 5;       // 浏览器
  string os = 6;            // 操作系统
  int64 code = 7;           // 登录状态（200成功 其它失败）
  string msg = 8;           // 提示消息
  int64  createdTime = 9;   // 登录时间
  string appCode = 10;//应用编码
}

message LoginLogIndexResp{
  repeated LoginLogInfo list = 1;
  int64 total = 2; //总记录数
}

message OperLogIndexReq{
  PageInfo page       = 1; //分页信息 只获取一个则不填
  string operName     = 2; //按操作名称查找
  string operUserName = 3; //按操作人员名称查找
  int64 businessType  = 4; //按业务类型（1新增 2修改 3删除 4查询）查找
  string appCode = 5;//应用编码
}

message OperLogInfo {
    int64  userID = 1;                //用户id
    string operUserName = 2;       //操作人员名称
    string operName = 3;           //操作名称
    int64  businessType = 4;       //业务类型（1新增 2修改 3删除 4查询）
    string uri = 5;                //请求地址
    string operIpAddr = 6;         //操作主机地址
    string operLocation = 7;       //操作地点
    string req = 8;                //请求参数
    string resp = 9;               //返回参数
    int64  code = 10;               //登录状态（200成功 其它失败）
    string msg = 11;               //提示消息
    int64  createdTime = 12;       //操作时间
    string appCode = 13;//应用编码
}

message OperLogIndexResp{
  repeated OperLogInfo list = 1;
  int64 total = 2; //总记录数
}

message LoginLogCreateReq{
  int64  userID = 1;           // 用户id
  string userName = 2;      // 登录账号
  string ipAddr = 3;        // 登录IP地址
  string loginLocation = 4; // 登录地点
  string browser = 5;       // 浏览器
  string os = 6;            // 操作系统
  int64 code = 7;           // 登录状态（200成功 其它失败）
  string msg = 8;           // 提示消息
  string appCode = 9;//应用编码
}

message OperLogCreateReq{
  int64  userID = 1;                //用户id
  string operUserName = 2;       //操作人员名称
  string operName = 3;           //操作名称
  int64  businessType = 4;       //业务类型（1新增 2修改 3删除 4查询）
  string uri = 5;                //请求地址
  string route = 6;              //接口路由
  string operIpAddr = 7;         //操作主机地址
  string operLocation = 8;       //操作地点
  string req = 9;                //请求参数
  string resp = 10;              //返回参数
  int64  code = 11;              //返回状态（200成功 其它失败）
  string msg = 12;               //提示消息
  string appCode = 13;//应用编码
}

//用户属性信息
message UserInfo{
  string tenantCode =22;
  int64  userID = 1;
  string userName =2;
  string password =3;
  google.protobuf.StringValue email = 4;
  google.protobuf.StringValue phone =5;
  string wechatUnionID = 6;
  string wechatOpenID =23;
  string lastIP =7;
  string regIP =8;
  string nickName =9;
  string city =10;
  string country =11;
  string province =12;
  string language =13;
  int64  createdTime =15;
  int64  role = 16;
  int64  sex =17;
  int64  isAllData =18;
  string headImg =19;
  bool isUpdateHeadImg = 20;//只有这个参数为true的时候才会更新图片,传参为图片的file path
  int64 status =21;
}



message UserCreateResp{
  int64 userID = 1;//用户id
}

message UserCheckTokenReq{
  string token = 1;
  string ip = 2;
  string appCode = 3;
  string authType =4; //user(普通用户),open(开放第三方认证)
}

message UserCheckTokenResp{
  string token = 1;  //如果时间不多会更新jwt，需要判断jwt是否为“” 如果不为空，则需要更新用户的token
  int64 userID = 2;
  repeated int64 roleIDs = 3;
  repeated string roleCodes = 4;
  int64 isAllData = 5;
  string tenantCode = 6;//租户编码
  bool isAdmin = 7;//是否是管理员
  bool isSuperAdmin = 8;//是否是超级管理员(可以跨租户)
  string appCode =9;//应用code
  string account = 10 ;//账号
  map<int64,ProjectAuth> projectAuth = 11;
}

message ProjectAuth {
  map<int64,int64> area=1;//key是区域ID,value是授权类型
  /*
  1 //管理权限,可以修改别人的权限,及读写权限 管理权限不限制区域权限
  2 //读权限,只能读,不能修改
  3 //读写权限,可以读写该权限
  */
  int64  AuthType =2; //项目的授权类型
}

message RoleAppMultiUpdateReq{
  int64 id = 1;
  repeated string appCodes = 3;
}

message RoleModuleMultiUpdateReq{
  int64 id = 1;
  string appCode = 2;
  repeated string moduleCodes = 3;
}

message RoleMenuMultiUpdateReq{
  int64 id = 1;
  string appCode = 2;
  string moduleCode = 3;//模块编码
  repeated int64 menuIDs = 4;
}

message RoleApiAuthReq{
  string path = 1;
  string method = 2;
}

message RoleApiAuthResp{
  int64  businessType = 1; // 业务类型（1新增 2修改 3删除 4查询 5其它)
  string name =2;//操作名
}

message UserInfoCreateReq{
  UserInfo info = 1;
  repeated int64 roleIDs =2;
}

message UserInfoIndexReq{
  PageInfo page       = 1;//分页信息 只获取一个则不填 搜索的字段: userID:用户id userName:登录用户名  email:邮箱  phone:手机号
  string userName = 2;
  string phone = 3;
  string email = 4;
  repeated int64 userIDs =5;
  string account =6;
  repeated int64 hasAccessAreas =7;
  string roleCode =8;
}

message UserInfoIndexResp{
  repeated UserInfo list = 1;
  int64 total = 2;
}

message userInfoUpdateReq{
  UserInfo info =1;
  bool WithRoot =2;//root可以修改所有字段
}

message UserInfoReadReq{
  int64 userID=1;
}


message UserInfoDeleteReq{
  int64 userID = 1;
}

message JwtToken{
  string accessToken = 1;
  int64 accessExpire = 2;
  int64 refreshAfter = 3;
}

message UserCaptchaReq{
  string account = 1;//短信验证时填写手机号,邮箱验证时填写邮箱
  string type = 2;//验证方式:短信验证,图片验证码,邮箱验证
  string use = 3;//用途
  string codeID = 4;//验证码编码
  string code = 5;//验证码
}

message UserCaptchaResp{
  string codeID = 1;//验证码编码
  string code = 2;//验证码--只有图片验证码由apisvr生成,其他方式返回空
  int64 expire = 3;//过期时间
}


message UserForgetPwdReq{
  string account = 1; //登录账号(支持用户名,手机号登录) 账号密码登录时需要填写
  string  type = 2;//账号类型: email:邮箱 phone:手机号
  string password =3;//密码
  string code = 5;//验证码    微信登录填code
  string codeID = 6;//验证码编号 微信登录填state
}

message UserCodeToUserIDReq{
  string loginType =4;//验证类型 phone 手机号 wxOpen 微信开放平台 wxIn 微信内 wxMiniP 微信小程序 pwd 账号密码
  string code = 5;//验证码    微信登录填code
}

message UserCodeToUserIDResp{
  string openID =1;
  string unionID =2;
}

message  UserChangePwdReq{
  string  type = 1;//验证类型: email:邮箱 phone:手机号
  string password =3;//密码
  string code = 5;//验证码    微信登录填code
  string codeID = 6;//验证码编号 微信登录填state
}

message UserLoginReq{
    string account = 1; //登录账号(支持用户名,手机号登录) 账号密码登录时需要填写
    int32 pwdType = 2;//账号密码登录时需要填写.0,无密码 1，明文 2，md5加密
    string password =3;//密码，建议md5转换 密码登录时需要填写
    string loginType =4;//验证类型 phone 手机号 wxOpen 微信开放平台 wxIn 微信内 wxMiniP 微信小程序 pwd 账号密码
    string code = 5;//验证码    微信登录填code
    string codeID = 6;//验证码编号 微信登录填state
    string ip = 7;//透传请求的 ip
}

message UserLoginResp{
  UserInfo info = 1;
  JwtToken token =2;
}

//登录信息注册,注册第一步(注册核心登录信息) 返回一个jwt用来第二步注册
message UserRegisterReq{
  string regType =1; //注册方式:	phone手机号注册 email邮箱注册 wxopen 微信开放平台登录 wxin 微信内登录 wxminip 微信小程序 pwd 账号密码注册
  string account =2;    //手机号注册时填写手机号 账号密码注册时填写userName
  string code =3;    //验证码    微信注册填code
  string codeID =4;  //验证码编号 微信注册填state
  string password =5;
  UserInfo info = 6;//填写用户信息
  map<string,string> expand =7; //拓展, 微信登录方式 phoneCode:获取手机号code
}

message UserRegisterResp{
  int64 userID = 1;
}


message UserRoleIndexReq{
  int64 userID = 1;
}

message UserRoleIndexResp{
  int64 total = 1;
  repeated RoleInfo list = 2;//角色列表
}

message UserRoleMultiUpdateReq{
  int64 userID = 1;
  repeated int64 roleIDs = 2;//API列表数据
  repeated string roleCodes =3;//角色code
}

//----------------------------------------------------------------------------------------------

message DataProject {
    int64 projectID = 1; //权限数据ID
    int64 authType =2;// 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
    int64 targetID = 3; //用户ID（必填，雪花ID）
}

message DataProjectDeleteReq{
  int64 targetID = 1; //用户ID（必填，雪花ID）
  string targetType = 2;
  int64 projectID = 3; //权限数据ID
}

message DataProjectSaveReq{
  int64 targetID = 1; //用户ID（必填，雪花ID）
  string targetType = 2;
  int64 projectID = 3; //权限数据ID
  int64 authType =4;// 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
}
message DataProjectMultiUpdateReq {
    int64 targetID = 1; //用户ID（必填，雪花ID）
    string targetType = 2;
    repeated DataProject projects = 3; //权限数据IDs（必填）
}

message DataProjectIndexReq {
    PageInfo page = 1 ; //进行数据分页（不传默认2000相当于全部）
    int64 projectID =2;//获取该项目实际获得的权限
    int64 targetID = 3;
    string targetType =4;//user:用户 role:角色
    int64 authType =5;// 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
}

message DataProjectIndexResp {
    int64 total = 1;           //总数
    repeated DataProject list = 2; //用户数据权限列表
}


message DataArea {
  int64 areaID = 1; //项目id
  int64 authType =2;// 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
}

message DataAreaMultiUpdateReq {
  int64 targetID = 1; //用户ID（必填，雪花ID）
  string targetType = 2;
  int64 projectID = 3; //项目id
  repeated DataArea areas = 4; //权限数据IDs
}

message DataAreaIndexReq {
  PageInfo page = 1 ; //进行数据分页（不传默认2000相当于全部）
  int64 projectID = 3; //项目id 必选
  int64 targetID = 4;
  string targetType =5;
}

message DataAreaIndexResp {
  int64 total = 1;           //总数
  repeated DataArea list = 2; //用户数据权限列表
}

message DataAreaMultiDeleteReq{
  int64 projectID = 1; //项目id 必选
  int64 targetID = 2;
  string targetType =3;
  repeated int64 areaIDs = 4;
}

message UserAreaApplyCreateReq{
  int64 areaID = 1; //项目id
  int64 authType =2;// 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
}

message UserAreaApplyIndexReq{
  PageInfo page = 1 ; //进行数据分页（不传默认2000相当于全部）
  int64 areaID = 2; //项目id
  repeated int64 authTypes =3;// 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
}

message UserAreaApplyInfo{
  int64 id = 1; //项目id
  int64 userID = 2;
  int64 areaID = 3; //项目id
  int64 authType =4;// 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
  int64 createdTime = 5;
}

message UserAreaApplyIndexResp{
  int64 total = 1;           //总数
  repeated UserAreaApplyInfo list = 2; //用户数据权限列表
}

message UserAreaApplyDealReq{
  bool isApprove = 1;//是否同意
  repeated int64 ids = 2; //授权申请的id列表
}


//字典相关接口

message DictInfo{
  int64 id = 1;
  string group =2;//分组
  string name= 3;          // 字典名（中）
  string code = 4;          // 字典编码
  google.protobuf.StringValue desc = 5;        // 模块描述
  google.protobuf.StringValue body = 6; // 自定义数据
}

message DictInfoReadReq{
  int64 id = 1;
  string code = 2;
}

message DictInfoIndexReq{
  PageInfo page = 1;//分页信息
  string name = 2;
  string group = 3;
}

message DictInfoIndexResp{
  repeated  DictInfo list =1;
  int64 total = 2;
}

message DictDetailReadReq{
  int64 id = 1;
  string dictCode= 2;         // 关联标记
  string value = 3;           // 字典值
  bool withFather = 4;//是否返回父级
  bool withChildren =5;//是否返回子级
}


message DictDetail{
  int64 id = 1;
  string dictCode= 2;         // 关联标记
  string label = 3;           // 展示值
  string value = 4;           // 字典值
  int64 sort = 6;          // 排序标记
  google.protobuf.StringValue desc = 7;        // 模块描述
  int64 status = 8; // 状态  1:启用,2:禁用
  google.protobuf.StringValue body = 9; // 自定义数据
  string idPath =10;//1-2-3-的格式记录顶级区域到当前id的路径
  int64 parentID =11;//父节点
  DictDetail parent =12;
  repeated DictDetail children =13;
}

message DictDetailIndexReq{
  PageInfo page = 1;//分页信息
  string dictCode= 2;         // 关联标记
  int64 parentID =11;//父节点
  int64 status = 8; // 状态  1:启用,2:禁用
  string label = 3;           // 展示值
  string value = 4;           // 字典值
}

message DictDetailIndexResp{
  repeated  DictDetail list =1;
  int64 total = 2;
}


//模块相关接口

message ModuleInfo{
  int64 id = 1;
  string name= 2;          // 模块名称
  string code = 3;          // 模块编码
  google.protobuf.StringValue desc = 4;        // 模块描述
  int64 type = 5;
  int64 subType=12;
  string path = 6;
  string url = 7;
  string icon = 8;
  int64 order = 9;
  int64 hideInMenu = 10;
  google.protobuf.StringValue body = 11;
  int64 tag = 13;//标签: 1:通用 2:选配
}

message ModuleInfoIndexReq{
  PageInfo page = 1;//分页信息
  string name = 2;
  string code = 3;
  repeated string codes =4;
  string appCode = 5;
  int64 type = 6;
}

message ModuleInfoIndexResp{
  repeated  ModuleInfo list =1;
  int64 total = 2;
}

//----------------------------------------------------------------------------------------------
//应用相关接口


message AppInfo{
  int64 id = 1;
  string name= 2;          // 应用名称
  string type=7;//应用类型 web:web页面  app:应用  mini:小程序
  string subType=10;//子类型  wx:微信小程序  ding:钉钉小程序
  string code = 3;          // 应用编码
  google.protobuf.StringValue desc = 4;        // 应用描述
}

message AppInfoIndexReq{
  PageInfo page = 1;//分页信息
  string name = 2;
  string code = 3;
  repeated string codes =4;
}

message AppInfoIndexResp{
  repeated  AppInfo list =1;
  int64 total = 2;
}

message AppModuleMultiUpdateReq{
  string code = 1;//应用code
  repeated string moduleCodes = 3;
}

message AppModuleIndexReq{
  string code = 1;//应用code
}

message AppModuleIndexResp{
  repeated string moduleCodes = 3;
}


//----------------------------------------------------------------------------------------------


message RoleInfoIndexReq{
  PageInfo page = 1;//分页信息
  string name = 2;
  int64 status = 3;
  repeated int64 ids =4;//角色id列表
  repeated   string codes =5;

}

message RoleInfoIndexResp{
  repeated  RoleInfo list =1;
  int64 total = 2;
}

message RoleInfo{
  int64   id = 1;
  string  name = 2;
  string  desc = 3;
  int64   createdTime  =4;
  int64   status = 5;
  string code =6;
}



message RoleAppUpdateReq{
  int64 id = 1;
  repeated string appCodes = 2;
}

message MenuInfoIndexReq{
  string  moduleCode = 1;
  repeated int64 menuIDs = 2;
  bool isRetTree = 3;
  int64 isCommon =4;//是否常用菜单 1-是 2-否
}

message MenuInfo{
  string moduleCode = 12;
  int64 id = 1;
  string name = 2;
  int64 parentID = 3;
  int64 type = 4;
  string path = 5;
  string component = 6;
  string icon = 7;
  string redirect = 8;
  int64 createTime = 9;
  int64 order = 10;
  int64 hideInMenu = 11;
  int64 isCommon =15;//是否常用菜单 1-是 2-否
  google.protobuf.StringValue body = 13;
  repeated MenuInfo children = 14;
}
message MenuInfoIndexResp{
  repeated MenuInfo list = 1;
}



message Map{
  string mode = 1;       //坐标系 默认百度坐标系
  string accessKey = 2;  //设备地图key
  string accessSecret =3;
}
message configResp{
  Map map = 1;           //设备地图相关配置
}

message ApiInfoIndexReq{
  PageInfo page = 1;// 分页信息
  string route = 2; // 接口路由
  string method = 3; // 接口请求方式: POST GET
  string name = 4;  // 接口名称
  int64 authType = 5;// 1(all) 全部人可以操作 2(admin) 默认授予租户管理员权限 3(superAdmin,supper) default租户才可以操作(超管是跨租户的)
  repeated int64 apiIDs = 6;//API列表数据
  string accessCode =7;
}

message ApiInfo{
  string accessCode = 7;
  int64 id = 1;            // 接口编号
  string route = 2;        // 接口路由
  string method = 3;        // 接口请求方式: POST GET
  string name = 5;         // 接口名称
  int64  businessType = 6; // 业务类型（1新增 2修改 3删除 4查询 5其它)
//  int64 authType = 8;// 1(all) 全部人可以操作 2(admin) 默认授予租户管理员权限 3(superAdmin,supper) default租户才可以操作(超管是跨租户的)
  string desc = 9;//描述
}

message ApiInfoIndexResp{
  repeated ApiInfo list = 1; // 接口列表数据
  int64 total = 2;           // 接口列表总记录数
}

message AccessInfoMultiImportReq{
  string module =1;//模块
  string access =2;
}
message AccessInfoMultiImportResp{
  int64 total=1;
  int64 errCount=2;
  int64 ignoreCount=3;
  int64 succCount=4;
}

message AccessInfoIndexReq{
  PageInfo page = 1;// 分页信息
  string module =2;//模块
  string group = 3; // 接口分组
  string code =4;
  repeated string codes = 7;
  string name = 8;  // 接口名称
  int64 isNeedAuth = 9;//是否需要权限认证 1是 2否
  repeated int64 authTypes = 10;// 1(all) 全部人可以操作 2(admin) 默认授予租户管理员权限 3(superAdmin,supper) default租户才可以操作(超管是跨租户的)
  bool WithApis =11;
}

message AccessInfo{
  int64 id = 1;// 编号
  string module =2;//模块
  string group = 3;// 分组
  string code = 4;//编码
  string name = 5;// 名称
  int64 isNeedAuth = 6;//是否需要权限认证 1是 2否
  int64 authType = 7;// 1(all) 全部人可以操作 2(admin) 默认授予租户管理员权限 3(superAdmin,supper) default租户才可以操作(超管是跨租户的)
  string desc = 8;//描述
  repeated ApiInfo Apis = 9;
}

message AccessInfoIndexResp{
  repeated AccessInfo list = 1; // 接口列表数据
  int64 total = 2;           // 接口列表总记录数
}



message OpsWorkOrder{
  int64 id = 1;
  string number =2;//编号
  int64 raiseUserID=3;//问题提出的用户
  int64 areaID = 4; //项目区域id
  string type =5;//工单类型: deviceMaintenance:设备维修工单 sceneAlarm:场景自动化报警
  map<string,string> params=6;//参数 json格式
  string issueDesc =8;//问题描述
  int64 status = 10;// 状态（1 待处理 2:处理中 3:已完成） (可修改)
  int64 createdTime = 11;//创建时间
  int64 handleTime =12;
  int64 finishedTime =13;
}

message OpsWorkOrderIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  int64 status = 2;//状态（1 待处理 2:处理中 3:已完成）
  int64 areaID = 3;//区域ID过滤
  string type = 4;//工单类型
  string number = 5;//编号
}

message OpsWorkOrderIndexResp{
  repeated OpsWorkOrder list = 1;//设备信息
  int64  total = 2;//总数(只有分页的时候会返回)
}


message OpsFeedback{
  int64 id =1;
  string tenantCode =2;
  int64 raiseUserID =3;
  int64 projectID =4;
  string type =5;
  string contactInformation =6;
  string issueDesc =7;
  int64 createdTime = 8;
  int64 status = 9;//状态（1 待处理 2:处理中 3:已完成）
}

message OpsFeedbackIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  int64 projectID=2;
  string type =3;
  bool isAllTenant =4;//default租户获取所有租户的信息
  string tenantCode =5; //过滤所属租户,isAllTenant为true有效
  int64 status = 6;//状态（1 待处理 2:处理中 3:已完成）
}

message OpsFeedbackIndexResp{
  repeated OpsFeedback list = 1;//设备信息
  int64  total = 2;//总数(只有分页的时候会返回)
}
