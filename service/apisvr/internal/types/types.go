// Code generated by goctl. DO NOT EDIT.
package types

type AccessGroupInfo struct {
	ID       string        `json:"id,optional"`        // id
	Code     string        `json:"code,optional"`      // 分组编码
	Name     string        `json:"name,optional"`      // 分组名称
	Children []*AccessInfo `json:"children,omitempty"` // 列表数据
}

type AccessIndexReq struct {
	Page       *PageInfo `json:"page,optional"`                   // 分页信息,只获取一个则不填
	Module     string    `json:"module,optional"`                 //模块
	Group      string    `json:"group,optional"`                  // 接口路由
	Name       string    `json:"name,optional"`                   // 接口名称
	Code       string    `json:"code,optional"`                   // 应用编号
	IsNeedAuth int64     `json:"isNeedAuth,optional,range=[0:2]"` // 是否需要权限认证 1是 2否
	WithApis   bool      `json:"withApis,optional"`
}

type AccessIndexResp struct {
	List  []*AccessInfo `json:"list"`  // 接口列表数据
	Total int64         `json:"total"` // 接口列表总记录数
}

type AccessInfo struct {
	ID         int64      `json:"id,optional"` // 编号
	Code       string     `json:"code"`
	Module     string     `json:"module,optional"`                 //模块
	Group      string     `json:"group,optional"`                  // 分组
	Name       string     `json:"name,optional"`                   // 名称
	IsNeedAuth int64      `json:"isNeedAuth,optional,range=[1:2]"` // 是否需要认证（ 1需要 2不需要）
	Desc       string     `json:"desc,optional"`                   // 备注
	Apis       []*ApiInfo `json:"apis,optional,omitempty"`         //接口信息
}

type AccessModuleInfo struct {
	ID       string             `json:"id,optional"`        // id
	Code     string             `json:"code,optional"`      // 编码
	Name     string             `json:"name,optional"`      // 模块名称
	Children []*AccessGroupInfo `json:"children,omitempty"` // 列表数据
}

type AccessMultiImportReq struct {
	Module string `form:"module,optional"` //模块
}

type AccessMultiImportResp struct {
	Total       int64 `json:"total"`       //导入总接口数
	ErrCount    int64 `json:"errCount"`    //失败数
	IgnoreCount int64 `json:"ignoreCount"` //忽略数
	SuccCount   int64 `json:"succCount"`   //成功数
}

type AccessTreeResp struct {
	List []*AccessModuleInfo `json:"list"` // 接口列表数据
}

type ApiInfo struct {
	ID           int64  `json:"id,optional"`                       // 接口编号
	AccessCode   string `json:"accessCode"`                        // 模块编号
	Route        string `json:"route,optional"`                    // 接口路由
	Method       string `json:"method,optional"`                   // 接口请求方式: （1 GET 2 POST 3 HEAD 4 OPTIONS 5 PUT 6 DELETE 7 TRACE 8 CONNECT 9 其它）
	Name         string `json:"name,optional"`                     // 接口名称
	BusinessType int64  `json:"businessType,optional,range=[1:5]"` // 业务类型（1新增 2修改 3删除 4查询 5其它)
	AuthType     int64  `json:"authType,optional,range=[0:3]"`     //  1(all) 全部人可以操作 2(admin) 只有管理员可以操作 3(super) 只有超管可以操作(超管是跨租户的)
	Desc         string `json:"desc,optional"`                     // 备注
}

type ApiInfoIndexReq struct {
	Page       *PageInfo `json:"page,optional"`                 // 分页信息,只获取一个则不填
	Route      string    `json:"route,optional"`                // 接口路由
	Method     string    `json:"method,optional"`               // 接口请求方式: （1 GET 2 POST 3 HEAD 4 OPTIONS 5 PUT 6 DELETE 7 TRACE 8 CONNECT 9 其它）
	Name       string    `json:"name,optional"`                 // 接口名称
	AccessCode string    `json:"accessCode,optional"`           // 应用编号
	AuthType   int64     `json:"authType,optional,range=[0:3]"` //  1(all) 全部人可以操作 2(admin) 只有管理员可以操作 3(superAdmin) 只有超管可以操作(超管是跨租户的)
}

type ApiInfoIndexResp struct {
	List  []*ApiInfo `json:"list"`  // 接口列表数据
	Total int64      `json:"total"` // 接口列表总记录数
}

type AppDeleteReq struct {
	ID int64 `json:"id"` // 接口编号
}

type AppInfo struct {
	ID      int64           `json:"id,optional"`      // 接口编号
	Code    string          `json:"code"`             // 应用编号
	Type    string          `json:"type"`             //应用类型 web:web页面  app:应用  mini:小程序
	SubType string          `json:"subType,optional"` //子类型  wx:微信小程序  ding:钉钉小程序
	Name    string          `json:"name,optional"`    // 接口名称
	Desc    *string         `json:"desc,optional"`    // 备注
	BaseUrl string          `json:"baseUrl,optional"` // 应用编号
	LogoUrl string          `json:"logoUrl,optional"`
	MiniWx  *ThirdAppConfig `json:"miniWx,optional.omitempty"` //微信小程序
}

type AppInfoIndexReq struct {
	Page *PageInfo `json:"page,optional"` // 分页信息,只获取一个则不填
	Name string    `json:"name,optional"` // 应用名称
	Code string    `json:"code,optional"` // 应用编号
}

type AppInfoIndexResp struct {
	List  []*AppInfo `json:"list"`  // 接口列表数据
	Total int64      `json:"total"` // 接口列表总记录数
}

type AppModuleIndexReq struct {
	Code string `json:"code"` // 应用编号
}

type AppModuleIndexResp struct {
	ModuleCodes []string `json:"moduleCodes"` //App列表数据
}

type AppModuleMultiUpdateReq struct {
	Code        string   `json:"code"`        // 应用编号
	ModuleCodes []string `json:"moduleCodes"` //App列表数据
}

type AppPolicy struct {
	ID      int64  `json:"id,optional"`
	AppCode string `json:"appCode,optional"`
	Code    string `json:"code,optional"` //
	Name    string `json:"name,optional"` //
	Subject string `json:"subject,optional"`
	Body    string `json:"body,optional"`
}

type AppPolicyReadReq struct {
	AppCode string `json:"appCode"`
	Code    string `json:"code"`
}

type AreaInfo struct {
	CreatedTime     int64       `json:"createdTime,optional,string"`  //创建时间（只读）
	ProjectID       int64       `json:"projectID,string,optional"`    //项目id（只读）
	AreaID          int64       `json:"areaID,string,optional"`       //项目区域id（只读）
	ParentAreaID    int64       `json:"parentAreaID,string,optional"` //上级项目区域id（只读）
	AreaName        string      `json:"areaName,optional"`            //项目区域名称（读写）
	Position        *Point      `json:"position,optional"`            //项目区域定位，默认百度坐标系（读写）
	Desc            *string     `json:"desc,optional"`                //项目区域备注（读写）
	LowerLevelCount int64       `json:"lowerLevelCount,optional"`     //下级的数量统计（只读）
	DeviceCount     int64       `json:"deviceCount,optional"`         //设备数量统计
	UseBy           string      `json:"useBy,optional"`               //用途: commonSpace default
	IsLeaf          int64       `json:"isLeaf,optional"`              //是否是子节点（只读）
	IsSysCreated    int64       `json:"isSysCreated,optional"`        //是否是系统创建的,系统创建的只有管理员可以删除
	AreaIDPath      string      `json:"areaIDPath,optional"`          //项目区域ids（只读）
	AreaNamePath    string      `json:"areaNamePath,optional"`        //（只读）
	AreaImg         string      `json:"areaImg,optional"`
	IsUpdateAreaImg bool        `json:"isUpdateAreaImg,optional"`
	Children        []*AreaInfo `json:"children,optional"` //下级项目区域列表（只读）
}

type AreaInfoIndexReq struct {
	Page          *PageInfo `json:"page,optional"`             //进行数据分页（不传默认2000相当于全部）
	ProjectID     int64     `json:"projectID,string,optional"` //项目id
	AreaIDs       []int64   `json:"areaIDs,optional"`          //项目区域ids
	ParentAreaID  int64     `json:"parentAreaID,string,optional"`
	IsRetTopLevel bool      `json:"isRetTopLevel,optional"` //如果该参数为true则返回除了root节点的有权限的最高层的区域列表
}

type AreaInfoIndexResp struct {
	Total int64       `json:"total,optional"` //拥有的总数
	List  []*AreaInfo `json:"list"`           //项目区域列表
}

type AreaInfoReadReq struct {
	AreaID       int64 `json:"areaID,string"`             //项目区域id
	ProjectID    int64 `json:"projectID,string,optional"` //项目id 不填选默认项目
	WithChildren bool  `json:"withChildren,optional"`
}

type AreaProfile struct {
	AreaID int64  `json:"areaID,string"` //项目区域id（只读）
	Code   string `json:"code"`
	Params string `json:"params"`
}

type AreaProfileIndexReq struct {
	AreaID int64    `json:"areaID,string"` //项目区域id（只读）
	Codes  []string `json:"codes"`
}

type AreaProfileIndexResp struct {
	Profiles []*AreaProfile `json:"profiles"`
}

type AreaProfileReadReq struct {
	AreaID int64  `json:"areaID,string"` //项目区域id（只读）
	Code   string `json:"code"`
}

type AreaWithID struct {
	AreaID int64 `json:"areaID,string"` //项目区域id 只读
}

type CommonResp struct {
	ID int64 `json:"id,optional"` // id
}

type ConfigResp struct {
	Map Map `json:"map"` //设备地图相关配置
	Oss Oss `json:"oss"` //oss相关配置
}

type DataArea struct {
	AreaID   int64 `json:"areaID,string"` //项目id
	AuthType int64 `json:"authType"`      // 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
}

type DataAreaDetail struct {
	*AreaInfo
	AuthType int64 `json:"authType"` // 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
}

type DataAreaIndexReq struct {
	Page       *PageInfo `json:"page,optional"`            //进行数据分页（不传默认2000相当于全部）
	TargetID   int64     `json:"targetID,string,optional"` //用户ID
	TargetType string    `json:"targetType,optional"`
	ProjectID  int64     `json:"projectID,string,optional"` //项目id
}

type DataAreaIndexResp struct {
	Total int64             `json:"total"` //总数
	List  []*DataAreaDetail `json:"list"`  //用户数据权限列表
}

type DataAreaMultiDeleteReq struct {
	ProjectID  int64   `json:"projectID,string,optional"` //项目id
	TargetID   int64   `json:"targetID,string"`           //用户ID
	TargetType string  `json:"targetType"`
	AreaIDs    []int64 `json:"areaIDs,string"`
}

type DataAreaMultiUpdateReq struct {
	TargetID   int64       `json:"targetID,string"` //用户ID
	TargetType string      `json:"targetType"`
	ProjectID  int64       `json:"projectID,string,optional"` //项目id
	Areas      []*DataArea `json:"areas"`                     //权限数据IDs
}

type DataProject struct {
	ProjectID int64     `json:"projectID,string"`         //权限数据ID
	AuthType  int64     `json:"authType"`                 // 1:管理权限,可以修改别人的权限,及读写权限 2:读写权限,可以读写该权限 3:读权限,只能读,不能修改
	TargetID  int64     `json:"targetID,string,optional"` //用户ID
	User      *UserCore `json:"user,optional"`            //获取用户类型返回
}

type DataProjectDeleteReq struct {
	TargetID   int64  `json:"targetID,string"` //用户ID
	TargetType string `json:"targetType"`
	ProjectID  int64  `json:"projectID,string,optional"` //权限数据ID
}

type DataProjectIndexReq struct {
	Page       *PageInfo `json:"page,optional"`             //进行数据分页（不传默认2000相当于全部）
	ProjectID  int64     `json:"projectID,string,optional"` //权限数据ID
	TargetID   int64     `json:"targetID,string,optional"`  //用户ID
	TargetType string    `json:"targetType"`
}

type DataProjectIndexResp struct {
	Total int64          `json:"total"` //总数
	List  []*DataProject `json:"list"`  //用户数据权限列表
}

type DataProjectMultiUpdateReq struct {
	TargetID   int64          `json:"targetID,string"` //用户ID
	TargetType string         `json:"targetType"`
	Projects   []*DataProject `json:"projects"` //权限数据IDs（必填）
}

type DataProjectSaveReq struct {
	TargetID   int64  `json:"targetID,string"` //用户ID
	TargetType string `json:"targetType"`
	ProjectID  int64  `json:"projectID,string"` //权限数据ID
	AuthType   int64  `json:"authType"`         // 1:管理权限,可以修改别人的权限,及读写权限 2:读写权限,可以读写该权限 3:读权限,只能读,不能修改
}

type DateRange struct {
	Start string `json:"start,optional"` //开始时间 格式：yyyy-mm-dd
	End   string `json:"end,optional"`   //结束时间 格式：yyyy-mm-dd
}

type DeviceCore struct {
	ProductID  string `json:"productID"`  //产品ID
	DeviceName string `json:"deviceName"` //设备名称
}

type DictDetail struct {
	ID     int64   `json:"id,optional"`     // 编号
	DictID int64   `json:"dictID,optional"` // 关联标记
	Label  string  `json:"label,optional"`  // 展示值
	Value  int64   `json:"value,optional"`  // 字典值
	Extend string  `json:"extend,optional"` // 扩展值
	Sort   int64   `json:"sort,optional"`   // 排序标记
	Desc   *string `json:"desc,optional"`   // 模块描述
	Status int64   `json:"status,optional"` // 状态  1:启用,2:禁用
	Body   *string `json:"body,optional"`   // 自定义数据
}

type DictDetailIndexReq struct {
	Page   *PageInfo `json:"page,optional"` // 分页信息,只获取一个则不填
	DictID int64     `json:"dictID,optional"`
}

type DictDetailIndexResp struct {
	Total int64         `json:"total"` //总数
	List  []*DictDetail `json:"list"`  //菜单列表
}

type DictInfo struct {
	ID       int64         `json:"id,optional"`   // 编号
	Name     string        `json:"name,optional"` // 菜单名称
	ParentID int64         `json:"parentID,optional"`
	IDPath   []int64       `json:"idPath,optional"` //只读
	Type     string        `json:"type,optional"`   // 类型   1. 内部页面   2，iframe内嵌  3，外部链接跳转 4，微前端
	Desc     *string       `json:"desc,optional"`   // 页面
	Body     *string       `json:"body,optional"`   //前端自定义字段
	Details  []*DictDetail `json:"details,optional"`
	Children []*DictInfo   `json:"children,optional"`
}

type DictInfoIndexReq struct {
	Page        *PageInfo `json:"page,optional"` // 分页信息,只获取一个则不填
	Status      int64     `json:"status,optional"`
	Name        string    `json:"name,optional"` // 按菜单名称筛选
	Type        string    `json:"type,optional"`
	WithDetails bool      `json:"withDetails,optional"`
	ParentID    int64     `json:"parentID,optional"`
}

type DictInfoIndexResp struct {
	Total int64       `json:"total"` //总数
	List  []*DictInfo `json:"list"`  //菜单列表
}

type DictInfoReadReq struct {
	ID           int64 `json:"id"` // 编号
	WithDetails  bool  `json:"withDetails,optional"`
	WithChildren bool  `json:"withChildren,optional"`
}

type IDList struct {
	IDs []int64 `json:"ids"`
}

type JwtToken struct {
	AccessToken  string `json:"accessToken,omitempty"`         //用户token
	AccessExpire int64  `json:"accessExpire,string,omitempty"` //token过期时间
	RefreshAfter int64  `json:"refreshAfter,string,omitempty"` //token刷新时间
}

type Map struct {
	Mode         string `json:"mode，options=gaode"` //坐标系 默认百度坐标系
	AccessKey    string `json:"accessKey"`          //设备地图key
	AccessSecret string `json:"accessSecret"`       //地图秘钥
}

type MenuInfo struct {
	ID         int64       `json:"id,optional"`                 // 编号
	ModuleCode string      `json:"moduleCode"`                  // 模块编号
	Name       string      `json:"name,optional"`               // 菜单名称
	ParentID   int64       `json:"parentID,optional"`           // 父菜单ID，一级菜单为1
	Type       int64       `json:"type,optional"`               // 类型   1. 内部页面   2，iframe内嵌  3，外部链接跳转 4，微前端
	Path       string      `json:"path,optional"`               // 系统的path
	Component  string      `json:"component,optional"`          // 页面
	Icon       string      `json:"icon,optional"`               // 菜单图标
	Redirect   string      `json:"redirect,optional"`           // 路由重定向
	Order      int64       `json:"order,optional"`              // 左侧table排序序号
	HideInMenu int64       `json:"hideInMenu,optional"`         // 菜单是否隐藏 1：是 2：否
	Body       *string     `json:"body,optional"`               //前端自定义字段
	CreateTime int64       `json:"createTime,optional"`         // 创建时间
	Children   []*MenuInfo `json:"children,optional,omitempty"` //子节点
}

type MenuInfoIndexReq struct {
	ModuleCode string `json:"moduleCode,optional"` // 应用编号
	Name       string `json:"name,optional"`       // 按菜单名称筛选
	Path       string `json:"path,optional"`       // 按菜单路径筛选
	IsRetTree  bool   `json:"isRetTree,optional"`  // 是否返回树形结构
}

type MenuInfoIndexResp struct {
	List []*MenuInfo `json:"list"` //菜单列表
}

type MessageInfo struct {
	ID          int64  `json:"id"`
	Group       string `json:"group"`
	NotifyCode  string `json:"notifyCode"`
	Subject     string `json:"subject"`
	Body        string `json:"body"`
	Str1        string `json:"str1"`
	Str2        string `json:"str2"`
	Str3        string `json:"str3"`
	IsGlobal    int64  `json:"isGlobal"`
	CreatedTime int64  `json:"createdTime"`
}

type MessageInfoIndexReq struct {
	Page       *PageInfo `json:"page,optional"`       // 分页信息,只获取一个则不填
	NotifyCode string    `json:"notifyCode,optional"` //
	Group      string    `json:"group,optional"`      //分组
}

type MessageInfoIndexResp struct {
	List  []*MessageInfo `json:"list"`  // 消息列表数据
	Total int64          `json:"total"` // 消息列表总记录数
}

type MessageInfoSendReq struct {
	UserIDs    []int64 `json:"userIDs"`    //指定用户ID
	IsGlobal   int64   `json:"isGlobal"`   //全局消息
	NotifyCode string  `json:"notifyCode"` //通知的code
	Subject    string  `json:"subject"`    //通知主题
	Body       string  `json:"body"`
	Str1       string  `json:"str1,optional"`
	Str2       string  `json:"str2,optional"`
	Str3       string  `json:"str3,optional"`
}

type ModuleInfo struct {
	ID         int64   `json:"id,optional"`         // 编号
	Code       string  `json:"code"`                // 应用编号
	Name       string  `json:"name,optional"`       // 菜单名称
	Type       int64   `json:"type,optional"`       // 类型   1. 内部页面   2，iframe内嵌  3，外部链接跳转 4，微前端
	SubType    int64   `json:"subType,optional"`    // 子类型   1. 内部页面   2，iframe内嵌  3，外部链接跳转 4，微前端
	Path       string  `json:"path,optional"`       // 系统的path
	Desc       *string `json:"desc,optional"`       // 页面
	Icon       string  `json:"icon,optional"`       // 菜单图标
	Url        string  `json:"url,optional"`        // 路由重定向
	Order      int64   `json:"order,optional"`      // 左侧table排序序号
	HideInMenu int64   `json:"hideInMenu,optional"` // 菜单是否隐藏 1：是 2：否
	Body       *string `json:"body,optional"`       //前端自定义字段
}

type ModuleInfoIndexReq struct {
	Page    *PageInfo `json:"page,optional"` // 分页信息,只获取一个则不填
	Codes   []string  `json:"codes,optional"`
	AppCode string    `json:"appCode,optional"` //应用绑定的code列表
	Code    string    `json:"code,optional"`    // 应用编号模糊查询
	Name    string    `json:"name,optional"`    // 按菜单名称筛选
	Type    int64     `json:"type,optional"`
}

type ModuleInfoIndexResp struct {
	Total int64         `json:"total"` //总数
	List  []*ModuleInfo `json:"list"`  //菜单列表
}

type NotifyChannel struct {
	ID      int64             `json:"id,optional"`      // id编号
	Name    string            `json:"name,optional"`    //通知的命名
	Type    string            `json:"type,optional"`    //对应的配置类型 通知类型 sms(短信),email(邮箱),dingTalk(钉钉机器人),dingWebhook(钉钉webhook),wxEWebHook(企业微信webhook)
	Desc    string            `json:"desc,optional"`    // 备注
	WebHook string            `json:"webhook,optional"` //钉钉webhook及企微webhook
	Email   *ThirdEmailConfig `json:"email,optional"`   //邮箱
	App     *ThirdApp         `json:"app,optional"`     //第三方应用配置
	Sms     *ThirdSms         `json:"sms,optional"`     //短信配置
}

type NotifyChannelIndexReq struct {
	Page *PageInfo `json:"page,optional"` // 分页信息,只获取一个则不填
	Name string    `json:"name,optional"` //
	Type string    `json:"type,optional"` //对应的配置类型 sms email
}

type NotifyChannelIndexResp struct {
	List  []*NotifyChannel `json:"list"`  // 通知模版列表数据
	Total int64            `json:"total"` // 通知模版列表总记录数
}

type NotifyConfig struct {
	ID           int64             `json:"id,optional"`           // id编号
	Group        string            `json:"group,optional"`        //分组
	Code         string            `json:"code,optional"`         // 通知类型编码
	Name         string            `json:"name,optional"`         //通知的命名
	SupportTypes []string          `json:"supportTypes,optional"` //支持的通知类型 sms(短信),email(邮箱),dingTalk(钉钉机器人),dingWebhook(钉钉webhook),wxEWebHook(企业微信webhook)
	EnableTypes  []string          `json:"enableTypes,optional"`  //启用的通知类型 sms(短信),email(邮箱),dingTalk(钉钉机器人),dingWebhook(钉钉webhook),wxEWebHook(企业微信webhook)
	Desc         string            `json:"desc,optional"`         // 备注
	IsRecord     int64             `json:"isRecord,optional"`     //是否记录该消息,是的情况下会将消息存一份到消息中心
	Params       map[string]string `json:"params,optional"`       //变量属性 key是变量参数,value是变量描述
}

type NotifyConfigIndexReq struct {
	Page  *PageInfo `json:"page,optional"`  // 分页信息,只获取一个则不填
	Name  string    `json:"name,optional"`  // 应用名称
	Code  string    `json:"code,optional"`  // 应用编号
	Group string    `json:"group,optional"` //分组
}

type NotifyConfigIndexResp struct {
	List  []*NotifyConfig `json:"list"`  // 通知列表数据
	Total int64           `json:"total"` // 通知列表总记录数
}

type NotifyConfigTemplate struct {
	ID         int64  `json:"id,optional"`
	NotifyCode string `json:"notifyCode,optional"`
	Type       string `json:"type,optional"`
	TemplateID int64  `json:"templateID,optional"`
}

type NotifyConfigTemplateDeleteReq struct {
	NotifyCode string `json:"notifyCode"`
	Type       string `json:"type"`
}

type NotifyConfigTemplateIndexReq struct {
	NotifyCode string `json:"notifyCode"`
	Type       string `json:"type,optional"`
}

type NotifyConfigTemplateIndexResp struct {
	List []*NotifyConfigTemplate `json:"list"`
}

type NotifyConfigTreeResp struct {
	List []*NotifyGroupInfo `json:"list"` // 通知列表数据
}

type NotifyGroupInfo struct {
	ID       string          `json:"id,optional"`        // id
	Code     string          `json:"code,optional"`      // 应用编号
	Name     string          `json:"name,optional"`      // 接口分组
	Children []*NotifyConfig `json:"children,omitempty"` // 列表数据
}

type NotifyTemplate struct {
	ID           int64          `json:"id,optional"`           // id编号
	Name         string         `json:"name,optional"`         //通知的命名
	NotifyCode   string         `json:"notifyCode,optional"`   //对应的配置Code
	Type         string         `json:"type,optional"`         //对应的配置类型 sms email
	TemplateCode string         `json:"templateCode,optional"` // 通知类型编码
	SignName     string         `json:"signName,optional"`     //签名(短信)
	Subject      string         `json:"subject,optional"`      //默认消息主题
	Body         string         `json:"body,optional"`         //默认模版内容
	Desc         string         `json:"desc,optional"`         // 备注
	ChannelID    int64          `json:"channelID,optional"`
	Channel      *NotifyChannel `json:"channel,optional"`
}

type NotifyTemplateIndexReq struct {
	Page       *PageInfo `json:"page,optional"`       // 分页信息,只获取一个则不填
	Name       string    `json:"name,optional"`       //
	NotifyCode string    `json:"notifyCode,optional"` // 应用编号
	Type       string    `json:"type,optional"`       //对应的配置类型 sms email
}

type NotifyTemplateIndexResp struct {
	List  []*NotifyTemplate `json:"list"`  // 通知模版列表数据
	Total int64             `json:"total"` // 通知模版列表总记录数
}

type NtpReadReq struct {
	DeviceSendTime int64 `json:"deviceSendTime,string"`
}

type NtpReadResp struct {
	DeviceSendTime int64 `json:"deviceSendTime,string"`
	ServerSendTime int64 `json:"serverSendTime,string"`
	ServerRecvTime int64 `json:"serverRecvTime,string"`
}

type OpsFeedback struct {
	ID                 int64  `json:"id,optional"`
	TenantCode         string `json:"tenantCode,optional"`
	RaiseUserID        int64  `json:"raiseUserID,optional"`
	ProjectID          int64  `json:"projectID,optional"`
	Type               string `json:"type"`
	ContactInformation string `json:"contactInformation"`
	IssueDesc          string `json:"issueDesc"`
}

type OpsFeedbackIndexReq struct {
	Page       *PageInfo `json:"page,optional"` // 分页信息,只获取一个则不填
	Type       string    `json:"type,optional"`
	TenantCode string    `json:"tenantCode,optional"`
	ProjectID  string    `json:"projectID,optional"`
}

type OpsFeedbackIndexResp struct {
	Total int64          `json:"total"` //总数
	List  []*OpsFeedback `json:"list"`  //菜单列表
}

type OpsWorkOrder struct {
	ID           int64             `json:"id,optional"`
	Number       string            `json:"number,optional"`                           //编号
	RaiseUserID  int64             `json:"raiseUserID,string,optional"`               //问题提出的用户
	AreaID       int64             `json:"areaID,string,optional"`                    //项目区域id
	Type         string            `json:"type,optional,options=[deviceMaintenance]"` //工单类型: deviceMaintenance:设备维修工单
	Params       map[string]string `json:"params,optional"`                           //参数 json格式
	IssueDesc    string            `json:"issueDesc,optional"`                        //问题描述
	Status       int64             `json:"status,optional,range=[0:3]"`               // 状态（1 待处理 2:处理中 3:已完成）
	CreatedTime  int64             `json:"createdTime,optional"`                      //创建时间
	HandleTime   int64             `json:"handleTime,optional"`                       //处理时间
	FinishedTime int64             `json:"finishedTime,optional"`                     //处理完成时间
}

type OpsWorkOrderIndexReq struct {
	Page   *PageInfo `json:"page,optional"` // 分页信息,只获取一个则不填
	Status int64     `json:"status,optional"`
	Type   string    `json:"type,optional"`          //工单类型: deviceMaintenance:设备维修工单
	AreaID int64     `json:"areaID,string,optional"` //区域ID过滤
	Number string    `json:"number,optional"`        //编号
}

type OpsWorkOrderIndexResp struct {
	Total int64           `json:"total"` //总数
	List  []*OpsWorkOrder `json:"list"`  //菜单列表
}

type OrderBy struct {
	Field string `json:"field,optional"` ////排序的字段名
	Sort  int64  `json:"sort,optional"`  //排序方式：0 从小到大, 1 从大到小
}

type Oss struct {
	Host string `json:"host"` //oss访问前缀
}

type PageInfo struct {
	Page   int64      `json:"page,optional" form:"page,optional"` // 页码
	Size   int64      `json:"size,optional" form:"size,optional"` // 每页大小
	Orders []*OrderBy `json:"orders,optional"`                    //排序
}

type Point struct {
	Longitude float64 `json:"longitude,range=[0:180]"` //经度
	Latitude  float64 `json:"latitude,range=[0:90]"`   //纬度
}

type ProjectInfo struct {
	CreatedTime        int64       `json:"createdTime,optional,string"` //创建时间（只读）
	ProjectID          int64       `json:"projectID,string,optional"`   //项目id（只读）
	ProjectName        string      `json:"projectName,optional"`        //项目名称（读写）
	AdminUserID        int64       `json:"adminUserID,string,optional"` // 管理员用户id（读写）
	Position           *Point      `json:"position,optional"`           //项目定位
	ProjectImg         string      `json:"projectImg,optional"`
	IsSysCreated       int64       `json:"isSysCreated,optional"` //是否是系统创建的,系统创建的只有管理员可以删除
	IsUpdateProjectImg bool        `json:"isUpdateProjectImg,optional"`
	Desc               *string     `json:"desc,optional"`                    //项目备注（读写）
	AreaCount          int64       `json:"areaCount,optional"`               //项目下的区域统计(只读)
	Ppsm               int64       `json:"ppsm,optional,omitempty"`          //w.h/m2 每平方米功耗 建筑定额能耗 Power per square meter
	Area               *float32    `json:"area,optional,omitempty"`          //建筑面积(单位平米)
	AdminUserInfo      *UserCore   `json:"adminUserInfo,optional,omitempty"` //管理员信息
	Areas              []*AreaInfo `json:"areas,optional,omitempty"`
}

type ProjectInfoIndexReq struct {
	Page         *PageInfo `json:"page,optional"`         //进行数据分页（不传默认2000相当于全部）
	ProjectName  string    `json:"projectName,optional"`  //过滤项目名称
	IsGetAll     bool      `json:"isGetAll,optional"`     //是否获取所有(管理员获取所有)
	ProjectIDs   []int64   `json:"projectIDs,optional"`   //过滤项目id列表
	WithTopAreas bool      `json:"withTopAreas,optional"` //同时返回顶层的区域列表
}

type ProjectInfoIndexResp struct {
	Total int64          `json:"total,optional"` //拥有的总数
	List  []*ProjectInfo `json:"list"`           //项目列表
}

type ProjectProfile struct {
	Code   string `json:"code"`
	Params string `json:"params"`
}

type ProjectProfileIndexReq struct {
	Codes []string `json:"codes"`
}

type ProjectProfileIndexResp struct {
	Profiles []*ProjectProfile `json:"profiles"`
}

type ProjectWithID struct {
	ProjectID        int64 `json:"projectID,string"`          //项目id 只读
	WithAdminProject bool  `json:"withAdminProject,optional"` //同时获取管理员核心信息
}

type QRCodeReadReq struct {
	Page       string `json:"page"`       //默认是主页，页面 page，例如 pages/index/index，根路径前不要填加 /，不能携带参数（参数请放在scene字段里），如果不填写这个字段，默认跳主页面。scancode_time为系统保留参数，不允许配置
	Scene      string `json:"scene"`      //        	最大32个可见字符，只支持数字，大小写英文以及部分特殊字符：!#$&'()*+,/:;=?@-._~，其它字符请自行编码为合法字符（因不支持%，中文无法使用 urlencode 处理，请使用其他编码方式）
	EnvVersion string `json:"envVersion"` //要打开的小程序版本。正式版为 "release"，体验版为 "trial"，开发版为 "develop"。默认是正式版。
}

type QRCodeReadResp struct {
	Buffer []byte `json:"buffer"`
}

type RoleAccessIndexReq struct {
	ID int64 `json:"id"` //角色ID
}

type RoleAccessIndexResp struct {
	AccessCodes []string `json:"accessCodes"` // 模块编号
}

type RoleAccessMultiUpdateReq struct {
	ID          int64    `json:"id"`          //角色ID
	AccessCodes []string `json:"accessCodes"` // 模块编号
}

type RoleAppIndexReq struct {
	ID int64 `json:"id"` //角色ID
}

type RoleAppIndexResp struct {
	AppCodes []string `json:"appCodes"` //App列表数据
	Total    int64    `json:"total"`    //App列表总数
}

type RoleAppMultiUpdateReq struct {
	ID       int64    `json:"id"`       //角色ID
	AppCodes []string `json:"appCodes"` //App列表数据
}

type RoleInfo struct {
	ID          int64  `json:"id,optional"`          // 编号
	Name        string `json:"name,optional"`        // 角色名称
	Desc        string `json:"desc,optional"`        // 备注
	CreatedTime int64  `json:"createdTime,optional"` // 创建时间
	Status      int64  `json:"status,optional"`      // 角色状态
	Code        string `json:"code,optional"`        //角色编码
}

type RoleInfoIndexReq struct {
	Page   *PageInfo `json:"page,optional"`    //分页信息,只获取一个则不填
	Name   string    `json:"name,optional "`   //按名称查找角色
	Status int64     `json:"status,optional "` //按状态查找角色
	Codes  []string  `json:"codes,optional"`   //角色编码过滤
	IDs    []int64   `json:"ids,optional"`
}

type RoleInfoIndexResp struct {
	List  []*RoleInfo `json:"list"`  //角色列表数据
	Total int64       `json:"total"` //角色列表总数
}

type RoleMenuIndexReq struct {
	ID         int64  `json:"id"`      //角色编号
	AppCode    string `json:"appCode"` // 应用编号
	ModuleCode string `json:"moduleCode"`
}

type RoleMenuIndexResp struct {
	MenuIDs []int64 `json:"menuIDs"` //菜单编号列表
}

type RoleMenuMultiUpdateReq struct {
	ID         int64   `json:"id"`      //角色编号
	AppCode    string  `json:"appCode"` // 应用编号
	ModuleCode string  `json:"moduleCode"`
	MenuIDs    []int64 `json:"menuIDs"` //菜单编号列表
}

type RoleModuleIndexReq struct {
	ID      int64  `json:"id"`      //角色编号
	AppCode string `json:"appCode"` // 应用编号
}

type RoleModuleIndexResp struct {
	ModuleCodes []string `json:"moduleCodes"` //菜单编号列表
}

type RoleModuleMultiUpdateReq struct {
	ID          int64    `json:"id"`      //角色编号
	AppCode     string   `json:"appCode"` // 应用编号
	ModuleCodes []string `json:"moduleCodes"`
}

type SendOption struct {
	TimeoutToFail  int64 `json:"timeoutToFail,optional"`  //超时失败时间
	RequestTimeout int64 `json:"requestTimeout,optional"` //请求超时,超时后会进行重试
	RetryInterval  int64 `json:"retryInterval,optional"`  //重试间隔
}

type SlotInfo struct {
	ID       int64             `json:"id,optional"`
	Code     string            `json:"code"`     // 主编码
	SubCode  string            `json:"subCode"`  // 子编码
	SlotCode string            `json:"slotCode"` //slot的编码
	Method   string            `json:"method"`   // 请求方式 GET  POST
	Uri      string            `json:"uri"`      // 参考: /api/v1/system/user/self/captcha?fwefwf=gwgweg&wefaef=gwegwe
	Hosts    []string          `json:"hosts"`    //访问的地址 host or host:port
	Body     string            `json:"body"`     // body 参数模板
	Handler  map[string]string `json:"handler"`  //http头 key是头的ID,value是头的值(暂时不需要做这个字段)
	AuthType string            `json:"authType"` //鉴权类型 core
	Desc     string            `json:"desc"`     //描述类型
}

type SlotInfoIndexReq struct {
	Page    *PageInfo `json:"page,optional"`    //进行数据分页（不传默认2000相当于全部）
	Code    string    `json:"code,optional"`    //主编码
	SubCode string    `json:"subCode,optional"` //子编码
}

type SlotInfoIndexResp struct {
	Total int64       `json:"total,optional"` //拥有的总数
	List  []*SlotInfo `json:"list"`           //项目列表
}

type SysLogLoginIndexReq struct {
	Page          *PageInfo `json:"page,optional"`          //分页信息,只获取一个则不填
	IpAddr        string    `json:"ipAddr,optional"`        //按ip地址查找
	LoginLocation string    `json:"loginLocation,optional"` //按登录地址查找
	DateRange     DateRange `json:"dateRange,optional"`     //按时间范围查找
	AppCode       string    `json:"appCode,optional"`       // 应用编号
}

type SysLogLoginIndexResp struct {
	List  []*SysLogLoginInfo `json:"list"`  //登录日志列表数据
	Total int64              `json:"total"` //登录日志列表总记录数
}

type SysLogLoginInfo struct {
	UserID        int64  `json:"userID,string,optional"` // 用户id
	AppCode       string `json:"appCode"`                // 应用编号
	UserName      string `json:"userName"`               // 登录账号
	IpAddr        string `json:"ipAddr"`                 // 登录IP地址
	LoginLocation string `json:"loginLocation"`          // 登录地点
	Browser       string `json:"browser"`                // 浏览器类型
	Os            string `json:"os"`                     // 操作系统
	Code          int64  `json:"code,string"`            // 登录状态（200成功 其它失败）
	Msg           string `json:"msg"`                    // 提示消息
	CreatedTime   int64  `json:"createdTime,string"`     // 登录时间
}

type SysLogOperIndexReq struct {
	Page         *PageInfo `json:"page,optional"`                 //分页信息,只获取一个则不填
	OperName     string    `json:"operName,optional "`            //按操作名称查找
	OperUserName string    `json:"operUserName,optional "`        //按操作人员名称查找
	BusinessType int64     `json:"businessType,string,optional "` //按业务类型（1新增 2修改 3删除 4查询）查找
	AppCode      string    `json:"appCode,optional"`              // 应用编号
}

type SysLogOperIndexResp struct {
	List  []*SysLogOperInfo `json:"list"`  //操作日志列表数据
	Total int64             `json:"total"` //操作日志列表总记录数
}

type SysLogOperInfo struct {
	UserID       int64  `json:"userID,string,optional"` // 用户id
	AppCode      string `json:"appCode"`                // 应用编号
	OperUserName string `json:"operUserName"`           //操作人员名称
	OperName     string `json:"operName"`               //操作名称
	BusinessType int64  `json:"businessType,string"`    //业务类型（1新增 2修改 3删除 4查询）
	Uri          string `json:"uri"`                    //请求地址
	OperIpAddr   string `json:"operIpAddr"`             //操作主机ip地址
	OperLocation string `json:"operLocation"`           //操作地点
	Req          string `json:"req"`                    //请求参数
	Resp         string `json:"resp"`                   //返回参数
	Code         int64  `json:"code,string"`            //登录状态（200成功 其它失败）
	Msg          string `json:"msg"`                    //提示消息
	CreatedTime  int64  `json:"createdTime,string"`     //操作时间
}

type Tag struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type TaskLogScript struct {
	Level       string `json:"level"`       //日志级别: info warn error
	Content     string `json:"content"`     //日志内容
	CreatedTime int64  `json:"createdTime"` //日志创建时间
}

type TenantAccessInfo struct {
	Code        string   `json:"code"`        // 租户编号
	AccessCodes []string `json:"accessCodes"` // 模块编号
}

type TenantAccessInfoTreeResp struct {
	List  []*AccessModuleInfo `json:"list"`
	Total int64               `json:"total"`
}

type TenantAgreement struct {
	ID      int64  `json:"id,optional"`      // 编号
	Code    string `json:"code,optional"`    // 编号
	Name    string `json:"name,optional"`    // 协议名称
	Title   string `json:"title,optional"`   //协议标题
	Content string `json:"content,optional"` //协议内容(只有详情会返回)
}

type TenantAgreementIndexReq struct {
	Page *PageInfo `json:"page,optional"` // 分页信息
}

type TenantAgreementIndexResp struct {
	List  []*TenantAgreement `json:"list"`  // 列表数据
	Total int64              `json:"total"` // 列表总记录数
}

type TenantApp struct {
	AppInfo
	MiniDing *ThirdAppConfig `json:"miniDing,optional"` //钉钉小程序
}

type TenantAppIndexReq struct {
	Code string `json:"code,optional"` // 应用编号
}

type TenantAppIndexResp struct {
	List  []*TenantApp `json:"list"`  // 租户列表数据
	Total int64        `json:"total"` // 租户列表总记录数
}

type TenantAppInfo struct {
	Code     string             `json:"code,optional"` // 应用编号
	AppCode  string             `json:"appCode"`
	Modules  []*TenantAppModule `json:"modules"`
	MiniDing *ThirdAppConfig    `json:"miniDing,optional"` //钉钉小程序
	MiniWx   *ThirdAppConfig    `json:"miniWx,optional"`   //微信小程序
}

type TenantAppMenu struct {
	TemplateID int64  `json:"templateID"`
	Code       string `json:"code,optional"`    // 应用编号
	AppCode    string `json:"appCode,optional"` // 应用编号
	MenuInfo
	Children []*TenantAppMenu `json:"children,optional"`
}

type TenantAppMenuIndexReq struct {
	Code       string `json:"code"` // 应用编号
	AppCode    string `json:"appCode"`
	ModuleCode string `json:"moduleCode"`
	IsRetTree  bool   `json:"isRetTree,optional"`
}

type TenantAppMenuIndexResp struct {
	List []*TenantAppMenu `json:"list"`
}

type TenantAppModule struct {
	Code    string  `json:"code"` // 应用编号
	MenuIDs []int64 `json:"menuIDs,optional"`
	ApiIDs  []int64 `json:"apiIDs,optional"`
}

type TenantAppModuleMultiCreate struct {
	Code    string             `json:"code,optional"` // 应用编号
	AppCode string             `json:"appCode"`
	Modules []*TenantAppModule `json:"modules"`
}

type TenantAppWithIDOrCode struct {
	ID      int64  `json:"id,optional"`      // 编号
	Code    string `json:"code,optional"`    // 应用编号
	AppCode string `json:"appCode,optional"` // 应用编号
}

type TenantCore struct {
	Code             string  `json:"code"`          // 应用编号
	Name             string  `json:"name,optional"` // 接口名称
	Desc             *string `json:"desc,optional"` // 备注
	BackgroundImg    string  `json:"backgroundImg,optional"`
	LogoImg          string  `json:"logoImg,optional"`
	Title            string  `json:"title,optional"`
	TitleEn          string  `json:"titleEn,optional"`
	BackgroundColour string  `json:"backgroundColour,optional"`
	Footer           string  `json:"footer,optional"` //页尾
}

type TenantInfo struct {
	ID                    int64     `json:"id,optional"`   // 接口编号
	Code                  string    `json:"code"`          // 应用编号
	Name                  string    `json:"name,optional"` // 接口名称
	AdminUserID           int64     `json:"adminUserID,optional,string"`
	AdminRoleID           int64     `json:"adminRoleID,optional"`
	Desc                  *string   `json:"desc,optional"` // 备注
	DefaultProjectID      int64     `json:"defaultProjectID,optional"`
	BackgroundColour      string    `json:"backgroundColour,optional"`
	BackgroundImg         string    `json:"backgroundImg,optional"`
	Footer                string    `json:"footer,optional"` //页尾
	IsUpdateBackgroundImg bool      `json:"isUpdateBackgroundImg,optional,omitempty"`
	LogoImg               string    `json:"logoImg,optional"`
	IsUpdateLogoImg       bool      `json:"isUpdateLogoImg,optional,omitempty"`
	Title                 string    `json:"title,optional"`
	TitleEn               string    `json:"titleEn,optional"`
	CreatedTime           int64     `json:"createdTime,string,optional"` // 创建时间
	Status                int64     `json:"status,optional"`
	AdminUserInfo         *UserCore `json:"adminUserInfo,omitempty"` //管理员信息
}

type TenantInfoCreateReq struct {
	Info          *TenantInfo `json:"info"`
	AdminUserInfo *UserInfo   `json:"adminUserInfo"`
}

type TenantInfoCreateResp struct {
	Code string `json:"code"`
}

type TenantInfoIndexReq struct {
	Page          *PageInfo `json:"page,optional"`          // 分页信息,只获取一个则不填
	Name          string    `json:"name,optional"`          // 应用名称
	Code          string    `json:"code,optional"`          // 应用编号
	WithAdminUser bool      `json:"withAdminUser,optional"` //同时获取管理员核心信息
}

type TenantInfoIndexResp struct {
	List  []*TenantInfo `json:"list"`  // 租户列表数据
	Total int64         `json:"total"` // 租户列表总记录数
}

type TenantModuleCreateReq struct {
	Code       string  `json:"code"` // 应用编号
	AppCode    string  `json:"appCode"`
	ModuleCode string  `json:"moduleCode"`
	MenuIDs    []int64 `json:"menuIDs"`
	ApiIDs     []int64 `json:"apiIDs"`
}

type TenantModuleIndexReq struct {
	Code    string    `json:"code"` // 应用编号
	AppCode string    `json:"appCode"`
	Page    *PageInfo `json:"page,optional"`
}

type TenantModuleIndexResp struct {
	List []*ModuleInfo `json:"list"`
}

type TenantModuleWithIDOrCode struct {
	ID         int64  `json:"id,optional"`      // 编号
	Code       string `json:"code,optional"`    // 应用编号
	AppCode    string `json:"appCode,optional"` // 应用编号
	ModuleCode string `json:"moduleCode,optional"`
}

type ThirdApp struct {
	AppID     string `json:"appID,optional"`
	AppKey    string `json:"appKey,optional"`
	AppSecret string `json:"appSecret,optional"`
}

type ThirdAppConfig struct {
	AppID     string `json:"appID"`
	AppKey    string `json:"appKey"` //微信小程序无需填写
	AppSecret string `json:"appSecret"`
}

type ThirdEmailConfig struct {
	From     string `json:"from"`     // 发件人  你自己要发邮件的邮箱
	Host     string `json:"host"`     // 服务器地址 例如 smtp.qq.com  请前往QQ或者你要发邮件的邮箱查看其smtp协议
	Secret   string `json:"secret"`   // 密钥    用于登录的密钥 最好不要用邮箱密码 去邮箱smtp申请一个用于登录的密钥
	Nickname string `json:"nickname"` // 昵称    发件人昵称 通常为自己的邮箱
	Port     int64  `json:"port"`     // 端口     请前往QQ或者你要发邮件的邮箱查看其smtp协议 大多为 465
	IsSSL    int64  `json:"isSsl"`    // 是否SSL   是否开启SSL
}

type ThirdSms struct {
	Type            string `json:"type,optional"`            //ali(阿里云) tencent(腾讯云)
	AccessKeyID     string `json:"accessKeyID,optional"`     //阿里云,腾讯云必填
	AccessKeySecret string `json:"accessKeySecret,optional"` //阿里云,腾讯云必填
	AppID           string `json:"appID,optional"`           //腾讯云必填
	AppKey          string `json:"appKey,optional"`          //腾讯云必填
}

type TimeRange struct {
	Start int64 `json:"start,optional"` //开始时间 unix时间戳
	End   int64 `json:"end,optional"`   //结束时间 unix时间戳
}

type TimedTaskGroup struct {
	Code     string            `json:"code"`              //任务组编码
	Name     string            `json:"name,optional"`     // 组名
	Type     string            `json:"type,optional"`     //组类型:queue(消息队列消息发送)  sql(执行sql) script(脚本执行) email(邮件发送) http(http请求)
	SubType  string            `json:"subType,optional"`  //组子类型 natsJs nats                        js
	Priority int64             `json:"priority,optional"` //组优先级: 6:critical 最高优先级  3: default 普通优先级 1:low 低优先级
	Env      map[string]string `json:"env,optional"`      //环境变量
	Config   string            `json:"config,optional"`
}

type TimedTaskGroupIndexReq struct {
	Page *PageInfo `json:"page,optional"` //分页信息,只获取一个则不填
}

type TimedTaskGroupIndexResp struct {
	List  []*TimedTaskGroup `json:"list"`
	Total int64             `json:"total"`
}

type TimedTaskInfo struct {
	GroupCode string   `json:"groupCode"`         //组编码
	Type      int64    `json:"type,optional"`     //任务类型 1 定时任务 2 延时任务 3 消息队列触发
	Name      string   `json:"name,optional"`     // 任务名称
	Code      string   `json:"code"`              //任务编码
	Params    string   `json:"params,optional"`   // 任务参数,延时任务如果没有传任务参数会拿数据库的参数来执行
	CronExpr  string   `json:"cronExpr,optional"` // cron执行表达式
	Status    int64    `json:"status,optional"`   // 状态
	Topics    []string `json:"topics,optional"`   //触发topic列表
	Priority  int64    `json:"priority,optional"` //优先级: 10:critical 最高优先级  3: default 普通优先级 1:low 低优先级
}

type TimedTaskInfoIndexReq struct {
	Page      *PageInfo `json:"page,optional"` //分页信息,只获取一个则不填
	GroupCode string    `json:"groupCode"`     //组编码
}

type TimedTaskInfoIndexResp struct {
	List  []*TimedTaskInfo `json:"list"`
	Total int64            `json:"total"`
}

type TimedTaskLog struct {
	ID          int64               `json:"id"`
	GroupCode   string              `json:"groupCode"`  //组编码
	TaskCode    string              `json:"taskCode"`   //任务编码
	Params      string              `json:"params"`     // 任务参数
	ResultCode  int64               `json:"resultCode"` //结果code
	ResultMsg   string              `json:"resultMsg"`  //结果消息
	CreatedTime int64               `json:"createdTime"`
	Sql         *TimedTaskLogSql    `json:"sql,omitempty"`
	Script      *TimedTaskLogScript `json:"script,omitempty"`
}

type TimedTaskLogIndexReq struct {
	Page      *PageInfo `json:"page"`              //分页信息,只获取一个则不填
	GroupCode string    `json:"groupCode"`         //组编码
	TaskCode  string    `json:"taskCode,optional"` //组编码
}

type TimedTaskLogIndexResp struct {
	List  []*TimedTaskLog `json:"list"`
	Total int64           `json:"total"`
}

type TimedTaskLogScript struct {
	ExecLog []*TaskLogScript `json:"execLog"` //执行日志
}

type TimedTaskLogSql struct {
	SelectNum int64 `json:"selectNum"` //查询的数量
	ExecNum   int64 `json:"execNum"`   //执行的数量
}

type TimedTaskOption struct {
	Priority  int64  `json:"priority,optional"`  //优先级: 6:critical 最高优先级  3: default 普通优先级 1:low 低优先级//以下两个参数优先使用ProcessIn
	ProcessIn int64  `json:"processIn,optional"` //多久之后发 秒数
	ProcessAt int64  `json:"processAt,optional"` // 固定时间发 秒时间戳
	Timeout   int64  `json:"timeout,optional"`   //超时时间 优先使用 秒数
	Deadline  int64  `json:"deadline,optional"`  //截止时间  秒时间戳
	TaskID    string `json:"taskID,optional"`    //指定运行的taskID
}

type TimedTaskParamQueue struct {
	Topic   string `json:"topic"`
	Payload string `json:"payload"`
}

type TimedTaskParamScript struct {
	Param       map[string]string `json:"param"`
	ExecContent string            `json:"execContent"` //填写脚本内容,如果不填,则会使用数据库中第一次初始化的参数
}

type TimedTaskParamSql struct {
	Sql string `json:"sql"`
}

type TimedTaskSendReq struct {
	GroupCode   string                `json:"groupCode"`           //组需要提前创建好
	Code        string                `json:"code"`                //任务code
	Option      *TimedTaskOption      `json:"option,optional"`     //选项
	ParamQueue  *TimedTaskParamQueue  `json:"paramQueue,optional"` //消息队列发送类型配置,如果不传则使用数据库定义的
	ParamSql    *TimedTaskParamSql    `json:"paramSql,optional"`   //数据库执行类型配置,如果不传则使用数据库定义的
	ParamScript *TimedTaskParamScript `json:"paramScript,optional"`
}

type TimedTaskWithTaskID struct {
	TaskID string `json:"taskID"` //运行的taskID
}

type UploadFileResp struct {
	FilePath string `json:"filePath"` //文件路径(带文件名)
	FileUri  string `json:"fileUri"`  //文件uri 相对路径
}

type UploadUrlCreateReq struct {
	Business string `json:"business"`        //业务(如产品管理 productManage)
	Scene    string `json:"scene"`           //场景(业务定义 如产品图片 productImg)
	FilePath string `json:"filePath"`        //文件路径(带文件名)
	Rename   bool   `json:"rename,optional"` //true 文件重命名，false 不重命名(默认)
}

type UploadUrlCreateResp struct {
	FilePath  string `json:"filePath"`  //文件路径(带文件名)
	UploadUri string `json:"uploadUri"` //附件直传地址
}

type UserAreaApplyCreateReq struct {
	AreaID   int64 `json:"areaID,string"`
	AuthType int64 `json:"authType"` //1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
}

type UserAreaApplyDealReq struct {
	IsApprove bool    `json:"isApprove"` //是否同意
	IDs       []int64 `json:"ids"`       //权限数据IDs
}

type UserAreaApplyIndexReq struct {
	Page         *PageInfo `json:"page,optional"`          //进行数据分页（不传默认2000相当于全部）
	AuthTypes    []int64   `json:"authTypes,optional"`     //权限类型 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
	AreaID       int64     `json:"areaID,string,optional"` //项目id
	WithAreaInfo bool      `json:"withAreaInfo,optional"`  //把区域信息附带上
	WithUserInfo bool      `json:"withUserInfo,optional"`  //把用户信息带上
}

type UserAreaApplyIndexResp struct {
	List  []*UserAreaApplyInfo `json:"list"`
	Total int64                `json:"total"`
}

type UserAreaApplyInfo struct {
	ID          int64     `json:"id"`            //项目id
	UserID      int64     `json:"userID,string"` //用户ID
	AreaID      int64     `json:"areaID,string"` //项目id
	AuthType    int64     `json:"authType"`      // 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
	CreatedTime int64     `json:"createdTime"`
	AreaInfo    *AreaInfo `json:"areaInfo"`
	UserInfo    *UserInfo `json:"userInfo"`
}

type UserCaptchaReq struct {
	Account string `json:"account,optional"`                               //短信验证时填写手机号,邮箱验证时填写邮箱
	Type    string `json:"type,options=phone|image|email"`                 //验证方式:短信验证,图片验证码
	Use     string `json:"use,options=login|register|changePwd|forgetPwd"` //用途
	Code    string `json:"code,optional"`                                  //验证码    微信邮箱验证登录填code
	CodeID  string `json:"codeID,optional"`                                //验证码编号 微信邮箱验证登录填state
}

type UserCaptchaResp struct {
	CodeID string `json:"codeID"`       //验证码编号
	Url    string `json:"url,optional"` //图片验证码url
	Expire int64  `json:"expire"`       //过期时间
}

type UserChangePwdReq struct {
	Type     string `json:"type,options=phone|email"` //验证方式:	phone手机号 email邮箱
	Code     string `json:"code"`                     //验证码    微信登录填code 账号密码登录时填写密码
	CodeID   string `json:"codeID,optional"`          //验证码编号 微信登录填state
	Password string `json:"password,optional"`        //密码
}

type UserCore struct {
	UserID      int64  `json:"userID,string,optional"`      // 用户id
	UserName    string `json:"userName,optional"`           // 用户名(唯一)
	Email       string `json:"email,optional"`              // 邮箱
	Phone       string `json:"phone,optional"`              // 手机号
	LastIP      string `json:"lastIP,optional"`             // 最后登录ip
	RegIP       string `json:"regIP,optional"`              // 注册ip
	NickName    string `json:"nickName,optional"`           // 用户的昵称
	HeadImg     string `json:"headImg,optional"`            // 用户头像
	CreatedTime int64  `json:"createdTime,string,optional"` // 创建时间
}

type UserCreateResp struct {
	UserID int64 `json:"userID,string,optional"` // 用户id
}

type UserForgetPwdReq struct {
	Type     string `json:"type,options=phone|email"` //验证方式:	phone手机号 email邮箱
	Account  string `json:"account,optional"`         //手机号注册时填写手机号 账号密码注册时填写userName
	Code     string `json:"code,optional"`            //验证码    微信登录填code 账号密码登录时填写密码
	CodeID   string `json:"codeID,optional"`          //验证码编号 微信登录填state
	Password string `json:"password"`                 //密码
}

type UserInfo struct {
	UserID          int64            `json:"userID,string,optional"`             // 用户id
	UserName        string           `json:"userName,optional"`                  // 用户名(唯一)
	Password        string           `json:"password,optional,omitempty"`        // 登录密码
	Email           *string          `json:"email,optional"`                     // 邮箱
	Phone           *string          `json:"phone,optional"`                     // 手机号
	LastIP          string           `json:"lastIP,optional"`                    // 最后登录ip
	RegIP           string           `json:"regIP,optional"`                     // 注册ip
	NickName        string           `json:"nickName,optional"`                  // 用户的昵称
	City            string           `json:"city,optional"`                      // 用户所在城市
	Country         string           `json:"country,optional"`                   // 用户所在国家
	Province        string           `json:"province,optional"`                  // 用户所在省份
	Language        string           `json:"language,optional"`                  // 用户的语言，简体中文为zh_CN
	HeadImg         string           `json:"headImg,optional"`                   // 用户头像
	IsUpdateHeadImg bool             `json:"isUpdateHeadImg,omitempty,optional"` // 用户头像
	CreatedTime     int64            `json:"createdTime,string,optional"`        // 创建时间
	Role            int64            `json:"role,optional"`                      // 用户角色默认
	Sex             int64            `json:"sex,optional"`                       // 用户的性别，值为1时是男性，值为2时是女性，值为0时是未知
	IsAllData       int64            `json:"isAllData,optional,omitempty"`       // 是否所有数据权限（1是，2否）
	Status          int64            `json:"status,optional"`
	MessageNotRead  map[string]int64 `json:"messageNotRead,optional,omitempty"`
	Roles           []*RoleInfo      `json:"roles,optional,omitempty"`
	Tenant          *TenantInfo      `json:"tenant,optional,omitempty"`
}

type UserInfoCreateReq struct {
	Info    *UserInfo `json:"info"`
	RoleIDs []int64   `json:"roleIDs,optional,range=(0:120]"` //角色编号列表
}

type UserInfoDeleteReq struct {
	UserID int64 `json:"userID,string,optional"` // 用户id
}

type UserInfoIndexReq struct {
	Page           *PageInfo `json:"page,optional"`     //分页信息
	UserName       string    `json:"userName,optional"` //用户名(唯一)
	Phone          string    `json:"phone,optional"`    // 手机号
	Email          string    `json:"email,optional"`    // 邮箱
	Account        string    `json:"account,optional"`
	UserIDs        []int64   `json:"userIDs,optional"`
	HasAccessAreas []int64   `json:"hasAccessAreas,string,optional"` //查询拥有该区域权限的用户
	RoleCode       string    `json:"roleCode,optional"`              //查询角色code
	WithRoles      bool      `json:"withRoles,optional"`
}

type UserInfoIndexResp struct {
	List  []*UserInfo `json:"list,omitempty"`           //用户信息列表
	Total int64       `json:"total,optional,omitempty"` //总数
}

type UserInfoReadReq struct {
	UserID     int64 `json:"userID,string,optional"` // 用户id
	WithRoles  bool  `json:"withRoles,optional"`
	WithTenant bool  `json:"withTenant,optional"`
}

type UserLoginReq struct {
	Account   string `json:"account,optional"`                                              //登录账号(支持用户名,手机号,邮箱) 账号密码登录时需要填写
	PwdType   int32  `json:"pwdType,optional"`                                              //账号密码登录时需要填写.0或1,无密码 2，明文 3，md5加密
	Password  string `json:"password,optional"`                                             //密码，建议md5转换 密码登录时需要填写
	LoginType string `json:"loginType,options=phone|wxOpen|wxIn|wxMiniP|dingApp|pwd|email"` //验证类型 phone 手机号 wxOpen 微信开放平台 wxIn 微信内 wxMiniP 微信小程序 pwd 账号密码 email 邮箱
	Code      string `json:"code,optional"`                                                 //验证码    微信邮箱验证登录填code
	CodeID    string `json:"codeID,optional"`                                               //验证码编号 微信邮箱验证登录填state
}

type UserLoginResp struct {
	Info  UserInfo    `json:"info"`  //用户信息
	Roles []*RoleInfo `json:"roles"` //角色列表
	Token JwtToken    `json:"token"` //用户token
}

type UserMessage struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"userID"`
	IsRead int64 `json:"isRead"`
	*MessageInfo
}

type UserMessageIndexReq struct {
	Page       *PageInfo `json:"page,optional"`
	Group      string    `json:"group,optional"`
	NotifyCode string    `json:"notifyCode,optional"`
	IsRead     int64     `json:"isRead,optional"`
	Str1       string    `json:"str1,optional"`
	Str2       string    `json:"str2,optional"`
	Str3       string    `json:"str3,optional"`
}

type UserMessageIndexResp struct {
	Total int64          `json:"total"`
	List  []*UserMessage `json:"list"`
}

type UserMessageStatistics struct {
	Group string `json:"group"`
	Count int64  `json:"count"`
}

type UserMessageStatisticsResp struct {
	List []*UserMessageStatistics `json:"list"`
}

type UserProfile struct {
	Code   string `json:"code"`
	Params string `json:"params"`
}

type UserProfileIndexReq struct {
	Codes []string `json:"codes"`
}

type UserProfileIndexResp struct {
	Profiles []*UserProfile `json:"profiles"`
}

type UserRegisterReq struct {
	RegType  string            `json:"regType,options=phone|email|wxOpen|wxIn|wxMiniP|pwd|dingApp"`
	Account  string            `json:"account,optional"`  //手机号注册时填写手机号 账号密码注册时填写userName
	Code     string            `json:"code"`              //验证码    微信登录填code 账号密码登录时填写密码
	CodeID   string            `json:"codeID,optional"`   //验证码编号 微信登录填state
	Password string            `json:"password,optional"` //密码
	Expand   map[string]string `json:"expand,optional"`   ////拓展, 微信登录方式 phoneCode:获取手机号code
	Info     *UserInfo         `json:"info,optional"`     //用户信息
}

type UserResourceReadResp struct {
	Roles []*RoleInfo `json:"roles"` //角色列表
	Info  *UserInfo   `json:"info"`  //用户信息
}

type UserResourceWithModuleReq struct {
	ModuleCode string `json:"moduleCode,optional"` // 应用编号
}

type UserRoleIndexReq struct {
	UserID int64 `json:"userID,string"` // 用户id
}

type UserRoleIndexResp struct {
	Total int64       `json:"total"`
	List  []*RoleInfo `json:"list"` //用户角色列表
}

type UserRoleMultiUpdateReq struct {
	UserID  int64   `json:"userID,string"` // 用户id
	RoleIDs []int64 `json:"roleIDs"`       //角色编号列表
}

type UserSearchReq struct {
	Account string `json:"account"`
}

type UserSearchResp struct {
	UserID   int64  `json:"userID,string,optional"` // 用户id
	UserName string `json:"userName,optional"`      // 用户名(唯一)
	NickName string `json:"nickName,optional"`      // 用户的昵称
	HeadImg  string `json:"headImg,optional"`       // 用户头像
	Status   int64  `json:"status,optional"`
}

type UserSelfAppReadReq struct {
	AppID   string `json:"appID"`   //
	Type    string `json:"type"`    //  app:应用  mini:小程序
	SubType string `json:"subType"` //wx:微信小程序  dingTalk:钉钉小程序
}

type UserSelfAppReadResp struct {
	Code        string   `json:"code"`                 // 应用编号
	Name        string   `json:"name,optional"`        // 名称
	TenantCodes []string `json:"tenantCodes,optional"` //拥有这个app的租户列表
}

type UserSelfReadReq struct {
	WithRoles  bool `json:"withRoles,optional"`
	WithTenant bool `json:"withTenant,optional"`
}

type WeatherAir struct {
	Aqi      string `json:"aqi"`
	Level    string `json:"level"`
	Category string `json:"category"`
	Primary  string `json:"primary"`
	Pm10     string `json:"pm10"`
	Pm2P5    string `json:"pm2p5"`
	No2      string `json:"no2"`
	So2      string `json:"so2"`
	Co       string `json:"co"`
	O3       string `json:"o3"`
}

type WeatherReadReq struct {
	Position Point `json:"position"`
}

type WeatherReadResp struct {
	ObsTime   string     `json:"obsTime"`
	Temp      string     `json:"temp"`
	FeelsLike string     `json:"feelsLike"`
	Icon      string     `json:"icon"`
	Text      string     `json:"text"`
	Wind360   string     `json:"wind360"`
	WindDir   string     `json:"windDir"`
	WindScale string     `json:"windScale"`
	WindSpeed string     `json:"windSpeed"`
	Humidity  string     `json:"humidity"`
	Precip    string     `json:"precip"`
	Pressure  string     `json:"pressure"`
	Vis       string     `json:"vis"`
	Cloud     string     `json:"cloud"`
	Dew       string     `json:"dew"`
	Air       WeatherAir `json:"air"`
}

type WebsocketSubscribeIndexResp struct {
	List []*WebsocketSubscribeInfo `json:"list"`
}

type WebsocketSubscribeInfo struct {
	Code   string                 `json:"code"`   //订阅的code
	Params map[string]interface{} `json:"params"` //订阅参数
}

type WithAppCodeID struct {
	AppCode string `json:"appCode"`
	ID      int64  `json:"id"`
	Code    string `json:"code"`
}

type WithCode struct {
	Code string `json:"code,optional"`
}

type WithGroupCode struct {
	GroupCode string `json:"groupCode,optional"` // id
	Code      string `json:"code,optional"`
}

type WithID struct {
	ID int64 `json:"id,optional"` // id
}

type WithIDOrCode struct {
	ID   int64  `json:"id,optional"` // id
	Code string `json:"code,optional"`
}
