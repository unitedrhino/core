// Code generated by goctl. DO NOT EDIT.
package types

type AccessGroupInfo struct {
	ID       string        `json:"id,optional"`   // id
	Name     string        `json:"name,optional"` // 接口分组
	Children []*AccessInfo `json:"children"`      // 列表数据
}

type AccessIndexReq struct {
	Page       *PageInfo `json:"page,optional"`                   // 分页信息,只获取一个则不填
	Group      string    `json:"group,optional"`                  // 接口路由
	Name       string    `json:"name,optional"`                   // 接口名称
	Code       string    `json:"code,optional"`                   // 应用编号
	IsNeedAuth int64     `json:"isNeedAuth,optional,range=[0:2]"` // 是否需要权限认证 1是 2否
	WithApis   bool      `json:"withApis,optional"`
}

type AccessIndexResp struct {
	List  []*AccessInfo `json:"list"`  // 接口列表数据
	Total int64         `json:"total"` // 接口列表总记录数
}

type AccessInfo struct {
	ID         int64      `json:"id,optional"`                     // 接口编号
	Code       string     `json:"code"`                            // 模块编号
	Group      string     `json:"group,optional"`                  // 分组
	Name       string     `json:"name,optional"`                   // 接口名称
	IsNeedAuth int64      `json:"isNeedAuth,optional,range=[1:2]"` // 是否需要认证（ 1需要 2不需要）
	Desc       string     `json:"desc,optional"`                   // 备注
	Apis       []*ApiInfo `json:"apis,optional"`                   //接口信息
}

type AccessTreeResp struct {
	List []*AccessGroupInfo `json:"list"` // 接口列表数据
}

type ApiInfo struct {
	ID           int64  `json:"id,optional"`                       // 接口编号
	AccessCode   string `json:"accessCode"`                        // 模块编号
	Route        string `json:"route,optional"`                    // 接口路由
	Method       string `json:"method,optional"`                   // 接口请求方式: （1 GET 2 POST 3 HEAD 4 OPTIONS 5 PUT 6 DELETE 7 TRACE 8 CONNECT 9 其它）
	Name         string `json:"name,optional"`                     // 接口名称
	BusinessType int64  `json:"businessType,optional,range=[1:5]"` // 业务类型（1新增 2修改 3删除 4查询 5其它)
	IsAuthTenant int64  `json:"isAuthTenant,optional,range=[1:2]"` // 是否可以授权给普通租户
	Desc         string `json:"desc,optional"`                     // 备注
}

type ApiInfoIndexReq struct {
	Page         *PageInfo `json:"page,optional"`                     // 分页信息,只获取一个则不填
	Route        string    `json:"route,optional"`                    // 接口路由
	Method       string    `json:"method,optional"`                   // 接口请求方式: （1 GET 2 POST 3 HEAD 4 OPTIONS 5 PUT 6 DELETE 7 TRACE 8 CONNECT 9 其它）
	Name         string    `json:"name,optional"`                     // 接口名称
	AccessCode   string    `json:"accessCode,optional"`               // 应用编号
	IsAuthTenant int64     `json:"isAuthTenant,optional,range=[0:2]"` // 是否可以授权给普通租户
}

type ApiInfoIndexResp struct {
	List  []*ApiInfo `json:"list"`  // 接口列表数据
	Total int64      `json:"total"` // 接口列表总记录数
}

type AppDeleteReq struct {
	ID int64 `json:"id"` // 接口编号
}

type AppInfo struct {
	ID      int64   `json:"id,optional"`      // 接口编号
	Code    string  `json:"code"`             // 应用编号
	Type    string  `json:"type"`             //应用类型 web:web页面  app:应用  mini:小程序
	Name    string  `json:"name,optional"`    // 接口名称
	Desc    *string `json:"desc,optional"`    // 备注
	BaseUrl string  `json:"baseUrl,optional"` // 应用编号
	LogoUrl string  `json:"logoUrl,optional"`
}

type AppInfoIndexReq struct {
	Page *PageInfo `json:"page,optional"` // 分页信息,只获取一个则不填
	Name string    `json:"name,optional"` // 应用名称
	Code string    `json:"code,optional"` // 应用编号
}

type AppInfoIndexResp struct {
	List  []*AppInfo `json:"list"`  // 接口列表数据
	Total int64      `json:"total"` // 接口列表总记录数
}

type AppModuleIndexReq struct {
	Code string `json:"code"` // 应用编号
}

type AppModuleIndexResp struct {
	ModuleCodes []string `json:"moduleCodes"` //App列表数据
}

type AppModuleMultiUpdateReq struct {
	Code        string   `json:"code"`        // 应用编号
	ModuleCodes []string `json:"moduleCodes"` //App列表数据
}

type AreaInfo struct {
	CreatedTime     int64       `json:"createdTime,optional,string"`  //创建时间（只读）
	ProjectID       int64       `json:"projectID,string,optional"`    //项目id（只读）
	AreaID          int64       `json:"areaID,string,optional"`       //项目区域id（只读）
	ParentAreaID    int64       `json:"parentAreaID,string,optional"` //上级项目区域id（只读）
	AreaName        string      `json:"areaName,optional"`            //项目区域名称（读写）
	Position        *Point      `json:"position,optional"`            //项目区域定位，默认百度坐标系（读写）
	Desc            *string     `json:"desc,optional"`                //项目区域备注（读写）
	LowerLevelCount int64       `json:"lowerLevelCount,optional"`     //下级的数量统计（只读）
	AreaIDPath      []int64     `json:"areaIDPath,optional"`          //项目区域ids（只读）
	AreaNamePath    []string    `json:"areaNamePath,optional"`        //（只读）
	Children        []*AreaInfo `json:"children,optional"`            //下级项目区域列表（只读）
}

type AreaInfoIndexReq struct {
	Page          *PageInfo `json:"page,optional"`             //进行数据分页（不传默认2000相当于全部）
	ProjectID     int64     `json:"projectID,string,optional"` //项目id
	AreaIDs       []int64   `json:"areaIDs,optional"`          //项目区域ids
	ParentAreaID  int64     `json:"parentAreaID,string,optional"`
	IsRetTopLevel bool      `json:"isRetTopLevel,optional"` //如果该参数为true则返回除了root节点的有权限的最高层的区域列表
}

type AreaInfoIndexResp struct {
	Total int64       `json:"total,optional"` //拥有的总数
	List  []*AreaInfo `json:"list"`           //项目区域列表
}

type AreaInfoReadReq struct {
	AreaID    int64 `json:"areaID,string"`             //项目区域id
	ProjectID int64 `json:"projectID,string,optional"` //项目id 不填选默认项目
	IsRetTree bool  `json:"isRetTree,optional"`
}

type AreaWithID struct {
	AreaID int64 `json:"areaID,string"` //项目区域id 只读
}

type CodeReq struct {
	Code string `json:"code"`
}

type CommonResp struct {
	ID int64 `json:"id,optional"` // id
}

type ConfigResp struct {
	Map Map `json:"map"` //设备地图相关配置
	Oss Oss `json:"oss"` //oss相关配置
}

type DataArea struct {
	AreaID   int64 `json:"areaID,string"` //项目id
	AuthType int64 `json:"authType"`      // 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
}

type DataAreaDetail struct {
	*AreaInfo
	AuthType int64 `json:"authType"` // 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
}

type DataAreaIndexReq struct {
	Page       *PageInfo `json:"page,optional"`            //进行数据分页（不传默认2000相当于全部）
	UserID     int64     `json:"userID,string,optional"`   //用户ID（必填，雪花ID）
	TargetID   int64     `json:"targetID,string,optional"` //用户ID
	TargetType string    `json:"targetType,optional"`
	ProjectID  int64     `json:"projectID,string,optional"` //项目id
}

type DataAreaIndexResp struct {
	Total int64             `json:"total"` //总数
	List  []*DataAreaDetail `json:"list"`  //用户数据权限列表
}

type DataAreaMultiDeleteReq struct {
	ProjectID  int64   `json:"projectID,string"` //项目id
	TargetID   int64   `json:"targetID,string"`  //用户ID
	TargetType string  `json:"targetType"`
	AreaIDs    []int64 `json:"areaIDs,string"`
}

type DataAreaMultiUpdateReq struct {
	TargetID   int64       `json:"targetID,string"` //用户ID
	TargetType string      `json:"targetType"`
	ProjectID  int64       `json:"projectID,string"` //项目id
	Areas      []*DataArea `json:"areas"`            //权限数据IDs
}

type DataProject struct {
	ProjectID int64 `json:"projectID,string"` //权限数据ID
	AuthType  int64 `json:"authType"`         // 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
}

type DataProjectIndexReq struct {
	Page       *PageInfo `json:"page,optional"`            //进行数据分页（不传默认2000相当于全部）
	UserID     int64     `json:"userID,string,optional"`   //用户ID（必填，雪花ID）
	TargetID   int64     `json:"targetID,string,optional"` //用户ID
	TargetType string    `json:"targetType,optional"`
}

type DataProjectIndexResp struct {
	Total int64          `json:"total"` //总数
	List  []*DataProject `json:"list"`  //用户数据权限列表
}

type DataProjectMultiUpdateReq struct {
	TargetID   int64          `json:"targetID,string"` //用户ID
	TargetType string         `json:"targetType"`
	Projects   []*DataProject `json:"projects"` //权限数据IDs（必填）
}

type DateRange struct {
	Start string `json:"start,optional"` //开始时间 格式：yyyy-mm-dd
	End   string `json:"end,optional"`   //结束时间 格式：yyyy-mm-dd
}

type DeviceCore struct {
	ProductID  string `json:"productID"`  //产品ID
	DeviceName string `json:"deviceName"` //设备名称
}

type JwtToken struct {
	AccessToken  string `json:"accessToken,omitempty"`         //用户token
	AccessExpire int64  `json:"accessExpire,string,omitempty"` //token过期时间
	RefreshAfter int64  `json:"refreshAfter,string,omitempty"` //token刷新时间
}

type Map struct {
	Mode      string `json:"mode，options=baidu"` //坐标系 默认百度坐标系
	AccessKey string `json:"accessKey"`          //设备地图key
}

type MenuInfo struct {
	ID         int64       `json:"id,optional"`         // 编号
	ModuleCode string      `json:"moduleCode"`          // 模块编号
	Name       string      `json:"name,optional"`       // 菜单名称
	ParentID   int64       `json:"parentID,optional"`   // 父菜单ID，一级菜单为1
	Type       int64       `json:"type,optional"`       // 类型   1. 内部页面   2，iframe内嵌  3，外部链接跳转 4，微前端
	Path       string      `json:"path,optional"`       // 系统的path
	Component  string      `json:"component,optional"`  // 页面
	Icon       string      `json:"icon,optional"`       // 菜单图标
	Redirect   string      `json:"redirect,optional"`   // 路由重定向
	Order      int64       `json:"order,optional"`      // 左侧table排序序号
	HideInMenu int64       `json:"hideInMenu,optional"` // 菜单是否隐藏 1：是 2：否
	Body       *string     `json:"body,optional"`       //前端自定义字段
	CreateTime int64       `json:"createTime,optional"` // 创建时间
	Children   []*MenuInfo `json:"children,optional"`   //子节点
}

type MenuInfoIndexReq struct {
	ModuleCode string `json:"moduleCode,optional"` // 应用编号
	Name       string `json:"name,optional"`       // 按菜单名称筛选
	Path       string `json:"path,optional"`       // 按菜单路径筛选
	IsRetTree  bool   `json:"isRetTree,optional"`  // 是否返回树形结构
}

type MenuInfoIndexResp struct {
	List []*MenuInfo `json:"list"` //菜单列表
}

type ModuleInfo struct {
	ID         int64   `json:"id,optional"`         // 编号
	Code       string  `json:"code"`                // 应用编号
	Name       string  `json:"name,optional"`       // 菜单名称
	Type       int64   `json:"type,optional"`       // 类型   1. 内部页面   2，iframe内嵌  3，外部链接跳转 4，微前端
	SubType    int64   `json:"subType,optional"`    // 子类型   1. 内部页面   2，iframe内嵌  3，外部链接跳转 4，微前端
	Path       string  `json:"path,optional"`       // 系统的path
	Desc       *string `json:"desc,optional"`       // 页面
	Icon       string  `json:"icon,optional"`       // 菜单图标
	Url        string  `json:"url,optional"`        // 路由重定向
	Order      int64   `json:"order,optional"`      // 左侧table排序序号
	HideInMenu int64   `json:"hideInMenu,optional"` // 菜单是否隐藏 1：是 2：否
	Body       *string `json:"body,optional"`       //前端自定义字段
}

type ModuleInfoIndexReq struct {
	Page    *PageInfo `json:"page,optional"` // 分页信息,只获取一个则不填
	Codes   []string  `json:"codes,optional"`
	AppCode string    `json:"appCode,optional"` //应用绑定的code列表
	Code    string    `json:"code,optional"`    // 应用编号模糊查询
	Name    string    `json:"name,optional"`    // 按菜单名称筛选
}

type ModuleInfoIndexResp struct {
	Total int64         `json:"total"` //总数
	List  []*ModuleInfo `json:"list"`  //菜单列表
}

type Oss struct {
	Host string `json:"host"` //oss访问前缀
}

type PageInfo struct {
	Page int64 `json:"page,optional" form:"page,optional"` // 页码
	Size int64 `json:"size,optional" form:"size,optional"` // 每页大小
}

type Point struct {
	Longitude float64 `json:"longitude,range=[0:180]"` //经度
	Latitude  float64 `json:"latitude,range=[0:90]"`   //纬度
}

type ProjectInfo struct {
	CreatedTime int64   `json:"createdTime,optional,string"` //创建时间（只读）
	ProjectID   int64   `json:"projectID,string,optional"`   //项目id（只读）
	ProjectName string  `json:"projectName,optional"`        //项目名称（读写）
	AdminUserID int64   `json:"adminUserID,string,optional"` // 管理员用户id（读写）
	Position    *Point  `json:"position,optional"`           //项目定位
	Desc        *string `json:"desc,optional"`               //项目备注（读写）
}

type ProjectInfoIndexReq struct {
	Page        *PageInfo `json:"page,optional"`        //进行数据分页（不传默认2000相当于全部）
	ProjectName string    `json:"projectName,optional"` //过滤项目名称
	ProjectIDs  []int64   `json:"projectIDs,optional"`  //过滤项目id列表
}

type ProjectInfoIndexResp struct {
	Total int64          `json:"total,optional"` //拥有的总数
	List  []*ProjectInfo `json:"list"`           //项目列表
}

type ProjectWithID struct {
	ProjectID int64 `json:"projectID,string"` //项目id 只读
}

type RoleAccessIndexReq struct {
	ID int64 `json:"id"` //角色ID
}

type RoleAccessIndexResp struct {
	AccessCodes []string `json:"accessCodes"` // 模块编号
}

type RoleAccessMultiUpdateReq struct {
	ID          int64    `json:"id"`          //角色ID
	AccessCodes []string `json:"accessCodes"` // 模块编号
}

type RoleAppIndexReq struct {
	ID int64 `json:"id"` //角色ID
}

type RoleAppIndexResp struct {
	AppCodes []string `json:"appCodes"` //App列表数据
	Total    int64    `json:"total"`    //App列表总数
}

type RoleAppMultiUpdateReq struct {
	ID       int64    `json:"id"`       //角色ID
	AppCodes []string `json:"appCodes"` //App列表数据
}

type RoleInfo struct {
	ID          int64  `json:"id,optional"`          // 编号
	Name        string `json:"name,optional"`        // 角色名称
	Desc        string `json:"desc,optional"`        // 备注
	CreatedTime int64  `json:"createdTime,optional"` // 创建时间
	Status      int64  `json:"status,optional"`      // 角色状态
}

type RoleInfoIndexReq struct {
	Page   *PageInfo `json:"page,optional"`    //分页信息,只获取一个则不填
	Name   string    `json:"name,optional "`   //按名称查找角色
	Status int64     `json:"status,optional "` //按状态查找角色
}

type RoleInfoIndexResp struct {
	List  []*RoleInfo `json:"list"`  //角色列表数据
	Total int64       `json:"total"` //角色列表总数
}

type RoleMenuIndexReq struct {
	ID         int64  `json:"id"`      //角色编号
	AppCode    string `json:"appCode"` // 应用编号
	ModuleCode string `json:"moduleCode"`
}

type RoleMenuIndexResp struct {
	MenuIDs []int64 `json:"menuIDs"` //菜单编号列表
}

type RoleMenuMultiUpdateReq struct {
	ID         int64   `json:"id"`      //角色编号
	AppCode    string  `json:"appCode"` // 应用编号
	ModuleCode string  `json:"moduleCode"`
	MenuIDs    []int64 `json:"menuIDs"` //菜单编号列表
}

type RoleModuleIndexReq struct {
	ID      int64  `json:"id"`      //角色编号
	AppCode string `json:"appCode"` // 应用编号
}

type RoleModuleIndexResp struct {
	ModuleCodes []string `json:"moduleCodes"` //菜单编号列表
}

type RoleModuleMultiUpdateReq struct {
	ID          int64    `json:"id"`      //角色编号
	AppCode     string   `json:"appCode"` // 应用编号
	ModuleCodes []string `json:"moduleCodes"`
}

type SendOption struct {
	TimeoutToFail  int64 `json:"timeoutToFail,optional"`  //超时失败时间
	RequestTimeout int64 `json:"requestTimeout,optional"` //请求超时,超时后会进行重试
	RetryInterval  int64 `json:"retryInterval,optional"`  //重试间隔
}

type SysLogLoginIndexReq struct {
	Page          *PageInfo `json:"page,optional"`          //分页信息,只获取一个则不填
	IpAddr        string    `json:"ipAddr,optional"`        //按ip地址查找
	LoginLocation string    `json:"loginLocation,optional"` //按登录地址查找
	DateRange     DateRange `json:"dateRange,optional"`     //按时间范围查找
	AppCode       string    `json:"appCode,optional"`       // 应用编号
}

type SysLogLoginIndexResp struct {
	List  []*SysLogLoginInfo `json:"list"`  //登录日志列表数据
	Total int64              `json:"total"` //登录日志列表总记录数
}

type SysLogLoginInfo struct {
	UserID        int64  `json:"userID,string,optional"` // 用户id
	AppCode       string `json:"appCode"`                // 应用编号
	UserName      string `json:"userName"`               // 登录账号
	IpAddr        string `json:"ipAddr"`                 // 登录IP地址
	LoginLocation string `json:"loginLocation"`          // 登录地点
	Browser       string `json:"browser"`                // 浏览器类型
	Os            string `json:"os"`                     // 操作系统
	Code          int64  `json:"code,string"`            // 登录状态（200成功 其它失败）
	Msg           string `json:"msg"`                    // 提示消息
	CreatedTime   int64  `json:"createdTime,string"`     // 登录时间
}

type SysLogOperIndexReq struct {
	Page         *PageInfo `json:"page,optional"`                 //分页信息,只获取一个则不填
	OperName     string    `json:"operName,optional "`            //按操作名称查找
	OperUserName string    `json:"operUserName,optional "`        //按操作人员名称查找
	BusinessType int64     `json:"businessType,string,optional "` //按业务类型（1新增 2修改 3删除 4查询）查找
	AppCode      string    `json:"appCode,optional"`              // 应用编号
}

type SysLogOperIndexResp struct {
	List  []*SysLogOperInfo `json:"list"`  //操作日志列表数据
	Total int64             `json:"total"` //操作日志列表总记录数
}

type SysLogOperInfo struct {
	UserID       int64  `json:"userID,string,optional"` // 用户id
	AppCode      string `json:"appCode"`                // 应用编号
	OperUserName string `json:"operUserName"`           //操作人员名称
	OperName     string `json:"operName"`               //操作名称
	BusinessType int64  `json:"businessType,string"`    //业务类型（1新增 2修改 3删除 4查询）
	Uri          string `json:"uri"`                    //请求地址
	OperIpAddr   string `json:"operIpAddr"`             //操作主机ip地址
	OperLocation string `json:"operLocation"`           //操作地点
	Req          string `json:"req"`                    //请求参数
	Resp         string `json:"resp"`                   //返回参数
	Code         int64  `json:"code,string"`            //登录状态（200成功 其它失败）
	Msg          string `json:"msg"`                    //提示消息
	CreatedTime  int64  `json:"createdTime,string"`     //操作时间
}

type Tag struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type TenantAccessInfoIndexReq struct {
	Code string `json:"code"` // 租户编号
}

type TenantAccessInfoTreeResp struct {
	List  []*AccessGroupInfo `json:"list"`
	Total int64              `json:"total"`
}

type TenantAccessInfoUpdateReq struct {
	Code        string   `json:"code"`        // 租户编号
	AccessCodes []string `json:"accessCodes"` // 模块编号
}

type TenantAppCreateReq struct {
	Code    string             `json:"code,optional"` // 应用编号
	AppCode string             `json:"appCode"`
	Modules []*TenantAppModule `json:"modules"`
}

type TenantAppIndexReq struct {
	Code string `json:"code,optional"` // 应用编号
}

type TenantAppIndexResp struct {
	List  []*AppInfo `json:"list"`  // 租户列表数据
	Total int64      `json:"total"` // 租户列表总记录数
}

type TenantAppMenu struct {
	TemplateID int64  `json:"templateID"`
	Code       string `json:"code,optional"`    // 应用编号
	AppCode    string `json:"appCode,optional"` // 应用编号
	MenuInfo
	Children []*TenantAppMenu `json:"children,optional"`
}

type TenantAppMenuIndexReq struct {
	Code       string `json:"code"` // 应用编号
	AppCode    string `json:"appCode"`
	ModuleCode string `json:"moduleCode"`
	IsRetTree  bool   `json:"isRetTree,optional"`
}

type TenantAppMenuIndexResp struct {
	List []*TenantAppMenu `json:"list"`
}

type TenantAppModule struct {
	Code    string  `json:"code"` // 应用编号
	MenuIDs []int64 `json:"menuIDs,optional"`
	ApiIDs  []int64 `json:"apiIDs,optional"`
}

type TenantAppWithIDOrCode struct {
	ID      int64  `json:"id,optional"`      // 编号
	Code    string `json:"code,optional"`    // 应用编号
	AppCode string `json:"appCode,optional"` // 应用编号
}

type TenantInfo struct {
	ID          int64   `json:"id,optional"`   // 接口编号
	Code        string  `json:"code"`          // 应用编号
	Name        string  `json:"name,optional"` // 接口名称
	AdminUserID int64   `json:"adminUserID,optional,string"`
	AdminRoleID int64   `json:"adminRoleID,optional"`
	Desc        *string `json:"desc,optional"`    // 备注
	BaseUrl     string  `json:"baseUrl,optional"` // 应用编号
	LogoUrl     string  `json:"logoUrl,optional"`
}

type TenantInfoCreateReq struct {
	Info          *TenantInfo `json:"info"`
	AdminUserInfo *UserInfo   `json:"adminUserInfo"`
}

type TenantInfoCreateResp struct {
	Code string `json:"code"`
}

type TenantInfoIndexReq struct {
	Page *PageInfo `json:"page,optional"` // 分页信息,只获取一个则不填
	Name string    `json:"name,optional"` // 应用名称
	Code string    `json:"code,optional"` // 应用编号
}

type TenantInfoIndexResp struct {
	List  []*TenantInfo `json:"list"`  // 租户列表数据
	Total int64         `json:"total"` // 租户列表总记录数
}

type TenantModuleCreateReq struct {
	Code       string  `json:"code"` // 应用编号
	AppCode    string  `json:"appCode"`
	ModuleCode string  `json:"moduleCode"`
	MenuIDs    []int64 `json:"menuIDs"`
	ApiIDs     []int64 `json:"apiIDs"`
}

type TenantModuleIndexReq struct {
	Code    string    `json:"code"` // 应用编号
	AppCode string    `json:"appCode"`
	Page    *PageInfo `json:"page,optional"`
}

type TenantModuleIndexResp struct {
	List []*ModuleInfo `json:"list"`
}

type TenantModuleWithIDOrCode struct {
	ID         int64  `json:"id,optional"`      // 编号
	Code       string `json:"code,optional"`    // 应用编号
	AppCode    string `json:"appCode,optional"` // 应用编号
	ModuleCode string `json:"moduleCode,optional"`
}

type TimeRange struct {
	Start int64 `json:"start,optional"` //开始时间 unix时间戳
	End   int64 `json:"end,optional"`   //结束时间 unix时间戳
}

type TimedTaskGroup struct {
	Code     string            `json:"code"`              //任务组编码
	Name     string            `json:"name,optional"`     // 组名
	Type     string            `json:"type,optional"`     //组类型:queue(消息队列消息发送)  sql(执行sql) email(邮件发送) http(http请求)
	SubType  string            `json:"subType,optional"`  //组子类型 natsJs nats         normal js
	Priority int64             `json:"priority,optional"` //组优先级: 6:critical 最高优先级  3: default 普通优先级 1:low 低优先级
	Env      map[string]string `json:"env,optional"`      //环境变量
	Config   string            `json:"config,optional"`
}

type TimedTaskGroupIndexReq struct {
	Page *PageInfo `json:"page,optional"` //分页信息,只获取一个则不填
}

type TimedTaskGroupIndexResp struct {
	List  []*TimedTaskGroup `json:"list"`
	Total int64             `json:"total"`
}

type TimedTaskInfo struct {
	GroupCode string `json:"groupCode"`         //组编码
	Type      int64  `json:"type,optional"`     //任务类型 1 定时任务 2 延时任务
	Name      string `json:"name,optional"`     // 任务名称
	Code      string `json:"code"`              //任务编码
	Params    string `json:"params,optional"`   // 任务参数,延时任务如果没有传任务参数会拿数据库的参数来执行
	CronExpr  string `json:"cronExpr,optional"` // cron执行表达式
	Status    int64  `json:"status,optional"`   // 状态
	Priority  int64  `json:"priority,optional"` //优先级: 10:critical 最高优先级  3: default 普通优先级 1:low 低优先级
}

type TimedTaskInfoIndexReq struct {
	Page *PageInfo `json:"page,optional"` //分页信息,只获取一个则不填
}

type TimedTaskInfoIndexResp struct {
	List  []*TimedTaskInfo `json:"list"`
	Total int64            `json:"total"`
}

type TimedTaskOption struct {
	Priority  int64  `json:"priority,optional"`  //优先级: 6:critical 最高优先级  3: default 普通优先级 1:low 低优先级//以下两个参数优先使用ProcessIn
	ProcessIn int64  `json:"processIn,optional"` //多久之后发 秒数
	ProcessAt int64  `json:"processAt,optional"` // 固定时间发 秒时间戳
	Timeout   int64  `json:"timeout,optional"`   //超时时间 优先使用 秒数
	Deadline  int64  `json:"deadline,optional"`  //截止时间  秒时间戳
	TaskID    string `json:"taskID,optional"`    //指定运行的taskID
}

type TimedTaskParamQueue struct {
	Topic   string `json:"topic"`
	Payload string `json:"payload"`
}

type TimedTaskParamSql struct {
	Param       map[string]string `json:"param"`
	ExecContent string            `json:"execContent"` //如果是normal,填写执行的sql,如果是脚本,填写脚本内容,如果不填,则会使用数据库中第一次初始化的参数
}

type TimedTaskSendReq struct {
	GroupCode  string               `json:"groupCode"`           //组需要提前创建好
	Code       string               `json:"code"`                //任务code
	Option     *TimedTaskOption     `json:"option,optional"`     //选项
	ParamQueue *TimedTaskParamQueue `json:"paramQueue,optional"` //消息队列发送类型配置,如果不传则使用数据库定义的
	ParamSql   *TimedTaskParamSql   `json:"paramSql,optional"`   //数据库执行类型配置,如果不传则使用数据库定义的
}

type TimedTaskWithTaskID struct {
	TaskID string `json:"taskID"` //运行的taskID
}

type UploadFileReq struct {
	FilePath string `json:"filePath"`        //文件路径(带文件名)
	Business string `form:"business"`        //业务(如产品管理 productManage)
	Scence   string `form:"scence"`          //场景(业务定义 如产品图片 productImg)
	Rename   bool   `form:"rename,optional"` //1文件重命名，0不重命名
	File     []byte `form:"file"`            //文件内容,二进制文件传输
}

type UploadFileResp struct {
	FilePath string `json:"filePath"` //文件路径(带文件名)
	FileUri  string `json:"fileUri"`  //文件uri 相对路径
}

type UploadUrlCreateReq struct {
	Business string `json:"business"`        //业务(如产品管理 productManage)
	Scene    string `json:"scene"`           //场景(业务定义 如产品图片 productImg)
	FilePath string `json:"filePath"`        //文件路径(带文件名)
	Rename   bool   `json:"rename,optional"` //true 文件重命名，false 不重命名(默认)
}

type UploadUrlCreateResp struct {
	FilePath  string `json:"filePath"`  //文件路径(带文件名)
	UploadUri string `json:"uploadUri"` //附件直传地址
}

type UserAreaApplyCreateReq struct {
	AreaID   int64 `json:"areaID,string"`
	AuthType int64 `json:"authType"` //1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
}

type UserAreaApplyDealReq struct {
	IsApprove bool    `json:"isApprove"` //是否同意
	IDs       []int64 `json:"ids"`       //权限数据IDs
}

type UserAreaApplyIndexReq struct {
	Page         *PageInfo `json:"page,optional"`         //进行数据分页（不传默认2000相当于全部）
	AuthTypes    []int64   `json:"authTypes,optional"`    //权限类型 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
	WithAreaInfo bool      `json:"withAreaInfo,optional"` //把区域信息附带上
	WithUserInfo bool      `json:"withUserInfo,optional"` //把用户信息带上
}

type UserAreaApplyIndexResp struct {
	List  []*UserAreaApplyInfo `json:"list"`
	Total int64                `json:"total"`
}

type UserAreaApplyInfo struct {
	ID          int64     `json:"id"`            //项目id
	UserID      int64     `json:"userID,string"` //用户ID
	AreaID      int64     `json:"areaID,string"` //项目id
	AuthType    int64     `json:"authType"`      // 1:读权限,只能读,不能写 4:管理权限,可以修改别人的权限
	CreatedTime int64     `json:"createdTime"`
	AreaInfo    *AreaInfo `json:"areaInfo"`
	UserInfo    *UserInfo `json:"userInfo"`
}

type UserCaptchaReq struct {
	Account string `json:"account,optional"`                               //短信验证时填写手机号,邮箱验证时填写邮箱
	Type    string `json:"type,options=phone|image|email"`                 //验证方式:短信验证,图片验证码
	Use     string `json:"use,options=login|register|changePwd|forgetPwd"` //用途
	Code    string `json:"code,optional"`                                  //验证码    微信邮箱验证登录填code
	CodeID  string `json:"codeID,optional"`                                //验证码编号 微信邮箱验证登录填state
}

type UserCaptchaResp struct {
	CodeID string `json:"codeID"`       //验证码编号
	Url    string `json:"url,optional"` //图片验证码url
	Expire int64  `json:"expire"`       //过期时间
}

type UserChangePwdReq struct {
	Type     string `json:"type,options=phone|email"` //验证方式:	phone手机号 email邮箱
	Code     string `json:"code"`                     //验证码    微信登录填code 账号密码登录时填写密码
	CodeID   string `json:"codeID,optional"`          //验证码编号 微信登录填state
	Password string `json:"password,optional"`        //密码
}

type UserCreateResp struct {
	UserID int64 `json:"userID,string,optional"` // 用户id
}

type UserForgetPwdReq struct {
	Type     string `json:"type,options=phone|email"` //验证方式:	phone手机号 email邮箱
	Account  string `json:"account,optional"`         //手机号注册时填写手机号 账号密码注册时填写userName
	Code     string `json:"code,optional"`            //验证码    微信登录填code 账号密码登录时填写密码
	CodeID   string `json:"codeID,optional"`          //验证码编号 微信登录填state
	Password string `json:"password"`                 //密码
}

type UserInfo struct {
	UserID          int64       `json:"userID,string,optional"`             // 用户id
	UserName        string      `json:"userName,optional"`                  // 用户名(唯一)
	Password        string      `json:"password,optional,omitempty"`        // 登录密码
	Email           string      `json:"email,optional"`                     // 邮箱
	Phone           string      `json:"phone,optional"`                     // 手机号
	LastIP          string      `json:"lastIP,optional"`                    // 最后登录ip
	RegIP           string      `json:"regIP,optional"`                     // 注册ip
	NickName        string      `json:"nickName,optional"`                  // 用户的昵称
	City            string      `json:"city,optional"`                      // 用户所在城市
	Country         string      `json:"country,optional"`                   // 用户所在国家
	Province        string      `json:"province,optional"`                  // 用户所在省份
	Language        string      `json:"language,optional"`                  // 用户的语言，简体中文为zh_CN
	HeadImg         string      `json:"headImg,optional"`                   // 用户头像
	IsUpdateHeadImg bool        `json:"isUpdateHeadImg,omitempty,optional"` // 用户头像
	CreatedTime     int64       `json:"createdTime,string,optional"`        // 创建时间
	Role            int64       `json:"role,optional"`                      // 用户角色默认
	Sex             int64       `json:"sex,optional"`                       // 用户的性别，值为1时是男性，值为2时是女性，值为0时是未知
	IsAllData       int64       `json:"isAllData,optional"`                 // 是否所有数据权限（1是，2否）
	Roles           []*RoleInfo `json:"roles,optional"`
	Tenant          *TenantInfo `json:"tenant,optional"`
}

type UserInfoCreateReq struct {
	Info    *UserInfo `json:"info"`
	RoleIDs []int64   `json:"roleIDs,range=(0:120]"` //角色编号列表
}

type UserInfoDeleteReq struct {
	UserID int64 `json:"userID,string,optional"` // 用户id
}

type UserInfoIndexReq struct {
	Page     *PageInfo `json:"page,optional"`     //分页信息
	UserName string    `json:"userName,optional"` //用户名(唯一)
	Phone    string    `json:"phone,optional"`    // 手机号
	Email    string    `json:"email,optional"`    // 邮箱
}

type UserInfoIndexResp struct {
	List  []*UserInfo `json:"list,omitempty"`           //用户信息列表
	Total int64       `json:"total,optional,omitempty"` //总数
}

type UserInfoReadReq struct {
	UserID     int64 `json:"userID,string,optional"` // 用户id
	WithRoles  bool  `json:"withRoles,optional"`
	WithTenant bool  `json:"withTenant,optional"`
}

type UserLoginReq struct {
	Account   string `json:"account,optional"`                                              //登录账号(支持用户名,手机号,邮箱) 账号密码登录时需要填写
	PwdType   int32  `json:"pwdType,optional"`                                              //账号密码登录时需要填写.0或1,无密码 2，明文 3，md5加密
	Password  string `json:"password,optional"`                                             //密码，建议md5转换 密码登录时需要填写
	LoginType string `json:"loginType,options=phone|wxOpen|wxIn|wxMiniP|dingApp|pwd|email"` //验证类型 phone 手机号 wxOpen 微信开放平台 wxIn 微信内 wxMiniP 微信小程序 pwd 账号密码 email 邮箱
	Code      string `json:"code,optional"`                                                 //验证码    微信邮箱验证登录填code
	CodeID    string `json:"codeID,optional"`                                               //验证码编号 微信邮箱验证登录填state
}

type UserLoginResp struct {
	Info  UserInfo    `json:"info"`  //用户信息
	Roles []*RoleInfo `json:"roles"` //角色列表
	Token JwtToken    `json:"token"` //用户token
}

type UserRegisterReq struct {
	RegType  string    `json:"regType,options=phone|email|wxOpen|wxIn|wxMiniP|pwd|dingApp"`
	Account  string    `json:"account,optional"`  //手机号注册时填写手机号 账号密码注册时填写userName
	Code     string    `json:"code"`              //验证码    微信登录填code 账号密码登录时填写密码
	CodeID   string    `json:"codeID,optional"`   //验证码编号 微信登录填state
	Password string    `json:"password,optional"` //密码
	Info     *UserInfo `json:"info,optional"`     //用户信息
}

type UserResourceReadResp struct {
	Roles []*RoleInfo `json:"roles"` //角色列表
	Info  *UserInfo   `json:"info"`  //用户信息
}

type UserResourceWithModuleReq struct {
	ModuleCode string `json:"moduleCode,optional"` // 应用编号
}

type UserRoleIndexReq struct {
	UserID int64 `json:"userID,string"` // 用户id
}

type UserRoleIndexResp struct {
	Total int64       `json:"total"`
	List  []*RoleInfo `json:"list"` //用户角色列表
}

type UserRoleMultiUpdateReq struct {
	UserID  int64   `json:"userID,string"` // 用户id
	RoleIDs []int64 `json:"roleIDs"`       //角色编号列表
}

type UserSelfReadReq struct {
	WithRoles  bool `json:"withRoles,optional"`
	WithTenant bool `json:"withTenant,optional"`
}

type WeatherAir struct {
	Aqi      string `json:"aqi"`
	Level    string `json:"level"`
	Category string `json:"category"`
	Primary  string `json:"primary"`
	Pm10     string `json:"pm10"`
	Pm2P5    string `json:"pm2p5"`
	No2      string `json:"no2"`
	So2      string `json:"so2"`
	Co       string `json:"co"`
	O3       string `json:"o3"`
}

type WeatherReadReq struct {
	Position Point `json:"position"`
}

type WeatherReadResp struct {
	ObsTime   string     `json:"obsTime"`
	Temp      string     `json:"temp"`
	FeelsLike string     `json:"feelsLike"`
	Icon      string     `json:"icon"`
	Text      string     `json:"text"`
	Wind360   string     `json:"wind360"`
	WindDir   string     `json:"windDir"`
	WindScale string     `json:"windScale"`
	WindSpeed string     `json:"windSpeed"`
	Humidity  string     `json:"humidity"`
	Precip    string     `json:"precip"`
	Pressure  string     `json:"pressure"`
	Vis       string     `json:"vis"`
	Cloud     string     `json:"cloud"`
	Dew       string     `json:"dew"`
	Air       WeatherAir `json:"air"`
}

type WithAppCodeID struct {
	AppCode string `json:"appCode"`
	ID      int64  `json:"id"`
	Code    string `json:"code"`
}

type WithID struct {
	ID int64 `json:"id,optional"` // id
}

type WithIDOrCode struct {
	ID   int64  `json:"id,optional"` // id
	Code string `json:"code,optional"`
}
