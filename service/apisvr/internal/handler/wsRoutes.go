// Code generated by goctl. DO NOT EDIT.
package handler

import (
	ws "gitee.com/i-Things/share/websocket"
	"net/http"

	systemaccessapi "gitee.com/i-Things/core/service/apisvr/internal/handler/system/access/api"
	systemaccessinfo "gitee.com/i-Things/core/service/apisvr/internal/handler/system/access/info"
	systemappinfo "gitee.com/i-Things/core/service/apisvr/internal/handler/system/app/info"
	systemappmodule "gitee.com/i-Things/core/service/apisvr/internal/handler/system/app/module"
	systemareainfo "gitee.com/i-Things/core/service/apisvr/internal/handler/system/area/info"
	systemcommon "gitee.com/i-Things/core/service/apisvr/internal/handler/system/common"
	systemdataarea "gitee.com/i-Things/core/service/apisvr/internal/handler/system/data/area"
	systemdataareauserapply "gitee.com/i-Things/core/service/apisvr/internal/handler/system/data/area/user/apply"
	systemdataproject "gitee.com/i-Things/core/service/apisvr/internal/handler/system/data/project"
	systemdictdetail "gitee.com/i-Things/core/service/apisvr/internal/handler/system/dict/detail"
	systemdictinfo "gitee.com/i-Things/core/service/apisvr/internal/handler/system/dict/info"
	systemjobtask "gitee.com/i-Things/core/service/apisvr/internal/handler/system/job/task"
	systemlog "gitee.com/i-Things/core/service/apisvr/internal/handler/system/log"
	systemmoduleinfo "gitee.com/i-Things/core/service/apisvr/internal/handler/system/module/info"
	systemmodulemenu "gitee.com/i-Things/core/service/apisvr/internal/handler/system/module/menu"
	systemopsworkOrder "gitee.com/i-Things/core/service/apisvr/internal/handler/system/ops/workOrder"
	systemprojectinfo "gitee.com/i-Things/core/service/apisvr/internal/handler/system/project/info"
	systemroleaccess "gitee.com/i-Things/core/service/apisvr/internal/handler/system/role/access"
	systemroleapp "gitee.com/i-Things/core/service/apisvr/internal/handler/system/role/app"
	systemroleinfo "gitee.com/i-Things/core/service/apisvr/internal/handler/system/role/info"
	systemrolemenu "gitee.com/i-Things/core/service/apisvr/internal/handler/system/role/menu"
	systemrolemodule "gitee.com/i-Things/core/service/apisvr/internal/handler/system/role/module"
	systemtenantaccessinfo "gitee.com/i-Things/core/service/apisvr/internal/handler/system/tenant/access/info"
	systemtenantapp "gitee.com/i-Things/core/service/apisvr/internal/handler/system/tenant/app"
	systemtenantappmenu "gitee.com/i-Things/core/service/apisvr/internal/handler/system/tenant/app/menu"
	systemtenantappmodule "gitee.com/i-Things/core/service/apisvr/internal/handler/system/tenant/app/module"
	systemtenantcore "gitee.com/i-Things/core/service/apisvr/internal/handler/system/tenant/core"
	systemtenantinfo "gitee.com/i-Things/core/service/apisvr/internal/handler/system/tenant/info"
	systemuserinfo "gitee.com/i-Things/core/service/apisvr/internal/handler/system/user/info"
	systemuserrole "gitee.com/i-Things/core/service/apisvr/internal/handler/system/user/role"
	systemuserself "gitee.com/i-Things/core/service/apisvr/internal/handler/system/user/self"
	"gitee.com/i-Things/core/service/apisvr/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterWsHandlers(server *ws.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemaccessapi.CreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemaccessapi.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemaccessapi.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemaccessapi.UpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/access/api"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemaccessinfo.CreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemaccessinfo.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemaccessinfo.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/tree",
					Handler: systemaccessinfo.TreeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemaccessinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/access/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemappinfo.CreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemappinfo.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemappinfo.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemappinfo.ReadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemappinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/app/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemappmodule.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: systemappmodule.MultiUpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/app/module"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemareainfo.CreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemareainfo.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemareainfo.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemareainfo.ReadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemareainfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/area/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/config",
					Handler: systemcommon.ConfigHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upload-file",
					Handler: systemcommon.UploadFileHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/upload-url/create",
					Handler: systemcommon.UploadUrlCreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/weather/read",
					Handler: systemcommon.WeatherReadHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/ws",
					Handler: systemcommon.WebsocketHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/common"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/ntp/read",
					Handler: systemcommon.NtpReadHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/common"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemdataarea.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/multi-delete",
					Handler: systemdataarea.MultiDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: systemdataarea.MultiUpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/data/area"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/deal",
					Handler: systemdataareauserapply.DealHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemdataareauserapply.IndexHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/data/area/user/apply"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemdataproject.ProjectIndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: systemdataproject.ProjectMultiUpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/data/project"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemdictdetail.CreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemdictdetail.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemdictdetail.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemdictdetail.UpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/dict/detail"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemdictinfo.CreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemdictinfo.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemdictinfo.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemdictinfo.ReadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemdictinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/dict/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/cancel",
					Handler: systemjobtask.CancelHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/create",
					Handler: systemjobtask.GroupCreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/delete",
					Handler: systemjobtask.GroupDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/index",
					Handler: systemjobtask.GroupIndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/read",
					Handler: systemjobtask.GroupReadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/update",
					Handler: systemjobtask.GroupUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/info/create",
					Handler: systemjobtask.InfoCreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/info/delete",
					Handler: systemjobtask.InfoDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/info/index",
					Handler: systemjobtask.InfoIndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/info/read",
					Handler: systemjobtask.InfoReadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/info/update",
					Handler: systemjobtask.InfoUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/log/index",
					Handler: systemjobtask.LogIndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/send",
					Handler: systemjobtask.SendHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/job/task"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/login/index",
					Handler: systemlog.LoginIndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/oper/index",
					Handler: systemlog.OperIndexHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/log"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemmoduleinfo.CreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemmoduleinfo.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemmoduleinfo.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemmoduleinfo.ReadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemmoduleinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/module/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemmodulemenu.CreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemmodulemenu.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemmodulemenu.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemmodulemenu.UpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/module/menu"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.TeardownWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/work-order/create",
					Handler: systemopsworkOrder.CreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/work-order/index",
					Handler: systemopsworkOrder.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/work-order/update",
					Handler: systemopsworkOrder.UpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/ops"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemprojectinfo.CreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemprojectinfo.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemprojectinfo.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemprojectinfo.ReadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemprojectinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/project/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemroleaccess.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: systemroleaccess.MultiUpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/role/access"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemroleapp.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: systemroleapp.MultiUpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/role/app"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemroleinfo.CreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemroleinfo.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemroleinfo.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemroleinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/role/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemrolemenu.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: systemrolemenu.MulitUpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/role/menu"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemrolemodule.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: systemrolemodule.MulitUpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/role/module"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemtenantaccessinfo.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: systemtenantaccessinfo.MultiUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/tree",
					Handler: systemtenantaccessinfo.TreeHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/tenant/access/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemtenantapp.CreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemtenantapp.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemtenantapp.IndexHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/tenant/app"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemtenantappmenu.CreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemtenantappmenu.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemtenantappmenu.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemtenantappmenu.UpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/tenant/app/menu"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemtenantappmodule.CreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemtenantappmodule.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemtenantappmodule.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/multi-create",
					Handler: systemtenantappmodule.MultiCreateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/tenant/app/module"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemtenantcore.ReadHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/tenant/core"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemtenantinfo.CreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemtenantinfo.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemtenantinfo.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemtenantinfo.ReadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemtenantinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/tenant/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemuserinfo.CreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemuserinfo.DeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemuserinfo.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemuserinfo.ReadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemuserinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/user/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.CheckApiWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemuserrole.RoleIndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: systemuserrole.RoleMultiUpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/user/role"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.DataAuthWare, serverCtx.InitCtxsWare, serverCtx.TeardownWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/access/tree",
					Handler: systemuserself.AccessTreeHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/app/index",
					Handler: systemuserself.AppIndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/area/apply/create",
					Handler: systemuserself.AreaApplyCreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/cancel",
					Handler: systemuserself.CancelHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/change-pwd",
					Handler: systemuserself.ChangePwdHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/menu/index",
					Handler: systemuserself.MenuIndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/module/index",
					Handler: systemuserself.ModuleIndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemuserself.ReadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemuserself.UpdateHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/user/self"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/captcha",
					Handler: systemuserself.CaptchaHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/forget-pwd",
					Handler: systemuserself.ForgetPwdHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/login",
					Handler: systemuserself.LoginHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/register",
					Handler: systemuserself.RegisterHandler(serverCtx),
				},
			}...,
		),
		ws.WithPrefix("/api/v1/system/user/self"),
	)
}
