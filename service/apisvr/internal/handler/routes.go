// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.1

package handler

import (
	"net/http"

	systemaccessapi "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/access/api"
	systemaccessinfo "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/access/info"
	systemappinfo "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/app/info"
	systemappmodule "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/app/module"
	systemareainfo "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/area/info"
	systemareaprofile "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/area/profile"
	systemcommon "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/common"
	systemdataarea "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/data/area"
	systemdataareauserapply "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/data/area/user/apply"
	systemdataopenaccess "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/data/open/access"
	systemdataproject "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/data/project"
	systemdeptinfo "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/dept/info"
	systemdictdetail "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/dict/detail"
	systemdictinfo "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/dict/info"
	systemjobtask "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/job/task"
	systemlog "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/log"
	systemmoduleinfo "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/module/info"
	systemmodulemenu "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/module/menu"
	systemnotifychannel "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/notify/channel"
	systemnotifyconfig "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/notify/config"
	systemnotifyconfigtemplate "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/notify/config/template"
	systemnotifymessageinfo "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/notify/message/info"
	systemnotifytemplate "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/notify/template"
	systemopsfeedback "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/ops/feedback"
	systemopsworkOrder "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/ops/workOrder"
	systemprojectinfo "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/project/info"
	systemprojectprofile "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/project/profile"
	systemroleaccess "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/role/access"
	systemroleapp "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/role/app"
	systemroleinfo "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/role/info"
	systemrolemenu "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/role/menu"
	systemrolemodule "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/role/module"
	systemslotinfo "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/slot/info"
	systemtenantaccessinfo "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/tenant/access/info"
	systemtenantagreement "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/tenant/agreement"
	systemtenantapp "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/tenant/app"
	systemtenantappcore "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/tenant/app/core"
	systemtenantappmenu "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/tenant/app/menu"
	systemtenantappmodule "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/tenant/app/module"
	systemtenantconfig "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/tenant/config"
	systemtenantcore "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/tenant/core"
	systemtenantinfo "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/tenant/info"
	systemuserinfo "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/user/info"
	systemuserrole "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/user/role"
	systemuserself "gitee.com/unitedrhino/core/service/apisvr/internal/handler/system/user/self"
	"gitee.com/unitedrhino/core/service/apisvr/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 添加接口
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemaccessapi.CreateHandler(serverCtx),
				},
				{
					// 删除接口
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemaccessapi.DeleteHandler(serverCtx),
				},
				{
					// 获取接口列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemaccessapi.IndexHandler(serverCtx),
				},
				{
					// 更新接口
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemaccessapi.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/access/api"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 添加访问权限信息
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemaccessinfo.CreateHandler(serverCtx),
				},
				{
					// 删除访问权限信息
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemaccessinfo.DeleteHandler(serverCtx),
				},
				{
					// 获取访问权限信息列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemaccessinfo.IndexHandler(serverCtx),
				},
				{
					// 批量导入授权
					Method:  http.MethodPost,
					Path:    "/multi-import",
					Handler: systemaccessinfo.MultiImportHandler(serverCtx),
				},
				{
					// 获取访问权限信息树结构
					Method:  http.MethodPost,
					Path:    "/tree",
					Handler: systemaccessinfo.TreeHandler(serverCtx),
				},
				{
					// 更新访问权限信息
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemaccessinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/access/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 添加应用
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemappinfo.CreateHandler(serverCtx),
				},
				{
					// 删除应用
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemappinfo.DeleteHandler(serverCtx),
				},
				{
					// 获取应用列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemappinfo.IndexHandler(serverCtx),
				},
				{
					// 获取应用详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemappinfo.ReadHandler(serverCtx),
				},
				{
					// 更新应用
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemappinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/app/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取APP权限列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemappmodule.IndexHandler(serverCtx),
				},
				{
					// 更新APP权限
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: systemappmodule.MultiUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/app/module"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 新增项目区域
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemareainfo.CreateHandler(serverCtx),
				},
				{
					// 删除项目区域
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemareainfo.DeleteHandler(serverCtx),
				},
				{
					// 获取项目区域列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemareainfo.IndexHandler(serverCtx),
				},
				{
					// 获取项目区域详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemareainfo.ReadHandler(serverCtx),
				},
				{
					// 更新项目区域
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemareainfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/area/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取区域配置列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemareaprofile.ProfileIndexHandler(serverCtx),
				},
				{
					// 获取区域配置详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemareaprofile.ProfileReadHandler(serverCtx),
				},
				{
					// 更新区域配置
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemareaprofile.ProfileUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/area/profile"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取系统配置
					Method:  http.MethodPost,
					Path:    "/config",
					Handler: systemcommon.ConfigHandler(serverCtx),
				},
				{
					// 获取小程序二维码
					Method:  http.MethodPost,
					Path:    "/qr-code/read",
					Handler: systemcommon.QRCodeReadReqHandler(serverCtx),
				},
				{
					// 文件直传
					Method:  http.MethodPost,
					Path:    "/upload-file",
					Handler: systemcommon.UploadFileHandler(serverCtx),
				},
				{
					// 获取文件上传地址
					Method:  http.MethodPost,
					Path:    "/upload-url/create",
					Handler: systemcommon.UploadUrlCreateHandler(serverCtx),
				},
				{
					// 获取天气情况
					Method:  http.MethodPost,
					Path:    "/weather/read",
					Handler: systemcommon.WeatherReadHandler(serverCtx),
				},
				{
					// websocket连接
					Method:  http.MethodGet,
					Path:    "/websocket/connect",
					Handler: systemcommon.WebsocketConnectHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/common"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// debug
					Method:  http.MethodPost,
					Path:    "/debug",
					Handler: systemcommon.DebugPostHandler(serverCtx),
				},
				{
					// debug
					Method:  http.MethodGet,
					Path:    "/debug",
					Handler: systemcommon.DebugGetHandler(serverCtx),
				},
				{
					// debugTencent
					Method:  http.MethodGet,
					Path:    "/debug-tencent",
					Handler: systemcommon.DebugGetTencentHandler(serverCtx),
				},
				{
					// ntp
					Method:  http.MethodPost,
					Path:    "/ntp/read",
					Handler: systemcommon.NtpReadHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/common"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取区域权限列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemdataarea.IndexHandler(serverCtx),
				},
				{
					// 删除授权区域权限
					Method:  http.MethodPost,
					Path:    "/multi-delete",
					Handler: systemdataarea.MultiDeleteHandler(serverCtx),
				},
				{
					// 更新授权区域权限
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: systemdataarea.MultiUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/data/area"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 授权区域权限
					Method:  http.MethodPost,
					Path:    "/deal",
					Handler: systemdataareauserapply.DealHandler(serverCtx),
				},
				{
					// 获取区域权限列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemdataareauserapply.IndexHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/data/area/user/apply"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 创建开放认证
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemdataopenaccess.CreateHandler(serverCtx),
				},
				{
					// 删除开放认证
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemdataopenaccess.DeleteHandler(serverCtx),
				},
				{
					// 获取开放认证列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemdataopenaccess.IndexHandler(serverCtx),
				},
				{
					// 获取开放认证详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemdataopenaccess.ReadHandler(serverCtx),
				},
				{
					// 更新开放认证
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemdataopenaccess.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/open/access"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 创建授权项目权限
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemdataproject.CreateHandler(serverCtx),
				},
				{
					// 删除授权项目权限
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemdataproject.DeleteHandler(serverCtx),
				},
				{
					// 获取项目权限列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemdataproject.ProjectIndexHandler(serverCtx),
				},
				{
					// 批量创建授权项目权限
					Method:  http.MethodPost,
					Path:    "/multi-create",
					Handler: systemdataproject.ProjectMultiCreateHandler(serverCtx),
				},
				{
					// 批量删除授权项目权限
					Method:  http.MethodPost,
					Path:    "/multi-delete",
					Handler: systemdataproject.MultiDeleteHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/data/project"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 添加部门详情
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemdeptinfo.CreateHandler(serverCtx),
				},
				{
					// 删除部门
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemdeptinfo.DeleteHandler(serverCtx),
				},
				{
					// 获取部门列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemdeptinfo.IndexHandler(serverCtx),
				},
				{
					// 获取部门单个
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemdeptinfo.ReadHandler(serverCtx),
				},
				{
					// 同步部门
					Method:  http.MethodPost,
					Path:    "/sync",
					Handler: systemdeptinfo.SyncHandler(serverCtx),
				},
				{
					// 更新部门
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemdeptinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/dept/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 添加字典详情
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemdictdetail.CreateHandler(serverCtx),
				},
				{
					// 删除字典详情
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemdictdetail.DeleteHandler(serverCtx),
				},
				{
					// 获取字典详情列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemdictdetail.IndexHandler(serverCtx),
				},
				{
					// 获取字典详情单个
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemdictdetail.ReadHandler(serverCtx),
				},
				{
					// 更新字典详情
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemdictdetail.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/dict/detail"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 添加字典信息
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemdictinfo.CreateHandler(serverCtx),
				},
				{
					// 删除字典信息
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemdictinfo.DeleteHandler(serverCtx),
				},
				{
					// 获取字典信息列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemdictinfo.IndexHandler(serverCtx),
				},
				{
					// 获取字典信息详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemdictinfo.ReadHandler(serverCtx),
				},
				{
					// 更新字典信息
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemdictinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/dict/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/cancel",
					Handler: systemjobtask.CancelHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/create",
					Handler: systemjobtask.GroupCreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/delete",
					Handler: systemjobtask.GroupDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/index",
					Handler: systemjobtask.GroupIndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/read",
					Handler: systemjobtask.GroupReadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/group/update",
					Handler: systemjobtask.GroupUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/info/create",
					Handler: systemjobtask.InfoCreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/info/delete",
					Handler: systemjobtask.InfoDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/info/index",
					Handler: systemjobtask.InfoIndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/info/read",
					Handler: systemjobtask.InfoReadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/info/update",
					Handler: systemjobtask.InfoUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/log/index",
					Handler: systemjobtask.LogIndexHandler(serverCtx),
				},
				{
					// 发送延时请求,如果任务不存在,则会自动创建,但是自动创建的需要填写param
					Method:  http.MethodPost,
					Path:    "/send",
					Handler: systemjobtask.SendHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/job/task"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取登录日志列表
					Method:  http.MethodPost,
					Path:    "/login/index",
					Handler: systemlog.LoginIndexHandler(serverCtx),
				},
				{
					// 获取操作日志列表
					Method:  http.MethodPost,
					Path:    "/oper/index",
					Handler: systemlog.OperIndexHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/log"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 添加模块
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemmoduleinfo.CreateHandler(serverCtx),
				},
				{
					// 删除模块
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemmoduleinfo.DeleteHandler(serverCtx),
				},
				{
					// 获取模块列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemmoduleinfo.IndexHandler(serverCtx),
				},
				{
					// 获取模块详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemmoduleinfo.ReadHandler(serverCtx),
				},
				{
					// 更新模块
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemmoduleinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/module/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 添加菜单
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemmodulemenu.CreateHandler(serverCtx),
				},
				{
					// 删除菜单
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemmodulemenu.DeleteHandler(serverCtx),
				},
				{
					// 获取菜单列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemmodulemenu.IndexHandler(serverCtx),
				},
				{
					// 更新菜单
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemmodulemenu.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/module/menu"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 添加通知通道
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemnotifychannel.CreateHandler(serverCtx),
				},
				{
					// 删除通知通道
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemnotifychannel.DeleteHandler(serverCtx),
				},
				{
					// 获取通知通道列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemnotifychannel.IndexHandler(serverCtx),
				},
				{
					// 获取通知通道详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemnotifychannel.ReadHandler(serverCtx),
				},
				{
					// 更新通知通道
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemnotifychannel.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/notify/channel"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 添加通知配置
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemnotifyconfig.CreateHandler(serverCtx),
				},
				{
					// 删除通知配置
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemnotifyconfig.DeleteHandler(serverCtx),
				},
				{
					// 获取通知列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemnotifyconfig.IndexHandler(serverCtx),
				},
				{
					// 获取通知详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemnotifyconfig.ReadHandler(serverCtx),
				},
				{
					// 获取通知列表树
					Method:  http.MethodPost,
					Path:    "/tree",
					Handler: systemnotifyconfig.TreeHandler(serverCtx),
				},
				{
					// 更新通知配置
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemnotifyconfig.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/notify/config"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 删除通知绑定模版
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemnotifyconfigtemplate.DeleteHandler(serverCtx),
				},
				{
					// 获取通知绑定模版列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemnotifyconfigtemplate.IndexHandler(serverCtx),
				},
				{
					// 更新通知绑定模版
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemnotifyconfigtemplate.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/notify/config/template"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 删除消息
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemnotifymessageinfo.DeleteHandler(serverCtx),
				},
				{
					// 获取消息列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemnotifymessageinfo.IndexHandler(serverCtx),
				},
				{
					// 发送消息
					Method:  http.MethodPost,
					Path:    "/send",
					Handler: systemnotifymessageinfo.SendHandler(serverCtx),
				},
				{
					// 更新消息
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemnotifymessageinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/notify/message/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 添加通知模版
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemnotifytemplate.CreateHandler(serverCtx),
				},
				{
					// 删除通知模版
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemnotifytemplate.DeleteHandler(serverCtx),
				},
				{
					// 获取通知模版列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemnotifytemplate.IndexHandler(serverCtx),
				},
				{
					// 获取通知模版详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemnotifytemplate.ReadHandler(serverCtx),
				},
				{
					// 更新通知模版
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemnotifytemplate.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/notify/template"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 添加帮助与反馈
					Method:  http.MethodPost,
					Path:    "/feedback/create",
					Handler: systemopsfeedback.CreateHandler(serverCtx),
				},
				{
					// 获取帮助与反馈
					Method:  http.MethodPost,
					Path:    "/feedback/index",
					Handler: systemopsfeedback.IndexHandler(serverCtx),
				},
				{
					// 更新帮助与反馈
					Method:  http.MethodPost,
					Path:    "/feedback/update",
					Handler: systemopsfeedback.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/ops"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 添加工单
					Method:  http.MethodPost,
					Path:    "/work-order/create",
					Handler: systemopsworkOrder.CreateHandler(serverCtx),
				},
				{
					// 获取工单列表
					Method:  http.MethodPost,
					Path:    "/work-order/index",
					Handler: systemopsworkOrder.IndexHandler(serverCtx),
				},
				{
					// 更新工单
					Method:  http.MethodPost,
					Path:    "/work-order/update",
					Handler: systemopsworkOrder.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/ops"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 新增项目
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemprojectinfo.CreateHandler(serverCtx),
				},
				{
					// 删除项目
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemprojectinfo.DeleteHandler(serverCtx),
				},
				{
					// 获取项目列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemprojectinfo.IndexHandler(serverCtx),
				},
				{
					// 获取项目详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemprojectinfo.ReadHandler(serverCtx),
				},
				{
					// 更新项目
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemprojectinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/project/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取项目配置列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemprojectprofile.ProfileIndexHandler(serverCtx),
				},
				{
					// 获取项目配置详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemprojectprofile.ProfileReadHandler(serverCtx),
				},
				{
					// 更新项目配置
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemprojectprofile.ProfileUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/project/profile"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取操作权限列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemroleaccess.IndexHandler(serverCtx),
				},
				{
					// 更新操作权限
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: systemroleaccess.MultiUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/role/access"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取APP权限列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemroleapp.IndexHandler(serverCtx),
				},
				{
					// 更新APP权限
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: systemroleapp.MultiUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/role/app"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 添加角色
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemroleinfo.CreateHandler(serverCtx),
				},
				{
					// 删除角色
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemroleinfo.DeleteHandler(serverCtx),
				},
				{
					// 获取角色列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemroleinfo.IndexHandler(serverCtx),
				},
				{
					// 更新角色
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemroleinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/role/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取角色对应菜单列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemrolemenu.IndexHandler(serverCtx),
				},
				{
					// 更新角色对应菜单列表
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: systemrolemenu.MulitUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/role/menu"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取角色对应模块列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemrolemodule.IndexHandler(serverCtx),
				},
				{
					// 更新角色对应模块列表
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: systemrolemodule.MulitUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/role/module"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 新增插槽
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemslotinfo.CreateHandler(serverCtx),
				},
				{
					// 删除插槽
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemslotinfo.DeleteHandler(serverCtx),
				},
				{
					// 获取插槽列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemslotinfo.IndexHandler(serverCtx),
				},
				{
					// 获取插槽详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemslotinfo.ReadHandler(serverCtx),
				},
				{
					// 更新插槽
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemslotinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/slot/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取租户操作权限列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemtenantaccessinfo.IndexHandler(serverCtx),
				},
				{
					// 批量创建租户操作权限
					Method:  http.MethodPost,
					Path:    "/multi-create",
					Handler: systemtenantaccessinfo.MultiCreateHandler(serverCtx),
				},
				{
					// 批量删除租户操作权限
					Method:  http.MethodPost,
					Path:    "/multi-delete",
					Handler: systemtenantaccessinfo.MultiDeleteHandler(serverCtx),
				},
				{
					// 批量更新租户操作权限
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: systemtenantaccessinfo.MultiUpdateHandler(serverCtx),
				},
				{
					// 获取租户操作权限树
					Method:  http.MethodPost,
					Path:    "/tree",
					Handler: systemtenantaccessinfo.TreeHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/tenant/access/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 添加协议
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemtenantagreement.CreateHandler(serverCtx),
				},
				{
					// 删除协议
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemtenantagreement.DeleteHandler(serverCtx),
				},
				{
					// 获取协议列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemtenantagreement.IndexHandler(serverCtx),
				},
				{
					// 更新协议
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemtenantagreement.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/tenant/agreement"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取协议详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemtenantagreement.ReadHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/tenant/agreement"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 绑定租户应用
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemtenantapp.CreateHandler(serverCtx),
				},
				{
					// 解绑租户应用
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemtenantapp.DeleteHandler(serverCtx),
				},
				{
					// 获取租户应用列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemtenantapp.IndexHandler(serverCtx),
				},
				{
					// 更新租户应用
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemtenantapp.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/tenant/app"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取应用信息
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemtenantappcore.ReadHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/tenant/app/core"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 创建租户应用菜单
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemtenantappmenu.CreateHandler(serverCtx),
				},
				{
					// 删除租户应用菜单
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemtenantappmenu.DeleteHandler(serverCtx),
				},
				{
					// 获取租户应用菜单列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemtenantappmenu.IndexHandler(serverCtx),
				},
				{
					// 更新租户应用菜单
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemtenantappmenu.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/tenant/app/menu"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 新增租户应用模块
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemtenantappmodule.CreateHandler(serverCtx),
				},
				{
					// 删除租户应用模块
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemtenantappmodule.DeleteHandler(serverCtx),
				},
				{
					// 获取租户应用模块列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemtenantappmodule.IndexHandler(serverCtx),
				},
				{
					// 批量新增租户应用模块
					Method:  http.MethodPost,
					Path:    "/multi-create",
					Handler: systemtenantappmodule.MultiCreateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/tenant/app/module"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取租户配置
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemtenantconfig.ReadHandler(serverCtx),
				},
				{
					// 更新租户配置
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemtenantconfig.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/tenant/config"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 搜索租户信息
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemtenantcore.IndexHandler(serverCtx),
				},
				{
					// 获取租户信息
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemtenantcore.ReadHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/tenant/core"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 添加租户
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemtenantinfo.CreateHandler(serverCtx),
				},
				{
					// 删除租户
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemtenantinfo.DeleteHandler(serverCtx),
				},
				{
					// 获取租户列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemtenantinfo.IndexHandler(serverCtx),
				},
				{
					// 获取租户详情
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemtenantinfo.ReadHandler(serverCtx),
				},
				{
					// 更新租户
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemtenantinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/tenant/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 创建用户信息
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: systemuserinfo.CreateHandler(serverCtx),
				},
				{
					// 刪除用户
					Method:  http.MethodPost,
					Path:    "/delete",
					Handler: systemuserinfo.DeleteHandler(serverCtx),
				},
				{
					// 查询用户信息列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemuserinfo.IndexHandler(serverCtx),
				},
				{
					// 获取用户信息
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemuserinfo.ReadHandler(serverCtx),
				},
				{
					// 更新用户基本数据
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemuserinfo.UpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/user/info"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取用户角色列表
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: systemuserrole.RoleIndexHandler(serverCtx),
				},
				{
					// 更新用户的角色列表
					Method:  http.MethodPost,
					Path:    "/multi-update",
					Handler: systemuserrole.RoleMultiUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/user/role"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckTokenWare, serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取用户授权树
					Method:  http.MethodPost,
					Path:    "/access/tree",
					Handler: systemuserself.AccessTreeHandler(serverCtx),
				},
				{
					// 获取用户应用列表
					Method:  http.MethodPost,
					Path:    "/app/index",
					Handler: systemuserself.AppIndexHandler(serverCtx),
				},
				{
					// 申请用户区域权限
					Method:  http.MethodPost,
					Path:    "/area/apply/create",
					Handler: systemuserself.AreaApplyCreateHandler(serverCtx),
				},
				{
					// 绑定账号
					Method:  http.MethodPost,
					Path:    "/bind-account",
					Handler: systemuserself.BindAccountHandler(serverCtx),
				},
				{
					// 注销用户
					Method:  http.MethodPost,
					Path:    "/cancel",
					Handler: systemuserself.CancelHandler(serverCtx),
				},
				{
					// 更新用户密码
					Method:  http.MethodPost,
					Path:    "/change-pwd",
					Handler: systemuserself.ChangePwdHandler(serverCtx),
				},
				{
					// 获取用户菜单列表
					Method:  http.MethodPost,
					Path:    "/menu/index",
					Handler: systemuserself.MenuIndexHandler(serverCtx),
				},
				{
					// 用户消息列表
					Method:  http.MethodPost,
					Path:    "/message/index",
					Handler: systemuserself.MessageIndexHandler(serverCtx),
				},
				{
					// 用户消息批量已读
					Method:  http.MethodPost,
					Path:    "/message/multi-is-read",
					Handler: systemuserself.MessageMultiIsReadHandler(serverCtx),
				},
				{
					// 用户消息统计
					Method:  http.MethodPost,
					Path:    "/message/statistics",
					Handler: systemuserself.MessageStatisticsHandler(serverCtx),
				},
				{
					// 获取用户模块列表
					Method:  http.MethodPost,
					Path:    "/module/index",
					Handler: systemuserself.ModuleIndexHandler(serverCtx),
				},
				{
					// 获取用户配置列表
					Method:  http.MethodPost,
					Path:    "/profile/index",
					Handler: systemuserself.ProfileIndexHandler(serverCtx),
				},
				{
					// 获取用户配置详情
					Method:  http.MethodPost,
					Path:    "/profile/read",
					Handler: systemuserself.ProfileReadHandler(serverCtx),
				},
				{
					// 更新用户配置
					Method:  http.MethodPost,
					Path:    "/profile/update",
					Handler: systemuserself.ProfileUpdateHandler(serverCtx),
				},
				{
					// 获取用户信息
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemuserself.ReadHandler(serverCtx),
				},
				{
					// 更新用户基本数据
					Method:  http.MethodPost,
					Path:    "/update",
					Handler: systemuserself.UpdateHandler(serverCtx),
				},
				{
					// 精准搜索用户
					Method:  http.MethodPost,
					Path:    "/user/search",
					Handler: systemuserself.UserSearchHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/user/self"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.InitCtxsWare},
			[]rest.Route{
				{
					// 获取用户应用详情
					Method:  http.MethodPost,
					Path:    "/app/read",
					Handler: systemuserself.AppReadHandler(serverCtx),
				},
				{
					// 获取验证码
					Method:  http.MethodPost,
					Path:    "/captcha",
					Handler: systemuserself.CaptchaHandler(serverCtx),
				},
				{
					// 忘记密码
					Method:  http.MethodPost,
					Path:    "/forget-pwd",
					Handler: systemuserself.ForgetPwdHandler(serverCtx),
				},
				{
					// 用户登录
					Method:  http.MethodPost,
					Path:    "/login",
					Handler: systemuserself.LoginHandler(serverCtx),
				},
				{
					// 用户注册
					Method:  http.MethodPost,
					Path:    "/register",
					Handler: systemuserself.RegisterHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/user/self"),
	)
}
